
micMems.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08009a78  08009a78  0000aa78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e88  08009e88  0000b5d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009e88  08009e88  0000ae88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e90  08009e90  0000b5d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e90  08009e90  0000ae90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e94  08009e94  0000ae94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005d4  20000000  08009e98  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b5d4  2**0
                  CONTENTS
 10 .bss          0000031c  200005d4  200005d4  0000b5d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008f0  200008f0  0000b5d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b5d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b5dc  00000000  00000000  0000b604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002300  00000000  00000000  00016be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a20  00000000  00000000  00018ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007a8  00000000  00000000  00019900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e4f  00000000  00000000  0001a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fa74  00000000  00000000  0003bef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7671  00000000  00000000  0004b96b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000be  00000000  00000000  00112fdc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c24  00000000  00000000  0011309c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  00116cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005d4 	.word	0x200005d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a60 	.word	0x08009a60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005d8 	.word	0x200005d8
 80001cc:	08009a60 	.word	0x08009a60

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <calculate_dB_int>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// dB değerini hesaplayan fonksiyon, tam sayıya dönüştür
int16_t calculate_dB_int(int16_t sample) {
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80fb      	strh	r3, [r7, #6]
    if (sample == 0) {
 8000f42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <calculate_dB_int+0x16>
        return -32768;
 8000f4a:	4b17      	ldr	r3, [pc, #92]	@ (8000fa8 <calculate_dB_int+0x70>)
 8000f4c:	e028      	b.n	8000fa0 <calculate_dB_int+0x68>
    }

    float rms = (float)fabs(sample) / 32768.0f;
 8000f4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fae6 	bl	8000524 <__aeabi_i2d>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4614      	mov	r4, r2
 8000f5e:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8000f62:	4620      	mov	r0, r4
 8000f64:	4629      	mov	r1, r5
 8000f66:	f7ff fe1f 	bl	8000ba8 <__aeabi_d2f>
 8000f6a:	ee06 0a90 	vmov	s13, r0
 8000f6e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000fac <calculate_dB_int+0x74>
 8000f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f76:	edc7 7a03 	vstr	s15, [r7, #12]
    float dB = 20 * log10f(rms);
 8000f7a:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f7e:	f008 f803 	bl	8008f88 <log10f>
 8000f82:	eef0 7a40 	vmov.f32	s15, s0
 8000f86:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8000f8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f8e:	edc7 7a02 	vstr	s15, [r7, #8]
    return (int16_t)dB;
 8000f92:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f9a:	ee17 3a90 	vmov	r3, s15
 8000f9e:	b21b      	sxth	r3, r3
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fa8:	ffff8000 	.word	0xffff8000
 8000fac:	47000000 	.word	0x47000000

08000fb0 <send_dB_over_UART>:

/* Send dB over UART and toggle LED */
void send_dB_over_UART() {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b090      	sub	sp, #64	@ 0x40
 8000fb4:	af00      	add	r7, sp, #0
    HAL_I2S_Receive(&hi2s2, (uint16_t*)pdm_buffer, PDM_BUFFER_SIZE / 2, 1000);
 8000fb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fba:	2220      	movs	r2, #32
 8000fbc:	4929      	ldr	r1, [pc, #164]	@ (8001064 <send_dB_over_UART+0xb4>)
 8000fbe:	482a      	ldr	r0, [pc, #168]	@ (8001068 <send_dB_over_UART+0xb8>)
 8000fc0:	f001 fc18 	bl	80027f4 <HAL_I2S_Receive>
    PDM_Filter(pdm_buffer, pcm_buffer, &PDM1_filter_handler);
 8000fc4:	4a29      	ldr	r2, [pc, #164]	@ (800106c <send_dB_over_UART+0xbc>)
 8000fc6:	492a      	ldr	r1, [pc, #168]	@ (8001070 <send_dB_over_UART+0xc0>)
 8000fc8:	4826      	ldr	r0, [pc, #152]	@ (8001064 <send_dB_over_UART+0xb4>)
 8000fca:	f005 f967 	bl	800629c <PDM_Filter>
    //send_PCM_over_UART();

    for (int i = 0; i < PCM_BUFFER_SIZE; i++) {
 8000fce:	2300      	movs	r3, #0
 8000fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000fd2:	e03c      	b.n	800104e <send_dB_over_UART+0x9e>
        int16_t dB_value = calculate_dB_int(pcm_buffer[i]);
 8000fd4:	4a26      	ldr	r2, [pc, #152]	@ (8001070 <send_dB_over_UART+0xc0>)
 8000fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fd8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ffab 	bl	8000f38 <calculate_dB_int>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        char buffer[50];
        int snprintf_ret = snprintf(buffer, sizeof(buffer), "%d \n", dB_value);
 8000fe6:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8000fea:	4638      	mov	r0, r7
 8000fec:	4a21      	ldr	r2, [pc, #132]	@ (8001074 <send_dB_over_UART+0xc4>)
 8000fee:	2132      	movs	r1, #50	@ 0x32
 8000ff0:	f005 fe88 	bl	8006d04 <sniprintf>
 8000ff4:	6378      	str	r0, [r7, #52]	@ 0x34

        if (snprintf_ret < 0 || snprintf_ret >= sizeof(buffer)) {
 8000ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	db02      	blt.n	8001002 <send_dB_over_UART+0x52>
 8000ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ffe:	2b31      	cmp	r3, #49	@ 0x31
 8001000:	d907      	bls.n	8001012 <send_dB_over_UART+0x62>
            HAL_UART_Transmit(&huart4, (uint8_t*)"snprintf error\n", 15, HAL_MAX_DELAY);
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	220f      	movs	r2, #15
 8001008:	491b      	ldr	r1, [pc, #108]	@ (8001078 <send_dB_over_UART+0xc8>)
 800100a:	481c      	ldr	r0, [pc, #112]	@ (800107c <send_dB_over_UART+0xcc>)
 800100c:	f002 fe7a 	bl	8003d04 <HAL_UART_Transmit>
 8001010:	e00b      	b.n	800102a <send_dB_over_UART+0x7a>
        } else {
            HAL_UART_Transmit(&huart4, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001012:	463b      	mov	r3, r7
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff f92b 	bl	8000270 <strlen>
 800101a:	4603      	mov	r3, r0
 800101c:	b29a      	uxth	r2, r3
 800101e:	4639      	mov	r1, r7
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
 8001024:	4815      	ldr	r0, [pc, #84]	@ (800107c <send_dB_over_UART+0xcc>)
 8001026:	f002 fe6d 	bl	8003d04 <HAL_UART_Transmit>
        }

        // LED'i her veri gönderiminde yak ve söndür
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);  // LED'i yak
 800102a:	2201      	movs	r2, #1
 800102c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001030:	4813      	ldr	r0, [pc, #76]	@ (8001080 <send_dB_over_UART+0xd0>)
 8001032:	f001 fa85 	bl	8002540 <HAL_GPIO_WritePin>
        HAL_Delay(50);  // Kısa süreli bir gecikme
 8001036:	2032      	movs	r0, #50	@ 0x32
 8001038:	f000 fcaa 	bl	8001990 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);  // LED'i söndür
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001042:	480f      	ldr	r0, [pc, #60]	@ (8001080 <send_dB_over_UART+0xd0>)
 8001044:	f001 fa7c 	bl	8002540 <HAL_GPIO_WritePin>
    for (int i = 0; i < PCM_BUFFER_SIZE; i++) {
 8001048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800104a:	3301      	adds	r3, #1
 800104c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800104e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001050:	2b0f      	cmp	r3, #15
 8001052:	ddbf      	ble.n	8000fd4 <send_dB_over_UART+0x24>
    }
    HAL_Delay(100);  // Her iletimden sonra kısa bir gecikme
 8001054:	2064      	movs	r0, #100	@ 0x64
 8001056:	f000 fc9b 	bl	8001990 <HAL_Delay>
}
 800105a:	bf00      	nop
 800105c:	3740      	adds	r7, #64	@ 0x40
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200006e8 	.word	0x200006e8
 8001068:	200005f8 	.word	0x200005f8
 800106c:	20000750 	.word	0x20000750
 8001070:	20000728 	.word	0x20000728
 8001074:	08009a78 	.word	0x08009a78
 8001078:	08009a80 	.word	0x08009a80
 800107c:	200006a0 	.word	0x200006a0
 8001080:	40020c00 	.word	0x40020c00

08001084 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001088:	f000 fc10 	bl	80018ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108c:	f000 f81a 	bl	80010c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001090:	f000 f916 	bl	80012c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001094:	f000 f8f4 	bl	8001280 <MX_DMA_Init>
  MX_I2S2_Init();
 8001098:	f000 f89a 	bl	80011d0 <MX_I2S2_Init>
  MX_UART4_Init();
 800109c:	f000 f8c6 	bl	800122c <MX_UART4_Init>
  MX_CRC_Init();
 80010a0:	f000 f87a 	bl	8001198 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 80010a4:	f003 f9ea 	bl	800447c <MX_PDM2PCM_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart4, (uint8_t*)"System Initialized\n", 19, HAL_MAX_DELAY);
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ac:	2213      	movs	r2, #19
 80010ae:	4903      	ldr	r1, [pc, #12]	@ (80010bc <main+0x38>)
 80010b0:	4803      	ldr	r0, [pc, #12]	@ (80010c0 <main+0x3c>)
 80010b2:	f002 fe27 	bl	8003d04 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  send_dB_over_UART();
 80010b6:	f7ff ff7b 	bl	8000fb0 <send_dB_over_UART>
 80010ba:	e7fc      	b.n	80010b6 <main+0x32>
 80010bc:	08009a90 	.word	0x08009a90
 80010c0:	200006a0 	.word	0x200006a0

080010c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b094      	sub	sp, #80	@ 0x50
 80010c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ca:	f107 0320 	add.w	r3, r7, #32
 80010ce:	2230      	movs	r2, #48	@ 0x30
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f005 fe8d 	bl	8006df2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e8:	2300      	movs	r3, #0
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	4b28      	ldr	r3, [pc, #160]	@ (8001190 <SystemClock_Config+0xcc>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f0:	4a27      	ldr	r2, [pc, #156]	@ (8001190 <SystemClock_Config+0xcc>)
 80010f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f8:	4b25      	ldr	r3, [pc, #148]	@ (8001190 <SystemClock_Config+0xcc>)
 80010fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001104:	2300      	movs	r3, #0
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	4b22      	ldr	r3, [pc, #136]	@ (8001194 <SystemClock_Config+0xd0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a21      	ldr	r2, [pc, #132]	@ (8001194 <SystemClock_Config+0xd0>)
 800110e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	4b1f      	ldr	r3, [pc, #124]	@ (8001194 <SystemClock_Config+0xd0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001120:	2301      	movs	r3, #1
 8001122:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001124:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001128:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112a:	2302      	movs	r3, #2
 800112c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800112e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001132:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001134:	2308      	movs	r3, #8
 8001136:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001138:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800113c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800113e:	2302      	movs	r3, #2
 8001140:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001142:	2307      	movs	r3, #7
 8001144:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001146:	f107 0320 	add.w	r3, r7, #32
 800114a:	4618      	mov	r0, r3
 800114c:	f001 ffb0 	bl	80030b0 <HAL_RCC_OscConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001156:	f000 f921 	bl	800139c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115a:	230f      	movs	r3, #15
 800115c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115e:	2302      	movs	r3, #2
 8001160:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001166:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800116a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800116c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001170:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	2105      	movs	r1, #5
 8001178:	4618      	mov	r0, r3
 800117a:	f002 fa11 	bl	80035a0 <HAL_RCC_ClockConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001184:	f000 f90a 	bl	800139c <Error_Handler>
  }
}
 8001188:	bf00      	nop
 800118a:	3750      	adds	r7, #80	@ 0x50
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40023800 	.word	0x40023800
 8001194:	40007000 	.word	0x40007000

08001198 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800119c:	4b0a      	ldr	r3, [pc, #40]	@ (80011c8 <MX_CRC_Init+0x30>)
 800119e:	4a0b      	ldr	r2, [pc, #44]	@ (80011cc <MX_CRC_Init+0x34>)
 80011a0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80011a2:	4809      	ldr	r0, [pc, #36]	@ (80011c8 <MX_CRC_Init+0x30>)
 80011a4:	f000 fd29 	bl	8001bfa <HAL_CRC_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80011ae:	f000 f8f5 	bl	800139c <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 80011b2:	4b05      	ldr	r3, [pc, #20]	@ (80011c8 <MX_CRC_Init+0x30>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	4b03      	ldr	r3, [pc, #12]	@ (80011c8 <MX_CRC_Init+0x30>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f042 0201 	orr.w	r2, r2, #1
 80011c0:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200005f0 	.word	0x200005f0
 80011cc:	40023000 	.word	0x40023000

080011d0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80011d4:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <MX_I2S2_Init+0x54>)
 80011d6:	4a14      	ldr	r2, [pc, #80]	@ (8001228 <MX_I2S2_Init+0x58>)
 80011d8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80011da:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <MX_I2S2_Init+0x54>)
 80011dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011e0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80011e2:	4b10      	ldr	r3, [pc, #64]	@ (8001224 <MX_I2S2_Init+0x54>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80011e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001224 <MX_I2S2_Init+0x54>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80011ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001224 <MX_I2S2_Init+0x54>)
 80011f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011f4:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <MX_I2S2_Init+0x54>)
 80011f8:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80011fc:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80011fe:	4b09      	ldr	r3, [pc, #36]	@ (8001224 <MX_I2S2_Init+0x54>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001204:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <MX_I2S2_Init+0x54>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800120a:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <MX_I2S2_Init+0x54>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001210:	4804      	ldr	r0, [pc, #16]	@ (8001224 <MX_I2S2_Init+0x54>)
 8001212:	f001 f9af 	bl	8002574 <HAL_I2S_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 800121c:	f000 f8be 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200005f8 	.word	0x200005f8
 8001228:	40003800 	.word	0x40003800

0800122c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001230:	4b11      	ldr	r3, [pc, #68]	@ (8001278 <MX_UART4_Init+0x4c>)
 8001232:	4a12      	ldr	r2, [pc, #72]	@ (800127c <MX_UART4_Init+0x50>)
 8001234:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001236:	4b10      	ldr	r3, [pc, #64]	@ (8001278 <MX_UART4_Init+0x4c>)
 8001238:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800123c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800123e:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <MX_UART4_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001244:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <MX_UART4_Init+0x4c>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	@ (8001278 <MX_UART4_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001250:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <MX_UART4_Init+0x4c>)
 8001252:	220c      	movs	r2, #12
 8001254:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001256:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <MX_UART4_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <MX_UART4_Init+0x4c>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	@ (8001278 <MX_UART4_Init+0x4c>)
 8001264:	f002 fcfe 	bl	8003c64 <HAL_UART_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800126e:	f000 f895 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200006a0 	.word	0x200006a0
 800127c:	40004c00 	.word	0x40004c00

08001280 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <MX_DMA_Init+0x3c>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	4a0b      	ldr	r2, [pc, #44]	@ (80012bc <MX_DMA_Init+0x3c>)
 8001290:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001294:	6313      	str	r3, [r2, #48]	@ 0x30
 8001296:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <MX_DMA_Init+0x3c>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	200f      	movs	r0, #15
 80012a8:	f000 fc71 	bl	8001b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80012ac:	200f      	movs	r0, #15
 80012ae:	f000 fc8a 	bl	8001bc6 <HAL_NVIC_EnableIRQ>

}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800

080012c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	@ 0x28
 80012c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b2e      	ldr	r3, [pc, #184]	@ (8001394 <MX_GPIO_Init+0xd4>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	4a2d      	ldr	r2, [pc, #180]	@ (8001394 <MX_GPIO_Init+0xd4>)
 80012e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001394 <MX_GPIO_Init+0xd4>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b27      	ldr	r3, [pc, #156]	@ (8001394 <MX_GPIO_Init+0xd4>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	4a26      	ldr	r2, [pc, #152]	@ (8001394 <MX_GPIO_Init+0xd4>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	6313      	str	r3, [r2, #48]	@ 0x30
 8001302:	4b24      	ldr	r3, [pc, #144]	@ (8001394 <MX_GPIO_Init+0xd4>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	4b20      	ldr	r3, [pc, #128]	@ (8001394 <MX_GPIO_Init+0xd4>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	4a1f      	ldr	r2, [pc, #124]	@ (8001394 <MX_GPIO_Init+0xd4>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6313      	str	r3, [r2, #48]	@ 0x30
 800131e:	4b1d      	ldr	r3, [pc, #116]	@ (8001394 <MX_GPIO_Init+0xd4>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	4b19      	ldr	r3, [pc, #100]	@ (8001394 <MX_GPIO_Init+0xd4>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	4a18      	ldr	r2, [pc, #96]	@ (8001394 <MX_GPIO_Init+0xd4>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	6313      	str	r3, [r2, #48]	@ 0x30
 800133a:	4b16      	ldr	r3, [pc, #88]	@ (8001394 <MX_GPIO_Init+0xd4>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
 800134a:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <MX_GPIO_Init+0xd4>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	4a11      	ldr	r2, [pc, #68]	@ (8001394 <MX_GPIO_Init+0xd4>)
 8001350:	f043 0308 	orr.w	r3, r3, #8
 8001354:	6313      	str	r3, [r2, #48]	@ 0x30
 8001356:	4b0f      	ldr	r3, [pc, #60]	@ (8001394 <MX_GPIO_Init+0xd4>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001368:	480b      	ldr	r0, [pc, #44]	@ (8001398 <MX_GPIO_Init+0xd8>)
 800136a:	f001 f8e9 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800136e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	4804      	ldr	r0, [pc, #16]	@ (8001398 <MX_GPIO_Init+0xd8>)
 8001388:	f000 ff3e 	bl	8002208 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800138c:	bf00      	nop
 800138e:	3728      	adds	r7, #40	@ 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40023800 	.word	0x40023800
 8001398:	40020c00 	.word	0x40020c00

0800139c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a0:	b672      	cpsid	i
}
 80013a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <Error_Handler+0x8>

080013a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <HAL_MspInit+0x4c>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b6:	4a0f      	ldr	r2, [pc, #60]	@ (80013f4 <HAL_MspInit+0x4c>)
 80013b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013be:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <HAL_MspInit+0x4c>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <HAL_MspInit+0x4c>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d2:	4a08      	ldr	r2, [pc, #32]	@ (80013f4 <HAL_MspInit+0x4c>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013da:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <HAL_MspInit+0x4c>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013e6:	2007      	movs	r0, #7
 80013e8:	f000 fbc6 	bl	8001b78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40023800 	.word	0x40023800

080013f8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0b      	ldr	r2, [pc, #44]	@ (8001434 <HAL_CRC_MspInit+0x3c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d10d      	bne.n	8001426 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b0a      	ldr	r3, [pc, #40]	@ (8001438 <HAL_CRC_MspInit+0x40>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	4a09      	ldr	r2, [pc, #36]	@ (8001438 <HAL_CRC_MspInit+0x40>)
 8001414:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001418:	6313      	str	r3, [r2, #48]	@ 0x30
 800141a:	4b07      	ldr	r3, [pc, #28]	@ (8001438 <HAL_CRC_MspInit+0x40>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40023000 	.word	0x40023000
 8001438:	40023800 	.word	0x40023800

0800143c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08e      	sub	sp, #56	@ 0x38
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a49      	ldr	r2, [pc, #292]	@ (800158c <HAL_I2S_MspInit+0x150>)
 8001468:	4293      	cmp	r3, r2
 800146a:	f040 808b 	bne.w	8001584 <HAL_I2S_MspInit+0x148>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800146e:	2301      	movs	r3, #1
 8001470:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 148;
 8001472:	2394      	movs	r3, #148	@ 0x94
 8001474:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 3;
 8001476:	2303      	movs	r3, #3
 8001478:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4618      	mov	r0, r3
 8001480:	f002 faae 	bl	80039e0 <HAL_RCCEx_PeriphCLKConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800148a:	f7ff ff87 	bl	800139c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	4b3f      	ldr	r3, [pc, #252]	@ (8001590 <HAL_I2S_MspInit+0x154>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	4a3e      	ldr	r2, [pc, #248]	@ (8001590 <HAL_I2S_MspInit+0x154>)
 8001498:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800149c:	6413      	str	r3, [r2, #64]	@ 0x40
 800149e:	4b3c      	ldr	r3, [pc, #240]	@ (8001590 <HAL_I2S_MspInit+0x154>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b38      	ldr	r3, [pc, #224]	@ (8001590 <HAL_I2S_MspInit+0x154>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	4a37      	ldr	r2, [pc, #220]	@ (8001590 <HAL_I2S_MspInit+0x154>)
 80014b4:	f043 0304 	orr.w	r3, r3, #4
 80014b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ba:	4b35      	ldr	r3, [pc, #212]	@ (8001590 <HAL_I2S_MspInit+0x154>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	4b31      	ldr	r3, [pc, #196]	@ (8001590 <HAL_I2S_MspInit+0x154>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	4a30      	ldr	r2, [pc, #192]	@ (8001590 <HAL_I2S_MspInit+0x154>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001590 <HAL_I2S_MspInit+0x154>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80014e2:	2348      	movs	r3, #72	@ 0x48
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014f2:	2305      	movs	r3, #5
 80014f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014fa:	4619      	mov	r1, r3
 80014fc:	4825      	ldr	r0, [pc, #148]	@ (8001594 <HAL_I2S_MspInit+0x158>)
 80014fe:	f000 fe83 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001502:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001514:	2305      	movs	r3, #5
 8001516:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001518:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800151c:	4619      	mov	r1, r3
 800151e:	481e      	ldr	r0, [pc, #120]	@ (8001598 <HAL_I2S_MspInit+0x15c>)
 8001520:	f000 fe72 	bl	8002208 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001524:	4b1d      	ldr	r3, [pc, #116]	@ (800159c <HAL_I2S_MspInit+0x160>)
 8001526:	4a1e      	ldr	r2, [pc, #120]	@ (80015a0 <HAL_I2S_MspInit+0x164>)
 8001528:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800152a:	4b1c      	ldr	r3, [pc, #112]	@ (800159c <HAL_I2S_MspInit+0x160>)
 800152c:	2200      	movs	r2, #0
 800152e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001530:	4b1a      	ldr	r3, [pc, #104]	@ (800159c <HAL_I2S_MspInit+0x160>)
 8001532:	2240      	movs	r2, #64	@ 0x40
 8001534:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001536:	4b19      	ldr	r3, [pc, #100]	@ (800159c <HAL_I2S_MspInit+0x160>)
 8001538:	2200      	movs	r2, #0
 800153a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800153c:	4b17      	ldr	r3, [pc, #92]	@ (800159c <HAL_I2S_MspInit+0x160>)
 800153e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001542:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001544:	4b15      	ldr	r3, [pc, #84]	@ (800159c <HAL_I2S_MspInit+0x160>)
 8001546:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800154a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800154c:	4b13      	ldr	r3, [pc, #76]	@ (800159c <HAL_I2S_MspInit+0x160>)
 800154e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001552:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001554:	4b11      	ldr	r3, [pc, #68]	@ (800159c <HAL_I2S_MspInit+0x160>)
 8001556:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800155a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800155c:	4b0f      	ldr	r3, [pc, #60]	@ (800159c <HAL_I2S_MspInit+0x160>)
 800155e:	2200      	movs	r2, #0
 8001560:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001562:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <HAL_I2S_MspInit+0x160>)
 8001564:	2200      	movs	r2, #0
 8001566:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001568:	480c      	ldr	r0, [pc, #48]	@ (800159c <HAL_I2S_MspInit+0x160>)
 800156a:	f000 fb63 	bl	8001c34 <HAL_DMA_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <HAL_I2S_MspInit+0x13c>
    {
      Error_Handler();
 8001574:	f7ff ff12 	bl	800139c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a08      	ldr	r2, [pc, #32]	@ (800159c <HAL_I2S_MspInit+0x160>)
 800157c:	639a      	str	r2, [r3, #56]	@ 0x38
 800157e:	4a07      	ldr	r2, [pc, #28]	@ (800159c <HAL_I2S_MspInit+0x160>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001584:	bf00      	nop
 8001586:	3738      	adds	r7, #56	@ 0x38
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40003800 	.word	0x40003800
 8001590:	40023800 	.word	0x40023800
 8001594:	40020800 	.word	0x40020800
 8001598:	40020400 	.word	0x40020400
 800159c:	20000640 	.word	0x20000640
 80015a0:	40026070 	.word	0x40026070

080015a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	@ 0x28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a19      	ldr	r2, [pc, #100]	@ (8001628 <HAL_UART_MspInit+0x84>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d12b      	bne.n	800161e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	4b18      	ldr	r3, [pc, #96]	@ (800162c <HAL_UART_MspInit+0x88>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ce:	4a17      	ldr	r2, [pc, #92]	@ (800162c <HAL_UART_MspInit+0x88>)
 80015d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80015d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015d6:	4b15      	ldr	r3, [pc, #84]	@ (800162c <HAL_UART_MspInit+0x88>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b11      	ldr	r3, [pc, #68]	@ (800162c <HAL_UART_MspInit+0x88>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	4a10      	ldr	r2, [pc, #64]	@ (800162c <HAL_UART_MspInit+0x88>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f2:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <HAL_UART_MspInit+0x88>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015fe:	2303      	movs	r3, #3
 8001600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800160e:	2308      	movs	r3, #8
 8001610:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	@ (8001630 <HAL_UART_MspInit+0x8c>)
 800161a:	f000 fdf5 	bl	8002208 <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	@ 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40004c00 	.word	0x40004c00
 800162c:	40023800 	.word	0x40023800
 8001630:	40020000 	.word	0x40020000

08001634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <NMI_Handler+0x4>

0800163c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <HardFault_Handler+0x4>

08001644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <MemManage_Handler+0x4>

0800164c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <BusFault_Handler+0x4>

08001654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <UsageFault_Handler+0x4>

0800165c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800168a:	f000 f961 	bl	8001950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001698:	4802      	ldr	r0, [pc, #8]	@ (80016a4 <DMA1_Stream4_IRQHandler+0x10>)
 800169a:	f000 fb79 	bl	8001d90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000640 	.word	0x20000640

080016a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return 1;
 80016ac:	2301      	movs	r3, #1
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <_kill>:

int _kill(int pid, int sig)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016c2:	f005 fbe9 	bl	8006e98 <__errno>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2216      	movs	r2, #22
 80016ca:	601a      	str	r2, [r3, #0]
  return -1;
 80016cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_exit>:

void _exit (int status)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016e0:	f04f 31ff 	mov.w	r1, #4294967295
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ffe7 	bl	80016b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016ea:	bf00      	nop
 80016ec:	e7fd      	b.n	80016ea <_exit+0x12>

080016ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	60f8      	str	r0, [r7, #12]
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	e00a      	b.n	8001716 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001700:	f3af 8000 	nop.w
 8001704:	4601      	mov	r1, r0
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	1c5a      	adds	r2, r3, #1
 800170a:	60ba      	str	r2, [r7, #8]
 800170c:	b2ca      	uxtb	r2, r1
 800170e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	3301      	adds	r3, #1
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	429a      	cmp	r2, r3
 800171c:	dbf0      	blt.n	8001700 <_read+0x12>
  }

  return len;
 800171e:	687b      	ldr	r3, [r7, #4]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	e009      	b.n	800174e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	60ba      	str	r2, [r7, #8]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	3301      	adds	r3, #1
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	429a      	cmp	r2, r3
 8001754:	dbf1      	blt.n	800173a <_write+0x12>
  }
  return len;
 8001756:	687b      	ldr	r3, [r7, #4]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <_close>:

int _close(int file)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001768:	f04f 33ff 	mov.w	r3, #4294967295
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001788:	605a      	str	r2, [r3, #4]
  return 0;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <_isatty>:

int _isatty(int file)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017a0:	2301      	movs	r3, #1
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b085      	sub	sp, #20
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	60f8      	str	r0, [r7, #12]
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d0:	4a14      	ldr	r2, [pc, #80]	@ (8001824 <_sbrk+0x5c>)
 80017d2:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <_sbrk+0x60>)
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017dc:	4b13      	ldr	r3, [pc, #76]	@ (800182c <_sbrk+0x64>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d102      	bne.n	80017ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e4:	4b11      	ldr	r3, [pc, #68]	@ (800182c <_sbrk+0x64>)
 80017e6:	4a12      	ldr	r2, [pc, #72]	@ (8001830 <_sbrk+0x68>)
 80017e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ea:	4b10      	ldr	r3, [pc, #64]	@ (800182c <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d207      	bcs.n	8001808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f8:	f005 fb4e 	bl	8006e98 <__errno>
 80017fc:	4603      	mov	r3, r0
 80017fe:	220c      	movs	r2, #12
 8001800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001802:	f04f 33ff 	mov.w	r3, #4294967295
 8001806:	e009      	b.n	800181c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001808:	4b08      	ldr	r3, [pc, #32]	@ (800182c <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180e:	4b07      	ldr	r3, [pc, #28]	@ (800182c <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	4a05      	ldr	r2, [pc, #20]	@ (800182c <_sbrk+0x64>)
 8001818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800181a:	68fb      	ldr	r3, [r7, #12]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20020000 	.word	0x20020000
 8001828:	00000400 	.word	0x00000400
 800182c:	20000748 	.word	0x20000748
 8001830:	200008f0 	.word	0x200008f0

08001834 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001838:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <SystemInit+0x20>)
 800183a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800183e:	4a05      	ldr	r2, [pc, #20]	@ (8001854 <SystemInit+0x20>)
 8001840:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001844:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001858:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001890 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800185c:	f7ff ffea 	bl	8001834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001860:	480c      	ldr	r0, [pc, #48]	@ (8001894 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001862:	490d      	ldr	r1, [pc, #52]	@ (8001898 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001864:	4a0d      	ldr	r2, [pc, #52]	@ (800189c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001868:	e002      	b.n	8001870 <LoopCopyDataInit>

0800186a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800186c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186e:	3304      	adds	r3, #4

08001870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001874:	d3f9      	bcc.n	800186a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001876:	4a0a      	ldr	r2, [pc, #40]	@ (80018a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001878:	4c0a      	ldr	r4, [pc, #40]	@ (80018a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800187c:	e001      	b.n	8001882 <LoopFillZerobss>

0800187e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001880:	3204      	adds	r2, #4

08001882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001884:	d3fb      	bcc.n	800187e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001886:	f005 fb0d 	bl	8006ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800188a:	f7ff fbfb 	bl	8001084 <main>
  bx  lr    
 800188e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001890:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001898:	200005d4 	.word	0x200005d4
  ldr r2, =_sidata
 800189c:	08009e98 	.word	0x08009e98
  ldr r2, =_sbss
 80018a0:	200005d4 	.word	0x200005d4
  ldr r4, =_ebss
 80018a4:	200008f0 	.word	0x200008f0

080018a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018a8:	e7fe      	b.n	80018a8 <ADC_IRQHandler>
	...

080018ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018b0:	4b0e      	ldr	r3, [pc, #56]	@ (80018ec <HAL_Init+0x40>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0d      	ldr	r2, [pc, #52]	@ (80018ec <HAL_Init+0x40>)
 80018b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018bc:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <HAL_Init+0x40>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0a      	ldr	r2, [pc, #40]	@ (80018ec <HAL_Init+0x40>)
 80018c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c8:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <HAL_Init+0x40>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a07      	ldr	r2, [pc, #28]	@ (80018ec <HAL_Init+0x40>)
 80018ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d4:	2003      	movs	r0, #3
 80018d6:	f000 f94f 	bl	8001b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018da:	2000      	movs	r0, #0
 80018dc:	f000 f808 	bl	80018f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e0:	f7ff fd62 	bl	80013a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023c00 	.word	0x40023c00

080018f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f8:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <HAL_InitTick+0x54>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <HAL_InitTick+0x58>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4619      	mov	r1, r3
 8001902:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001906:	fbb3 f3f1 	udiv	r3, r3, r1
 800190a:	fbb2 f3f3 	udiv	r3, r2, r3
 800190e:	4618      	mov	r0, r3
 8001910:	f000 f967 	bl	8001be2 <HAL_SYSTICK_Config>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e00e      	b.n	800193c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b0f      	cmp	r3, #15
 8001922:	d80a      	bhi.n	800193a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001924:	2200      	movs	r2, #0
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	f04f 30ff 	mov.w	r0, #4294967295
 800192c:	f000 f92f 	bl	8001b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001930:	4a06      	ldr	r2, [pc, #24]	@ (800194c <HAL_InitTick+0x5c>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	e000      	b.n	800193c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000000 	.word	0x20000000
 8001948:	20000008 	.word	0x20000008
 800194c:	20000004 	.word	0x20000004

08001950 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001954:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_IncTick+0x20>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	461a      	mov	r2, r3
 800195a:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <HAL_IncTick+0x24>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4413      	add	r3, r2
 8001960:	4a04      	ldr	r2, [pc, #16]	@ (8001974 <HAL_IncTick+0x24>)
 8001962:	6013      	str	r3, [r2, #0]
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20000008 	.word	0x20000008
 8001974:	2000074c 	.word	0x2000074c

08001978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return uwTick;
 800197c:	4b03      	ldr	r3, [pc, #12]	@ (800198c <HAL_GetTick+0x14>)
 800197e:	681b      	ldr	r3, [r3, #0]
}
 8001980:	4618      	mov	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	2000074c 	.word	0x2000074c

08001990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001998:	f7ff ffee 	bl	8001978 <HAL_GetTick>
 800199c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a8:	d005      	beq.n	80019b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019aa:	4b0a      	ldr	r3, [pc, #40]	@ (80019d4 <HAL_Delay+0x44>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4413      	add	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019b6:	bf00      	nop
 80019b8:	f7ff ffde 	bl	8001978 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d8f7      	bhi.n	80019b8 <HAL_Delay+0x28>
  {
  }
}
 80019c8:	bf00      	nop
 80019ca:	bf00      	nop
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000008 	.word	0x20000008

080019d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a1c <__NVIC_SetPriorityGrouping+0x44>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019f4:	4013      	ands	r3, r2
 80019f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a0a:	4a04      	ldr	r2, [pc, #16]	@ (8001a1c <__NVIC_SetPriorityGrouping+0x44>)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	60d3      	str	r3, [r2, #12]
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a24:	4b04      	ldr	r3, [pc, #16]	@ (8001a38 <__NVIC_GetPriorityGrouping+0x18>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	0a1b      	lsrs	r3, r3, #8
 8001a2a:	f003 0307 	and.w	r3, r3, #7
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	db0b      	blt.n	8001a66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	f003 021f 	and.w	r2, r3, #31
 8001a54:	4907      	ldr	r1, [pc, #28]	@ (8001a74 <__NVIC_EnableIRQ+0x38>)
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	095b      	lsrs	r3, r3, #5
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000e100 	.word	0xe000e100

08001a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	6039      	str	r1, [r7, #0]
 8001a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	db0a      	blt.n	8001aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	490c      	ldr	r1, [pc, #48]	@ (8001ac4 <__NVIC_SetPriority+0x4c>)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	0112      	lsls	r2, r2, #4
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa0:	e00a      	b.n	8001ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4908      	ldr	r1, [pc, #32]	@ (8001ac8 <__NVIC_SetPriority+0x50>)
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	3b04      	subs	r3, #4
 8001ab0:	0112      	lsls	r2, r2, #4
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	761a      	strb	r2, [r3, #24]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000e100 	.word	0xe000e100
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b089      	sub	sp, #36	@ 0x24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f1c3 0307 	rsb	r3, r3, #7
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	bf28      	it	cs
 8001aea:	2304      	movcs	r3, #4
 8001aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3304      	adds	r3, #4
 8001af2:	2b06      	cmp	r3, #6
 8001af4:	d902      	bls.n	8001afc <NVIC_EncodePriority+0x30>
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3b03      	subs	r3, #3
 8001afa:	e000      	b.n	8001afe <NVIC_EncodePriority+0x32>
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	f04f 32ff 	mov.w	r2, #4294967295
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43da      	mvns	r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	401a      	ands	r2, r3
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b14:	f04f 31ff 	mov.w	r1, #4294967295
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1e:	43d9      	mvns	r1, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b24:	4313      	orrs	r3, r2
         );
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3724      	adds	r7, #36	@ 0x24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b44:	d301      	bcc.n	8001b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00f      	b.n	8001b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b74 <SysTick_Config+0x40>)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b52:	210f      	movs	r1, #15
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295
 8001b58:	f7ff ff8e 	bl	8001a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b5c:	4b05      	ldr	r3, [pc, #20]	@ (8001b74 <SysTick_Config+0x40>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b62:	4b04      	ldr	r3, [pc, #16]	@ (8001b74 <SysTick_Config+0x40>)
 8001b64:	2207      	movs	r2, #7
 8001b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	e000e010 	.word	0xe000e010

08001b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ff29 	bl	80019d8 <__NVIC_SetPriorityGrouping>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	4603      	mov	r3, r0
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
 8001b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba0:	f7ff ff3e 	bl	8001a20 <__NVIC_GetPriorityGrouping>
 8001ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	6978      	ldr	r0, [r7, #20]
 8001bac:	f7ff ff8e 	bl	8001acc <NVIC_EncodePriority>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff5d 	bl	8001a78 <__NVIC_SetPriority>
}
 8001bbe:	bf00      	nop
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff31 	bl	8001a3c <__NVIC_EnableIRQ>
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ffa2 	bl	8001b34 <SysTick_Config>
 8001bf0:	4603      	mov	r3, r0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e00e      	b.n	8001c2a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	795b      	ldrb	r3, [r3, #5]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d105      	bne.n	8001c22 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff fbeb 	bl	80013f8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c40:	f7ff fe9a 	bl	8001978 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e099      	b.n	8001d84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0201 	bic.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c70:	e00f      	b.n	8001c92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c72:	f7ff fe81 	bl	8001978 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b05      	cmp	r3, #5
 8001c7e:	d908      	bls.n	8001c92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2220      	movs	r2, #32
 8001c84:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2203      	movs	r2, #3
 8001c8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e078      	b.n	8001d84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1e8      	bne.n	8001c72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	4b38      	ldr	r3, [pc, #224]	@ (8001d8c <HAL_DMA_Init+0x158>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	d107      	bne.n	8001cfc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f023 0307 	bic.w	r3, r3, #7
 8001d12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d117      	bne.n	8001d56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00e      	beq.n	8001d56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f9e9 	bl	8002110 <DMA_CheckFifoParam>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d008      	beq.n	8001d56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2240      	movs	r2, #64	@ 0x40
 8001d48:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d52:	2301      	movs	r3, #1
 8001d54:	e016      	b.n	8001d84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f9a0 	bl	80020a4 <DMA_CalcBaseAndBitshift>
 8001d64:	4603      	mov	r3, r0
 8001d66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d6c:	223f      	movs	r2, #63	@ 0x3f
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	f010803f 	.word	0xf010803f

08001d90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d9c:	4b8e      	ldr	r3, [pc, #568]	@ (8001fd8 <HAL_DMA_IRQHandler+0x248>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a8e      	ldr	r2, [pc, #568]	@ (8001fdc <HAL_DMA_IRQHandler+0x24c>)
 8001da2:	fba2 2303 	umull	r2, r3, r2, r3
 8001da6:	0a9b      	lsrs	r3, r3, #10
 8001da8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dba:	2208      	movs	r2, #8
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d01a      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d013      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0204 	bic.w	r2, r2, #4
 8001de2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de8:	2208      	movs	r2, #8
 8001dea:	409a      	lsls	r2, r3
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df4:	f043 0201 	orr.w	r2, r3, #1
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e00:	2201      	movs	r2, #1
 8001e02:	409a      	lsls	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d012      	beq.n	8001e32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00b      	beq.n	8001e32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1e:	2201      	movs	r2, #1
 8001e20:	409a      	lsls	r2, r3
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e2a:	f043 0202 	orr.w	r2, r3, #2
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e36:	2204      	movs	r2, #4
 8001e38:	409a      	lsls	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d012      	beq.n	8001e68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00b      	beq.n	8001e68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e54:	2204      	movs	r2, #4
 8001e56:	409a      	lsls	r2, r3
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e60:	f043 0204 	orr.w	r2, r3, #4
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e6c:	2210      	movs	r2, #16
 8001e6e:	409a      	lsls	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d043      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d03c      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8a:	2210      	movs	r2, #16
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d018      	beq.n	8001ed2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d108      	bne.n	8001ec0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d024      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	4798      	blx	r3
 8001ebe:	e01f      	b.n	8001f00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d01b      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	4798      	blx	r3
 8001ed0:	e016      	b.n	8001f00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d107      	bne.n	8001ef0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0208 	bic.w	r2, r2, #8
 8001eee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f04:	2220      	movs	r2, #32
 8001f06:	409a      	lsls	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 808f 	beq.w	8002030 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 8087 	beq.w	8002030 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f26:	2220      	movs	r2, #32
 8001f28:	409a      	lsls	r2, r3
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b05      	cmp	r3, #5
 8001f38:	d136      	bne.n	8001fa8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0216 	bic.w	r2, r2, #22
 8001f48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695a      	ldr	r2, [r3, #20]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d103      	bne.n	8001f6a <HAL_DMA_IRQHandler+0x1da>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d007      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 0208 	bic.w	r2, r2, #8
 8001f78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f7e:	223f      	movs	r2, #63	@ 0x3f
 8001f80:	409a      	lsls	r2, r3
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d07e      	beq.n	800209c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	4798      	blx	r3
        }
        return;
 8001fa6:	e079      	b.n	800209c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d01d      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10d      	bne.n	8001fe0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d031      	beq.n	8002030 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	4798      	blx	r3
 8001fd4:	e02c      	b.n	8002030 <HAL_DMA_IRQHandler+0x2a0>
 8001fd6:	bf00      	nop
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d023      	beq.n	8002030 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	4798      	blx	r3
 8001ff0:	e01e      	b.n	8002030 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10f      	bne.n	8002020 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0210 	bic.w	r2, r2, #16
 800200e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002034:	2b00      	cmp	r3, #0
 8002036:	d032      	beq.n	800209e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b00      	cmp	r3, #0
 8002042:	d022      	beq.n	800208a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2205      	movs	r2, #5
 8002048:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0201 	bic.w	r2, r2, #1
 800205a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	3301      	adds	r3, #1
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	429a      	cmp	r2, r3
 8002066:	d307      	bcc.n	8002078 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f2      	bne.n	800205c <HAL_DMA_IRQHandler+0x2cc>
 8002076:	e000      	b.n	800207a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002078:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208e:	2b00      	cmp	r3, #0
 8002090:	d005      	beq.n	800209e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	4798      	blx	r3
 800209a:	e000      	b.n	800209e <HAL_DMA_IRQHandler+0x30e>
        return;
 800209c:	bf00      	nop
    }
  }
}
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	3b10      	subs	r3, #16
 80020b4:	4a14      	ldr	r2, [pc, #80]	@ (8002108 <DMA_CalcBaseAndBitshift+0x64>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	091b      	lsrs	r3, r3, #4
 80020bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020be:	4a13      	ldr	r2, [pc, #76]	@ (800210c <DMA_CalcBaseAndBitshift+0x68>)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4413      	add	r3, r2
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d909      	bls.n	80020e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020da:	f023 0303 	bic.w	r3, r3, #3
 80020de:	1d1a      	adds	r2, r3, #4
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80020e4:	e007      	b.n	80020f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020ee:	f023 0303 	bic.w	r3, r3, #3
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	aaaaaaab 	.word	0xaaaaaaab
 800210c:	08009abc 	.word	0x08009abc

08002110 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002120:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d11f      	bne.n	800216a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b03      	cmp	r3, #3
 800212e:	d856      	bhi.n	80021de <DMA_CheckFifoParam+0xce>
 8002130:	a201      	add	r2, pc, #4	@ (adr r2, 8002138 <DMA_CheckFifoParam+0x28>)
 8002132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002136:	bf00      	nop
 8002138:	08002149 	.word	0x08002149
 800213c:	0800215b 	.word	0x0800215b
 8002140:	08002149 	.word	0x08002149
 8002144:	080021df 	.word	0x080021df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d046      	beq.n	80021e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002158:	e043      	b.n	80021e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002162:	d140      	bne.n	80021e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002168:	e03d      	b.n	80021e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002172:	d121      	bne.n	80021b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b03      	cmp	r3, #3
 8002178:	d837      	bhi.n	80021ea <DMA_CheckFifoParam+0xda>
 800217a:	a201      	add	r2, pc, #4	@ (adr r2, 8002180 <DMA_CheckFifoParam+0x70>)
 800217c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002180:	08002191 	.word	0x08002191
 8002184:	08002197 	.word	0x08002197
 8002188:	08002191 	.word	0x08002191
 800218c:	080021a9 	.word	0x080021a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
      break;
 8002194:	e030      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d025      	beq.n	80021ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a6:	e022      	b.n	80021ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021b0:	d11f      	bne.n	80021f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021b6:	e01c      	b.n	80021f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d903      	bls.n	80021c6 <DMA_CheckFifoParam+0xb6>
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d003      	beq.n	80021cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021c4:	e018      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	73fb      	strb	r3, [r7, #15]
      break;
 80021ca:	e015      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00e      	beq.n	80021f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
      break;
 80021dc:	e00b      	b.n	80021f6 <DMA_CheckFifoParam+0xe6>
      break;
 80021de:	bf00      	nop
 80021e0:	e00a      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;
 80021e2:	bf00      	nop
 80021e4:	e008      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;
 80021e6:	bf00      	nop
 80021e8:	e006      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;
 80021ea:	bf00      	nop
 80021ec:	e004      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;
 80021ee:	bf00      	nop
 80021f0:	e002      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80021f2:	bf00      	nop
 80021f4:	e000      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;
 80021f6:	bf00      	nop
    }
  } 
  
  return status; 
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop

08002208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	@ 0x24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800221a:	2300      	movs	r3, #0
 800221c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	e16b      	b.n	80024fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002224:	2201      	movs	r2, #1
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	429a      	cmp	r2, r3
 800223e:	f040 815a 	bne.w	80024f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	2b01      	cmp	r3, #1
 800224c:	d005      	beq.n	800225a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002256:	2b02      	cmp	r3, #2
 8002258:	d130      	bne.n	80022bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	2203      	movs	r2, #3
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002290:	2201      	movs	r2, #1
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f003 0201 	and.w	r2, r3, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d017      	beq.n	80022f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	2203      	movs	r2, #3
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d123      	bne.n	800234c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	08da      	lsrs	r2, r3, #3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3208      	adds	r2, #8
 800230c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	220f      	movs	r2, #15
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	08da      	lsrs	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3208      	adds	r2, #8
 8002346:	69b9      	ldr	r1, [r7, #24]
 8002348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	2203      	movs	r2, #3
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0203 	and.w	r2, r3, #3
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80b4 	beq.w	80024f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	4b60      	ldr	r3, [pc, #384]	@ (8002514 <HAL_GPIO_Init+0x30c>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002396:	4a5f      	ldr	r2, [pc, #380]	@ (8002514 <HAL_GPIO_Init+0x30c>)
 8002398:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800239c:	6453      	str	r3, [r2, #68]	@ 0x44
 800239e:	4b5d      	ldr	r3, [pc, #372]	@ (8002514 <HAL_GPIO_Init+0x30c>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023aa:	4a5b      	ldr	r2, [pc, #364]	@ (8002518 <HAL_GPIO_Init+0x310>)
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	3302      	adds	r3, #2
 80023b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	220f      	movs	r2, #15
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a52      	ldr	r2, [pc, #328]	@ (800251c <HAL_GPIO_Init+0x314>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d02b      	beq.n	800242e <HAL_GPIO_Init+0x226>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a51      	ldr	r2, [pc, #324]	@ (8002520 <HAL_GPIO_Init+0x318>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d025      	beq.n	800242a <HAL_GPIO_Init+0x222>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a50      	ldr	r2, [pc, #320]	@ (8002524 <HAL_GPIO_Init+0x31c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d01f      	beq.n	8002426 <HAL_GPIO_Init+0x21e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4f      	ldr	r2, [pc, #316]	@ (8002528 <HAL_GPIO_Init+0x320>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d019      	beq.n	8002422 <HAL_GPIO_Init+0x21a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4e      	ldr	r2, [pc, #312]	@ (800252c <HAL_GPIO_Init+0x324>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d013      	beq.n	800241e <HAL_GPIO_Init+0x216>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a4d      	ldr	r2, [pc, #308]	@ (8002530 <HAL_GPIO_Init+0x328>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00d      	beq.n	800241a <HAL_GPIO_Init+0x212>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4c      	ldr	r2, [pc, #304]	@ (8002534 <HAL_GPIO_Init+0x32c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d007      	beq.n	8002416 <HAL_GPIO_Init+0x20e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a4b      	ldr	r2, [pc, #300]	@ (8002538 <HAL_GPIO_Init+0x330>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d101      	bne.n	8002412 <HAL_GPIO_Init+0x20a>
 800240e:	2307      	movs	r3, #7
 8002410:	e00e      	b.n	8002430 <HAL_GPIO_Init+0x228>
 8002412:	2308      	movs	r3, #8
 8002414:	e00c      	b.n	8002430 <HAL_GPIO_Init+0x228>
 8002416:	2306      	movs	r3, #6
 8002418:	e00a      	b.n	8002430 <HAL_GPIO_Init+0x228>
 800241a:	2305      	movs	r3, #5
 800241c:	e008      	b.n	8002430 <HAL_GPIO_Init+0x228>
 800241e:	2304      	movs	r3, #4
 8002420:	e006      	b.n	8002430 <HAL_GPIO_Init+0x228>
 8002422:	2303      	movs	r3, #3
 8002424:	e004      	b.n	8002430 <HAL_GPIO_Init+0x228>
 8002426:	2302      	movs	r3, #2
 8002428:	e002      	b.n	8002430 <HAL_GPIO_Init+0x228>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <HAL_GPIO_Init+0x228>
 800242e:	2300      	movs	r3, #0
 8002430:	69fa      	ldr	r2, [r7, #28]
 8002432:	f002 0203 	and.w	r2, r2, #3
 8002436:	0092      	lsls	r2, r2, #2
 8002438:	4093      	lsls	r3, r2
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002440:	4935      	ldr	r1, [pc, #212]	@ (8002518 <HAL_GPIO_Init+0x310>)
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	089b      	lsrs	r3, r3, #2
 8002446:	3302      	adds	r3, #2
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800244e:	4b3b      	ldr	r3, [pc, #236]	@ (800253c <HAL_GPIO_Init+0x334>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002472:	4a32      	ldr	r2, [pc, #200]	@ (800253c <HAL_GPIO_Init+0x334>)
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002478:	4b30      	ldr	r3, [pc, #192]	@ (800253c <HAL_GPIO_Init+0x334>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800249c:	4a27      	ldr	r2, [pc, #156]	@ (800253c <HAL_GPIO_Init+0x334>)
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024a2:	4b26      	ldr	r3, [pc, #152]	@ (800253c <HAL_GPIO_Init+0x334>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024c6:	4a1d      	ldr	r2, [pc, #116]	@ (800253c <HAL_GPIO_Init+0x334>)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024cc:	4b1b      	ldr	r3, [pc, #108]	@ (800253c <HAL_GPIO_Init+0x334>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024f0:	4a12      	ldr	r2, [pc, #72]	@ (800253c <HAL_GPIO_Init+0x334>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3301      	adds	r3, #1
 80024fa:	61fb      	str	r3, [r7, #28]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	2b0f      	cmp	r3, #15
 8002500:	f67f ae90 	bls.w	8002224 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	3724      	adds	r7, #36	@ 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800
 8002518:	40013800 	.word	0x40013800
 800251c:	40020000 	.word	0x40020000
 8002520:	40020400 	.word	0x40020400
 8002524:	40020800 	.word	0x40020800
 8002528:	40020c00 	.word	0x40020c00
 800252c:	40021000 	.word	0x40021000
 8002530:	40021400 	.word	0x40021400
 8002534:	40021800 	.word	0x40021800
 8002538:	40021c00 	.word	0x40021c00
 800253c:	40013c00 	.word	0x40013c00

08002540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	807b      	strh	r3, [r7, #2]
 800254c:	4613      	mov	r3, r2
 800254e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002550:	787b      	ldrb	r3, [r7, #1]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002556:	887a      	ldrh	r2, [r7, #2]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800255c:	e003      	b.n	8002566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800255e:	887b      	ldrh	r3, [r7, #2]
 8002560:	041a      	lsls	r2, r3, #16
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	619a      	str	r2, [r3, #24]
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
	...

08002574 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e128      	b.n	80027d8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d109      	bne.n	80025a6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a90      	ldr	r2, [pc, #576]	@ (80027e0 <HAL_I2S_Init+0x26c>)
 800259e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7fe ff4b 	bl	800143c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2202      	movs	r2, #2
 80025aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80025bc:	f023 030f 	bic.w	r3, r3, #15
 80025c0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2202      	movs	r2, #2
 80025c8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d060      	beq.n	8002694 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d102      	bne.n	80025e0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80025da:	2310      	movs	r3, #16
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	e001      	b.n	80025e4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80025e0:	2320      	movs	r3, #32
 80025e2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b20      	cmp	r3, #32
 80025ea:	d802      	bhi.n	80025f2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80025f2:	2001      	movs	r0, #1
 80025f4:	f001 fad6 	bl	8003ba4 <HAL_RCCEx_GetPeriphCLKFreq>
 80025f8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002602:	d125      	bne.n	8002650 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d010      	beq.n	800262e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	fbb2 f2f3 	udiv	r2, r2, r3
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	461a      	mov	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	fbb2 f3f3 	udiv	r3, r2, r3
 8002628:	3305      	adds	r3, #5
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	e01f      	b.n	800266e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	fbb2 f2f3 	udiv	r2, r2, r3
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	461a      	mov	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	fbb2 f3f3 	udiv	r3, r2, r3
 800264a:	3305      	adds	r3, #5
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	e00e      	b.n	800266e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	fbb2 f2f3 	udiv	r2, r2, r3
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	461a      	mov	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	fbb2 f3f3 	udiv	r3, r2, r3
 800266a:	3305      	adds	r3, #5
 800266c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4a5c      	ldr	r2, [pc, #368]	@ (80027e4 <HAL_I2S_Init+0x270>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	08db      	lsrs	r3, r3, #3
 8002678:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	085b      	lsrs	r3, r3, #1
 800268a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	021b      	lsls	r3, r3, #8
 8002690:	61bb      	str	r3, [r7, #24]
 8002692:	e003      	b.n	800269c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002694:	2302      	movs	r3, #2
 8002696:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d902      	bls.n	80026a8 <HAL_I2S_Init+0x134>
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	2bff      	cmp	r3, #255	@ 0xff
 80026a6:	d907      	bls.n	80026b8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ac:	f043 0210 	orr.w	r2, r3, #16
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e08f      	b.n	80027d8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	ea42 0103 	orr.w	r1, r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69fa      	ldr	r2, [r7, #28]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80026d6:	f023 030f 	bic.w	r3, r3, #15
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6851      	ldr	r1, [r2, #4]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6892      	ldr	r2, [r2, #8]
 80026e2:	4311      	orrs	r1, r2
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	68d2      	ldr	r2, [r2, #12]
 80026e8:	4311      	orrs	r1, r2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6992      	ldr	r2, [r2, #24]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026fa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d161      	bne.n	80027c8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a38      	ldr	r2, [pc, #224]	@ (80027e8 <HAL_I2S_Init+0x274>)
 8002708:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a37      	ldr	r2, [pc, #220]	@ (80027ec <HAL_I2S_Init+0x278>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d101      	bne.n	8002718 <HAL_I2S_Init+0x1a4>
 8002714:	4b36      	ldr	r3, [pc, #216]	@ (80027f0 <HAL_I2S_Init+0x27c>)
 8002716:	e001      	b.n	800271c <HAL_I2S_Init+0x1a8>
 8002718:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6812      	ldr	r2, [r2, #0]
 8002722:	4932      	ldr	r1, [pc, #200]	@ (80027ec <HAL_I2S_Init+0x278>)
 8002724:	428a      	cmp	r2, r1
 8002726:	d101      	bne.n	800272c <HAL_I2S_Init+0x1b8>
 8002728:	4a31      	ldr	r2, [pc, #196]	@ (80027f0 <HAL_I2S_Init+0x27c>)
 800272a:	e001      	b.n	8002730 <HAL_I2S_Init+0x1bc>
 800272c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002730:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002734:	f023 030f 	bic.w	r3, r3, #15
 8002738:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a2b      	ldr	r2, [pc, #172]	@ (80027ec <HAL_I2S_Init+0x278>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d101      	bne.n	8002748 <HAL_I2S_Init+0x1d4>
 8002744:	4b2a      	ldr	r3, [pc, #168]	@ (80027f0 <HAL_I2S_Init+0x27c>)
 8002746:	e001      	b.n	800274c <HAL_I2S_Init+0x1d8>
 8002748:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800274c:	2202      	movs	r2, #2
 800274e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a25      	ldr	r2, [pc, #148]	@ (80027ec <HAL_I2S_Init+0x278>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d101      	bne.n	800275e <HAL_I2S_Init+0x1ea>
 800275a:	4b25      	ldr	r3, [pc, #148]	@ (80027f0 <HAL_I2S_Init+0x27c>)
 800275c:	e001      	b.n	8002762 <HAL_I2S_Init+0x1ee>
 800275e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800276e:	d003      	beq.n	8002778 <HAL_I2S_Init+0x204>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d103      	bne.n	8002780 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002778:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	e001      	b.n	8002784 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002780:	2300      	movs	r3, #0
 8002782:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800278e:	4313      	orrs	r3, r2
 8002790:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002798:	4313      	orrs	r3, r2
 800279a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80027a2:	4313      	orrs	r3, r2
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	897b      	ldrh	r3, [r7, #10]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027b0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a0d      	ldr	r2, [pc, #52]	@ (80027ec <HAL_I2S_Init+0x278>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d101      	bne.n	80027c0 <HAL_I2S_Init+0x24c>
 80027bc:	4b0c      	ldr	r3, [pc, #48]	@ (80027f0 <HAL_I2S_Init+0x27c>)
 80027be:	e001      	b.n	80027c4 <HAL_I2S_Init+0x250>
 80027c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80027c4:	897a      	ldrh	r2, [r7, #10]
 80027c6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3720      	adds	r7, #32
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	08002a75 	.word	0x08002a75
 80027e4:	cccccccd 	.word	0xcccccccd
 80027e8:	08002bfd 	.word	0x08002bfd
 80027ec:	40003800 	.word	0x40003800
 80027f0:	40003400 	.word	0x40003400

080027f4 <HAL_I2S_Receive>:
  * @note   In I2S Master Receiver mode, just after enabling the peripheral the clock will be generate
  *         in continuous way and as the I2S is not disabled at the end of the I2S transaction.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b088      	sub	sp, #32
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	4613      	mov	r3, r2
 8002802:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <HAL_I2S_Receive+0x1c>
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_I2S_Receive+0x20>
  {
    return  HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0b0      	b.n	8002976 <HAL_I2S_Receive+0x182>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b01      	cmp	r3, #1
 800281e:	d001      	beq.n	8002824 <HAL_I2S_Receive+0x30>
  {
    return HAL_BUSY;
 8002820:	2302      	movs	r3, #2
 8002822:	e0a8      	b.n	8002976 <HAL_I2S_Receive+0x182>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <HAL_I2S_Receive+0x40>
 8002830:	2302      	movs	r3, #2
 8002832:	e0a0      	b.n	8002976 <HAL_I2S_Receive+0x182>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  
  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2204      	movs	r2, #4
 8002840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	61fb      	str	r3, [r7, #28]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	2b03      	cmp	r3, #3
 8002860:	d002      	beq.n	8002868 <HAL_I2S_Receive+0x74>
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	2b05      	cmp	r3, #5
 8002866:	d10a      	bne.n	800287e <HAL_I2S_Receive+0x8a>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002868:	88fb      	ldrh	r3, [r7, #6]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002872:	88fb      	ldrh	r3, [r7, #6]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	865a      	strh	r2, [r3, #50]	@ 0x32
 800287c:	e005      	b.n	800288a <HAL_I2S_Receive+0x96>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	88fa      	ldrh	r2, [r7, #6]
 8002882:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	88fa      	ldrh	r2, [r7, #6]
 8002888:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002894:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002898:	d007      	beq.n	80028aa <HAL_I2S_Receive+0xb6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	69da      	ldr	r2, [r3, #28]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028a8:	61da      	str	r2, [r3, #28]
  }

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80028b8:	d14f      	bne.n	800295a <HAL_I2S_Receive+0x166>
  {
    /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80028ba:	2300      	movs	r3, #0
 80028bc:	61bb      	str	r3, [r7, #24]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	61bb      	str	r3, [r7, #24]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	61bb      	str	r3, [r7, #24]
 80028ce:	69bb      	ldr	r3, [r7, #24]
  }

  /* Receive data */
  while (hi2s->RxXferCount > 0U)
 80028d0:	e043      	b.n	800295a <HAL_I2S_Receive+0x166>
  {
    /* Wait until RXNE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_RXNE, SET, Timeout) != HAL_OK)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2201      	movs	r2, #1
 80028d6:	2101      	movs	r1, #1
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 f955 	bl	8002b88 <I2S_WaitFlagStateUntilTimeout>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00f      	beq.n	8002904 <HAL_I2S_Receive+0x110>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e8:	f043 0201 	orr.w	r2, r3, #1
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e038      	b.n	8002976 <HAL_I2S_Receive+0x182>
    }

    (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290e:	b292      	uxth	r2, r2
 8002910:	801a      	strh	r2, [r3, #0]
    hi2s->pRxBuffPtr++;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002916:	1c9a      	adds	r2, r3, #2
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2s->RxXferCount--;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002920:	b29b      	uxth	r3, r3
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	865a      	strh	r2, [r3, #50]	@ 0x32

    /* Check if an overrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_OVR) == SET)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002934:	2b40      	cmp	r3, #64	@ 0x40
 8002936:	d110      	bne.n	800295a <HAL_I2S_Receive+0x166>
    {
      /* Clear overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	697b      	ldr	r3, [r7, #20]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002952:	f043 0202 	orr.w	r2, r3, #2
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	645a      	str	r2, [r3, #68]	@ 0x44
  while (hi2s->RxXferCount > 0U)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800295e:	b29b      	uxth	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1b6      	bne.n	80028d2 <HAL_I2S_Receive+0xde>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  __HAL_UNLOCK(hi2s);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3720      	adds	r7, #32
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c6:	881a      	ldrh	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d2:	1c9a      	adds	r2, r3, #2
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029dc:	b29b      	uxth	r3, r3
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10e      	bne.n	8002a0e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80029fe:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ffb8 	bl	800297e <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a28:	b292      	uxth	r2, r2
 8002a2a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a30:	1c9a      	adds	r2, r3, #2
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10e      	bne.n	8002a6c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a5c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff ff93 	bl	8002992 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d13a      	bne.n	8002b06 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d109      	bne.n	8002aae <I2S_IRQHandler+0x3a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aa4:	2b40      	cmp	r3, #64	@ 0x40
 8002aa6:	d102      	bne.n	8002aae <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ffb4 	bl	8002a16 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab4:	2b40      	cmp	r3, #64	@ 0x40
 8002ab6:	d126      	bne.n	8002b06 <I2S_IRQHandler+0x92>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b20      	cmp	r3, #32
 8002ac4:	d11f      	bne.n	8002b06 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002ad4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	613b      	str	r3, [r7, #16]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af8:	f043 0202 	orr.w	r2, r3, #2
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff ff50 	bl	80029a6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d136      	bne.n	8002b80 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d109      	bne.n	8002b30 <I2S_IRQHandler+0xbc>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b26:	2b80      	cmp	r3, #128	@ 0x80
 8002b28:	d102      	bne.n	8002b30 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff ff45 	bl	80029ba <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d122      	bne.n	8002b80 <I2S_IRQHandler+0x10c>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 0320 	and.w	r3, r3, #32
 8002b44:	2b20      	cmp	r3, #32
 8002b46:	d11b      	bne.n	8002b80 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002b56:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b72:	f043 0204 	orr.w	r2, r3, #4
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff ff13 	bl	80029a6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b80:	bf00      	nop
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	4613      	mov	r3, r2
 8002b96:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b98:	f7fe feee 	bl	8001978 <HAL_GetTick>
 8002b9c:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002b9e:	e018      	b.n	8002bd2 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba6:	d014      	beq.n	8002bd2 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002ba8:	f7fe fee6 	bl	8001978 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d902      	bls.n	8002bbe <I2S_WaitFlagStateUntilTimeout+0x36>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d109      	bne.n	8002bd2 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e00f      	b.n	8002bf2 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	bf0c      	ite	eq
 8002be2:	2301      	moveq	r3, #1
 8002be4:	2300      	movne	r3, #0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	461a      	mov	r2, r3
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d1d7      	bne.n	8002ba0 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a92      	ldr	r2, [pc, #584]	@ (8002e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d101      	bne.n	8002c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002c16:	4b92      	ldr	r3, [pc, #584]	@ (8002e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c18:	e001      	b.n	8002c1e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002c1a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a8b      	ldr	r2, [pc, #556]	@ (8002e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d101      	bne.n	8002c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002c34:	4b8a      	ldr	r3, [pc, #552]	@ (8002e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c36:	e001      	b.n	8002c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002c38:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c48:	d004      	beq.n	8002c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f040 8099 	bne.w	8002d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d107      	bne.n	8002c6e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d002      	beq.n	8002c6e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f925 	bl	8002eb8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d107      	bne.n	8002c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f9c8 	bl	8003018 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c8e:	2b40      	cmp	r3, #64	@ 0x40
 8002c90:	d13a      	bne.n	8002d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d035      	beq.n	8002d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a6e      	ldr	r2, [pc, #440]	@ (8002e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d101      	bne.n	8002caa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002ca6:	4b6e      	ldr	r3, [pc, #440]	@ (8002e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ca8:	e001      	b.n	8002cae <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002caa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4969      	ldr	r1, [pc, #420]	@ (8002e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cb6:	428b      	cmp	r3, r1
 8002cb8:	d101      	bne.n	8002cbe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002cba:	4b69      	ldr	r3, [pc, #420]	@ (8002e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cbc:	e001      	b.n	8002cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002cbe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002cc2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002cc6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002cd6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfa:	f043 0202 	orr.w	r2, r3, #2
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7ff fe4f 	bl	80029a6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b08      	cmp	r3, #8
 8002d10:	f040 80c3 	bne.w	8002e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 80bd 	beq.w	8002e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002d2e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a49      	ldr	r2, [pc, #292]	@ (8002e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d101      	bne.n	8002d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002d3a:	4b49      	ldr	r3, [pc, #292]	@ (8002e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d3c:	e001      	b.n	8002d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002d3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4944      	ldr	r1, [pc, #272]	@ (8002e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d4a:	428b      	cmp	r3, r1
 8002d4c:	d101      	bne.n	8002d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002d4e:	4b44      	ldr	r3, [pc, #272]	@ (8002e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d50:	e001      	b.n	8002d56 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002d52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d56:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d5a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60bb      	str	r3, [r7, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d76:	f043 0204 	orr.w	r2, r3, #4
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7ff fe11 	bl	80029a6 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d84:	e089      	b.n	8002e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d107      	bne.n	8002da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f8be 	bl	8002f1c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d107      	bne.n	8002dba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f8fd 	bl	8002fb4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc0:	2b40      	cmp	r3, #64	@ 0x40
 8002dc2:	d12f      	bne.n	8002e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f003 0320 	and.w	r3, r3, #32
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d02a      	beq.n	8002e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002ddc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a1e      	ldr	r2, [pc, #120]	@ (8002e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d101      	bne.n	8002dec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002de8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002dea:	e001      	b.n	8002df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002dec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4919      	ldr	r1, [pc, #100]	@ (8002e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002df8:	428b      	cmp	r3, r1
 8002dfa:	d101      	bne.n	8002e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002dfc:	4b18      	ldr	r3, [pc, #96]	@ (8002e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002dfe:	e001      	b.n	8002e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002e00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e04:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002e08:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e16:	f043 0202 	orr.w	r2, r3, #2
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff fdc1 	bl	80029a6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d136      	bne.n	8002e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	f003 0320 	and.w	r3, r3, #32
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d031      	beq.n	8002e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a07      	ldr	r2, [pc, #28]	@ (8002e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d101      	bne.n	8002e46 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002e42:	4b07      	ldr	r3, [pc, #28]	@ (8002e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e44:	e001      	b.n	8002e4a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002e46:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4902      	ldr	r1, [pc, #8]	@ (8002e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e52:	428b      	cmp	r3, r1
 8002e54:	d106      	bne.n	8002e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002e56:	4b02      	ldr	r3, [pc, #8]	@ (8002e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e58:	e006      	b.n	8002e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002e5a:	bf00      	nop
 8002e5c:	40003800 	.word	0x40003800
 8002e60:	40003400 	.word	0x40003400
 8002e64:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e68:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002e6c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002e7c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8a:	f043 0204 	orr.w	r2, r3, #4
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff fd87 	bl	80029a6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e98:	e000      	b.n	8002e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e9a:	bf00      	nop
}
 8002e9c:	bf00      	nop
 8002e9e:	3720      	adds	r7, #32
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	1c99      	adds	r1, r3, #2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6251      	str	r1, [r2, #36]	@ 0x24
 8002eca:	881a      	ldrh	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d113      	bne.n	8002f12 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002ef8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d106      	bne.n	8002f12 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff ffc9 	bl	8002ea4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f28:	1c99      	adds	r1, r3, #2
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6251      	str	r1, [r2, #36]	@ 0x24
 8002f2e:	8819      	ldrh	r1, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a1d      	ldr	r2, [pc, #116]	@ (8002fac <I2SEx_TxISR_I2SExt+0x90>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d101      	bne.n	8002f3e <I2SEx_TxISR_I2SExt+0x22>
 8002f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb0 <I2SEx_TxISR_I2SExt+0x94>)
 8002f3c:	e001      	b.n	8002f42 <I2SEx_TxISR_I2SExt+0x26>
 8002f3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f42:	460a      	mov	r2, r1
 8002f44:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d121      	bne.n	8002fa2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a12      	ldr	r2, [pc, #72]	@ (8002fac <I2SEx_TxISR_I2SExt+0x90>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d101      	bne.n	8002f6c <I2SEx_TxISR_I2SExt+0x50>
 8002f68:	4b11      	ldr	r3, [pc, #68]	@ (8002fb0 <I2SEx_TxISR_I2SExt+0x94>)
 8002f6a:	e001      	b.n	8002f70 <I2SEx_TxISR_I2SExt+0x54>
 8002f6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	490d      	ldr	r1, [pc, #52]	@ (8002fac <I2SEx_TxISR_I2SExt+0x90>)
 8002f78:	428b      	cmp	r3, r1
 8002f7a:	d101      	bne.n	8002f80 <I2SEx_TxISR_I2SExt+0x64>
 8002f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb0 <I2SEx_TxISR_I2SExt+0x94>)
 8002f7e:	e001      	b.n	8002f84 <I2SEx_TxISR_I2SExt+0x68>
 8002f80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f84:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002f88:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d106      	bne.n	8002fa2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff ff81 	bl	8002ea4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40003800 	.word	0x40003800
 8002fb0:	40003400 	.word	0x40003400

08002fb4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68d8      	ldr	r0, [r3, #12]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc6:	1c99      	adds	r1, r3, #2
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002fcc:	b282      	uxth	r2, r0
 8002fce:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d113      	bne.n	8003010 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002ff6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7ff ff4a 	bl	8002ea4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003010:	bf00      	nop
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a20      	ldr	r2, [pc, #128]	@ (80030a8 <I2SEx_RxISR_I2SExt+0x90>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d101      	bne.n	800302e <I2SEx_RxISR_I2SExt+0x16>
 800302a:	4b20      	ldr	r3, [pc, #128]	@ (80030ac <I2SEx_RxISR_I2SExt+0x94>)
 800302c:	e001      	b.n	8003032 <I2SEx_RxISR_I2SExt+0x1a>
 800302e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003032:	68d8      	ldr	r0, [r3, #12]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003038:	1c99      	adds	r1, r3, #2
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800303e:	b282      	uxth	r2, r0
 8003040:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003046:	b29b      	uxth	r3, r3
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d121      	bne.n	800309e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a12      	ldr	r2, [pc, #72]	@ (80030a8 <I2SEx_RxISR_I2SExt+0x90>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d101      	bne.n	8003068 <I2SEx_RxISR_I2SExt+0x50>
 8003064:	4b11      	ldr	r3, [pc, #68]	@ (80030ac <I2SEx_RxISR_I2SExt+0x94>)
 8003066:	e001      	b.n	800306c <I2SEx_RxISR_I2SExt+0x54>
 8003068:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	490d      	ldr	r1, [pc, #52]	@ (80030a8 <I2SEx_RxISR_I2SExt+0x90>)
 8003074:	428b      	cmp	r3, r1
 8003076:	d101      	bne.n	800307c <I2SEx_RxISR_I2SExt+0x64>
 8003078:	4b0c      	ldr	r3, [pc, #48]	@ (80030ac <I2SEx_RxISR_I2SExt+0x94>)
 800307a:	e001      	b.n	8003080 <I2SEx_RxISR_I2SExt+0x68>
 800307c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003080:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003084:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800308a:	b29b      	uxth	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d106      	bne.n	800309e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7ff ff03 	bl	8002ea4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800309e:	bf00      	nop
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40003800 	.word	0x40003800
 80030ac:	40003400 	.word	0x40003400

080030b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e267      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d075      	beq.n	80031ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030ce:	4b88      	ldr	r3, [pc, #544]	@ (80032f0 <HAL_RCC_OscConfig+0x240>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d00c      	beq.n	80030f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030da:	4b85      	ldr	r3, [pc, #532]	@ (80032f0 <HAL_RCC_OscConfig+0x240>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d112      	bne.n	800310c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030e6:	4b82      	ldr	r3, [pc, #520]	@ (80032f0 <HAL_RCC_OscConfig+0x240>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030f2:	d10b      	bne.n	800310c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f4:	4b7e      	ldr	r3, [pc, #504]	@ (80032f0 <HAL_RCC_OscConfig+0x240>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d05b      	beq.n	80031b8 <HAL_RCC_OscConfig+0x108>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d157      	bne.n	80031b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e242      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003114:	d106      	bne.n	8003124 <HAL_RCC_OscConfig+0x74>
 8003116:	4b76      	ldr	r3, [pc, #472]	@ (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a75      	ldr	r2, [pc, #468]	@ (80032f0 <HAL_RCC_OscConfig+0x240>)
 800311c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	e01d      	b.n	8003160 <HAL_RCC_OscConfig+0xb0>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800312c:	d10c      	bne.n	8003148 <HAL_RCC_OscConfig+0x98>
 800312e:	4b70      	ldr	r3, [pc, #448]	@ (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a6f      	ldr	r2, [pc, #444]	@ (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003134:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	4b6d      	ldr	r3, [pc, #436]	@ (80032f0 <HAL_RCC_OscConfig+0x240>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a6c      	ldr	r2, [pc, #432]	@ (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	e00b      	b.n	8003160 <HAL_RCC_OscConfig+0xb0>
 8003148:	4b69      	ldr	r3, [pc, #420]	@ (80032f0 <HAL_RCC_OscConfig+0x240>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a68      	ldr	r2, [pc, #416]	@ (80032f0 <HAL_RCC_OscConfig+0x240>)
 800314e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003152:	6013      	str	r3, [r2, #0]
 8003154:	4b66      	ldr	r3, [pc, #408]	@ (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a65      	ldr	r2, [pc, #404]	@ (80032f0 <HAL_RCC_OscConfig+0x240>)
 800315a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800315e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d013      	beq.n	8003190 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003168:	f7fe fc06 	bl	8001978 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003170:	f7fe fc02 	bl	8001978 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b64      	cmp	r3, #100	@ 0x64
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e207      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003182:	4b5b      	ldr	r3, [pc, #364]	@ (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0xc0>
 800318e:	e014      	b.n	80031ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003190:	f7fe fbf2 	bl	8001978 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003198:	f7fe fbee 	bl	8001978 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b64      	cmp	r3, #100	@ 0x64
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e1f3      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031aa:	4b51      	ldr	r3, [pc, #324]	@ (80032f0 <HAL_RCC_OscConfig+0x240>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f0      	bne.n	8003198 <HAL_RCC_OscConfig+0xe8>
 80031b6:	e000      	b.n	80031ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d063      	beq.n	800328e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031c6:	4b4a      	ldr	r3, [pc, #296]	@ (80032f0 <HAL_RCC_OscConfig+0x240>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00b      	beq.n	80031ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031d2:	4b47      	ldr	r3, [pc, #284]	@ (80032f0 <HAL_RCC_OscConfig+0x240>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d11c      	bne.n	8003218 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031de:	4b44      	ldr	r3, [pc, #272]	@ (80032f0 <HAL_RCC_OscConfig+0x240>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d116      	bne.n	8003218 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ea:	4b41      	ldr	r3, [pc, #260]	@ (80032f0 <HAL_RCC_OscConfig+0x240>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d005      	beq.n	8003202 <HAL_RCC_OscConfig+0x152>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d001      	beq.n	8003202 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e1c7      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003202:	4b3b      	ldr	r3, [pc, #236]	@ (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	4937      	ldr	r1, [pc, #220]	@ (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003212:	4313      	orrs	r3, r2
 8003214:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003216:	e03a      	b.n	800328e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d020      	beq.n	8003262 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003220:	4b34      	ldr	r3, [pc, #208]	@ (80032f4 <HAL_RCC_OscConfig+0x244>)
 8003222:	2201      	movs	r2, #1
 8003224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003226:	f7fe fba7 	bl	8001978 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800322e:	f7fe fba3 	bl	8001978 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e1a8      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003240:	4b2b      	ldr	r3, [pc, #172]	@ (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0f0      	beq.n	800322e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324c:	4b28      	ldr	r3, [pc, #160]	@ (80032f0 <HAL_RCC_OscConfig+0x240>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4925      	ldr	r1, [pc, #148]	@ (80032f0 <HAL_RCC_OscConfig+0x240>)
 800325c:	4313      	orrs	r3, r2
 800325e:	600b      	str	r3, [r1, #0]
 8003260:	e015      	b.n	800328e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003262:	4b24      	ldr	r3, [pc, #144]	@ (80032f4 <HAL_RCC_OscConfig+0x244>)
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003268:	f7fe fb86 	bl	8001978 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003270:	f7fe fb82 	bl	8001978 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e187      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003282:	4b1b      	ldr	r3, [pc, #108]	@ (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f0      	bne.n	8003270 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d036      	beq.n	8003308 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d016      	beq.n	80032d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032a2:	4b15      	ldr	r3, [pc, #84]	@ (80032f8 <HAL_RCC_OscConfig+0x248>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a8:	f7fe fb66 	bl	8001978 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b0:	f7fe fb62 	bl	8001978 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e167      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c2:	4b0b      	ldr	r3, [pc, #44]	@ (80032f0 <HAL_RCC_OscConfig+0x240>)
 80032c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f0      	beq.n	80032b0 <HAL_RCC_OscConfig+0x200>
 80032ce:	e01b      	b.n	8003308 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d0:	4b09      	ldr	r3, [pc, #36]	@ (80032f8 <HAL_RCC_OscConfig+0x248>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d6:	f7fe fb4f 	bl	8001978 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032dc:	e00e      	b.n	80032fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032de:	f7fe fb4b 	bl	8001978 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d907      	bls.n	80032fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e150      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
 80032f0:	40023800 	.word	0x40023800
 80032f4:	42470000 	.word	0x42470000
 80032f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032fc:	4b88      	ldr	r3, [pc, #544]	@ (8003520 <HAL_RCC_OscConfig+0x470>)
 80032fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1ea      	bne.n	80032de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 8097 	beq.w	8003444 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003316:	2300      	movs	r3, #0
 8003318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800331a:	4b81      	ldr	r3, [pc, #516]	@ (8003520 <HAL_RCC_OscConfig+0x470>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10f      	bne.n	8003346 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	4b7d      	ldr	r3, [pc, #500]	@ (8003520 <HAL_RCC_OscConfig+0x470>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332e:	4a7c      	ldr	r2, [pc, #496]	@ (8003520 <HAL_RCC_OscConfig+0x470>)
 8003330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003334:	6413      	str	r3, [r2, #64]	@ 0x40
 8003336:	4b7a      	ldr	r3, [pc, #488]	@ (8003520 <HAL_RCC_OscConfig+0x470>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800333e:	60bb      	str	r3, [r7, #8]
 8003340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003342:	2301      	movs	r3, #1
 8003344:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003346:	4b77      	ldr	r3, [pc, #476]	@ (8003524 <HAL_RCC_OscConfig+0x474>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800334e:	2b00      	cmp	r3, #0
 8003350:	d118      	bne.n	8003384 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003352:	4b74      	ldr	r3, [pc, #464]	@ (8003524 <HAL_RCC_OscConfig+0x474>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a73      	ldr	r2, [pc, #460]	@ (8003524 <HAL_RCC_OscConfig+0x474>)
 8003358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800335c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800335e:	f7fe fb0b 	bl	8001978 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003366:	f7fe fb07 	bl	8001978 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e10c      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003378:	4b6a      	ldr	r3, [pc, #424]	@ (8003524 <HAL_RCC_OscConfig+0x474>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f0      	beq.n	8003366 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d106      	bne.n	800339a <HAL_RCC_OscConfig+0x2ea>
 800338c:	4b64      	ldr	r3, [pc, #400]	@ (8003520 <HAL_RCC_OscConfig+0x470>)
 800338e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003390:	4a63      	ldr	r2, [pc, #396]	@ (8003520 <HAL_RCC_OscConfig+0x470>)
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	6713      	str	r3, [r2, #112]	@ 0x70
 8003398:	e01c      	b.n	80033d4 <HAL_RCC_OscConfig+0x324>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	2b05      	cmp	r3, #5
 80033a0:	d10c      	bne.n	80033bc <HAL_RCC_OscConfig+0x30c>
 80033a2:	4b5f      	ldr	r3, [pc, #380]	@ (8003520 <HAL_RCC_OscConfig+0x470>)
 80033a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a6:	4a5e      	ldr	r2, [pc, #376]	@ (8003520 <HAL_RCC_OscConfig+0x470>)
 80033a8:	f043 0304 	orr.w	r3, r3, #4
 80033ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ae:	4b5c      	ldr	r3, [pc, #368]	@ (8003520 <HAL_RCC_OscConfig+0x470>)
 80033b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b2:	4a5b      	ldr	r2, [pc, #364]	@ (8003520 <HAL_RCC_OscConfig+0x470>)
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ba:	e00b      	b.n	80033d4 <HAL_RCC_OscConfig+0x324>
 80033bc:	4b58      	ldr	r3, [pc, #352]	@ (8003520 <HAL_RCC_OscConfig+0x470>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c0:	4a57      	ldr	r2, [pc, #348]	@ (8003520 <HAL_RCC_OscConfig+0x470>)
 80033c2:	f023 0301 	bic.w	r3, r3, #1
 80033c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80033c8:	4b55      	ldr	r3, [pc, #340]	@ (8003520 <HAL_RCC_OscConfig+0x470>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033cc:	4a54      	ldr	r2, [pc, #336]	@ (8003520 <HAL_RCC_OscConfig+0x470>)
 80033ce:	f023 0304 	bic.w	r3, r3, #4
 80033d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d015      	beq.n	8003408 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033dc:	f7fe facc 	bl	8001978 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e2:	e00a      	b.n	80033fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e4:	f7fe fac8 	bl	8001978 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e0cb      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fa:	4b49      	ldr	r3, [pc, #292]	@ (8003520 <HAL_RCC_OscConfig+0x470>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0ee      	beq.n	80033e4 <HAL_RCC_OscConfig+0x334>
 8003406:	e014      	b.n	8003432 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003408:	f7fe fab6 	bl	8001978 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800340e:	e00a      	b.n	8003426 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003410:	f7fe fab2 	bl	8001978 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e0b5      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003426:	4b3e      	ldr	r3, [pc, #248]	@ (8003520 <HAL_RCC_OscConfig+0x470>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1ee      	bne.n	8003410 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003432:	7dfb      	ldrb	r3, [r7, #23]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d105      	bne.n	8003444 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003438:	4b39      	ldr	r3, [pc, #228]	@ (8003520 <HAL_RCC_OscConfig+0x470>)
 800343a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343c:	4a38      	ldr	r2, [pc, #224]	@ (8003520 <HAL_RCC_OscConfig+0x470>)
 800343e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003442:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 80a1 	beq.w	8003590 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800344e:	4b34      	ldr	r3, [pc, #208]	@ (8003520 <HAL_RCC_OscConfig+0x470>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 030c 	and.w	r3, r3, #12
 8003456:	2b08      	cmp	r3, #8
 8003458:	d05c      	beq.n	8003514 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d141      	bne.n	80034e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003462:	4b31      	ldr	r3, [pc, #196]	@ (8003528 <HAL_RCC_OscConfig+0x478>)
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003468:	f7fe fa86 	bl	8001978 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003470:	f7fe fa82 	bl	8001978 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e087      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003482:	4b27      	ldr	r3, [pc, #156]	@ (8003520 <HAL_RCC_OscConfig+0x470>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69da      	ldr	r2, [r3, #28]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349c:	019b      	lsls	r3, r3, #6
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a4:	085b      	lsrs	r3, r3, #1
 80034a6:	3b01      	subs	r3, #1
 80034a8:	041b      	lsls	r3, r3, #16
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b0:	061b      	lsls	r3, r3, #24
 80034b2:	491b      	ldr	r1, [pc, #108]	@ (8003520 <HAL_RCC_OscConfig+0x470>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003528 <HAL_RCC_OscConfig+0x478>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034be:	f7fe fa5b 	bl	8001978 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c6:	f7fe fa57 	bl	8001978 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e05c      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d8:	4b11      	ldr	r3, [pc, #68]	@ (8003520 <HAL_RCC_OscConfig+0x470>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f0      	beq.n	80034c6 <HAL_RCC_OscConfig+0x416>
 80034e4:	e054      	b.n	8003590 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e6:	4b10      	ldr	r3, [pc, #64]	@ (8003528 <HAL_RCC_OscConfig+0x478>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ec:	f7fe fa44 	bl	8001978 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f4:	f7fe fa40 	bl	8001978 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e045      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003506:	4b06      	ldr	r3, [pc, #24]	@ (8003520 <HAL_RCC_OscConfig+0x470>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x444>
 8003512:	e03d      	b.n	8003590 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d107      	bne.n	800352c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e038      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
 8003520:	40023800 	.word	0x40023800
 8003524:	40007000 	.word	0x40007000
 8003528:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800352c:	4b1b      	ldr	r3, [pc, #108]	@ (800359c <HAL_RCC_OscConfig+0x4ec>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d028      	beq.n	800358c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003544:	429a      	cmp	r2, r3
 8003546:	d121      	bne.n	800358c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003552:	429a      	cmp	r2, r3
 8003554:	d11a      	bne.n	800358c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800355c:	4013      	ands	r3, r2
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003562:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003564:	4293      	cmp	r3, r2
 8003566:	d111      	bne.n	800358c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003572:	085b      	lsrs	r3, r3, #1
 8003574:	3b01      	subs	r3, #1
 8003576:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003578:	429a      	cmp	r2, r3
 800357a:	d107      	bne.n	800358c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003586:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003588:	429a      	cmp	r2, r3
 800358a:	d001      	beq.n	8003590 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e000      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40023800 	.word	0x40023800

080035a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0cc      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035b4:	4b68      	ldr	r3, [pc, #416]	@ (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d90c      	bls.n	80035dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c2:	4b65      	ldr	r3, [pc, #404]	@ (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ca:	4b63      	ldr	r3, [pc, #396]	@ (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d001      	beq.n	80035dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0b8      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d020      	beq.n	800362a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d005      	beq.n	8003600 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035f4:	4b59      	ldr	r3, [pc, #356]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	4a58      	ldr	r2, [pc, #352]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800360c:	4b53      	ldr	r3, [pc, #332]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	4a52      	ldr	r2, [pc, #328]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003616:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003618:	4b50      	ldr	r3, [pc, #320]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	494d      	ldr	r1, [pc, #308]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	4313      	orrs	r3, r2
 8003628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d044      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d107      	bne.n	800364e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363e:	4b47      	ldr	r3, [pc, #284]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d119      	bne.n	800367e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e07f      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d003      	beq.n	800365e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800365a:	2b03      	cmp	r3, #3
 800365c:	d107      	bne.n	800366e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800365e:	4b3f      	ldr	r3, [pc, #252]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d109      	bne.n	800367e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e06f      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366e:	4b3b      	ldr	r3, [pc, #236]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e067      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800367e:	4b37      	ldr	r3, [pc, #220]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f023 0203 	bic.w	r2, r3, #3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	4934      	ldr	r1, [pc, #208]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	4313      	orrs	r3, r2
 800368e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003690:	f7fe f972 	bl	8001978 <HAL_GetTick>
 8003694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003696:	e00a      	b.n	80036ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003698:	f7fe f96e 	bl	8001978 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e04f      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ae:	4b2b      	ldr	r3, [pc, #172]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 020c 	and.w	r2, r3, #12
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	429a      	cmp	r2, r3
 80036be:	d1eb      	bne.n	8003698 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036c0:	4b25      	ldr	r3, [pc, #148]	@ (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d20c      	bcs.n	80036e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ce:	4b22      	ldr	r3, [pc, #136]	@ (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d6:	4b20      	ldr	r3, [pc, #128]	@ (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e032      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d008      	beq.n	8003706 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f4:	4b19      	ldr	r3, [pc, #100]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4916      	ldr	r1, [pc, #88]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	4313      	orrs	r3, r2
 8003704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d009      	beq.n	8003726 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003712:	4b12      	ldr	r3, [pc, #72]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	490e      	ldr	r1, [pc, #56]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	4313      	orrs	r3, r2
 8003724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003726:	f000 f821 	bl	800376c <HAL_RCC_GetSysClockFreq>
 800372a:	4602      	mov	r2, r0
 800372c:	4b0b      	ldr	r3, [pc, #44]	@ (800375c <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	091b      	lsrs	r3, r3, #4
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	490a      	ldr	r1, [pc, #40]	@ (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 8003738:	5ccb      	ldrb	r3, [r1, r3]
 800373a:	fa22 f303 	lsr.w	r3, r2, r3
 800373e:	4a09      	ldr	r2, [pc, #36]	@ (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003742:	4b09      	ldr	r3, [pc, #36]	@ (8003768 <HAL_RCC_ClockConfig+0x1c8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f7fe f8d2 	bl	80018f0 <HAL_InitTick>

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40023c00 	.word	0x40023c00
 800375c:	40023800 	.word	0x40023800
 8003760:	08009aa4 	.word	0x08009aa4
 8003764:	20000000 	.word	0x20000000
 8003768:	20000004 	.word	0x20000004

0800376c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800376c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003770:	b094      	sub	sp, #80	@ 0x50
 8003772:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003780:	2300      	movs	r3, #0
 8003782:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003784:	4b79      	ldr	r3, [pc, #484]	@ (800396c <HAL_RCC_GetSysClockFreq+0x200>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 030c 	and.w	r3, r3, #12
 800378c:	2b08      	cmp	r3, #8
 800378e:	d00d      	beq.n	80037ac <HAL_RCC_GetSysClockFreq+0x40>
 8003790:	2b08      	cmp	r3, #8
 8003792:	f200 80e1 	bhi.w	8003958 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <HAL_RCC_GetSysClockFreq+0x34>
 800379a:	2b04      	cmp	r3, #4
 800379c:	d003      	beq.n	80037a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800379e:	e0db      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037a0:	4b73      	ldr	r3, [pc, #460]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x204>)
 80037a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037a4:	e0db      	b.n	800395e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037a6:	4b73      	ldr	r3, [pc, #460]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x208>)
 80037a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037aa:	e0d8      	b.n	800395e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037ac:	4b6f      	ldr	r3, [pc, #444]	@ (800396c <HAL_RCC_GetSysClockFreq+0x200>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037b4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037b6:	4b6d      	ldr	r3, [pc, #436]	@ (800396c <HAL_RCC_GetSysClockFreq+0x200>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d063      	beq.n	800388a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037c2:	4b6a      	ldr	r3, [pc, #424]	@ (800396c <HAL_RCC_GetSysClockFreq+0x200>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	099b      	lsrs	r3, r3, #6
 80037c8:	2200      	movs	r2, #0
 80037ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80037ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80037d6:	2300      	movs	r3, #0
 80037d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80037da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80037de:	4622      	mov	r2, r4
 80037e0:	462b      	mov	r3, r5
 80037e2:	f04f 0000 	mov.w	r0, #0
 80037e6:	f04f 0100 	mov.w	r1, #0
 80037ea:	0159      	lsls	r1, r3, #5
 80037ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037f0:	0150      	lsls	r0, r2, #5
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4621      	mov	r1, r4
 80037f8:	1a51      	subs	r1, r2, r1
 80037fa:	6139      	str	r1, [r7, #16]
 80037fc:	4629      	mov	r1, r5
 80037fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003810:	4659      	mov	r1, fp
 8003812:	018b      	lsls	r3, r1, #6
 8003814:	4651      	mov	r1, sl
 8003816:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800381a:	4651      	mov	r1, sl
 800381c:	018a      	lsls	r2, r1, #6
 800381e:	4651      	mov	r1, sl
 8003820:	ebb2 0801 	subs.w	r8, r2, r1
 8003824:	4659      	mov	r1, fp
 8003826:	eb63 0901 	sbc.w	r9, r3, r1
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003836:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800383a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800383e:	4690      	mov	r8, r2
 8003840:	4699      	mov	r9, r3
 8003842:	4623      	mov	r3, r4
 8003844:	eb18 0303 	adds.w	r3, r8, r3
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	462b      	mov	r3, r5
 800384c:	eb49 0303 	adc.w	r3, r9, r3
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800385e:	4629      	mov	r1, r5
 8003860:	024b      	lsls	r3, r1, #9
 8003862:	4621      	mov	r1, r4
 8003864:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003868:	4621      	mov	r1, r4
 800386a:	024a      	lsls	r2, r1, #9
 800386c:	4610      	mov	r0, r2
 800386e:	4619      	mov	r1, r3
 8003870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003872:	2200      	movs	r2, #0
 8003874:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003876:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003878:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800387c:	f7fd f9e4 	bl	8000c48 <__aeabi_uldivmod>
 8003880:	4602      	mov	r2, r0
 8003882:	460b      	mov	r3, r1
 8003884:	4613      	mov	r3, r2
 8003886:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003888:	e058      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800388a:	4b38      	ldr	r3, [pc, #224]	@ (800396c <HAL_RCC_GetSysClockFreq+0x200>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	099b      	lsrs	r3, r3, #6
 8003890:	2200      	movs	r2, #0
 8003892:	4618      	mov	r0, r3
 8003894:	4611      	mov	r1, r2
 8003896:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800389a:	623b      	str	r3, [r7, #32]
 800389c:	2300      	movs	r3, #0
 800389e:	627b      	str	r3, [r7, #36]	@ 0x24
 80038a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038a4:	4642      	mov	r2, r8
 80038a6:	464b      	mov	r3, r9
 80038a8:	f04f 0000 	mov.w	r0, #0
 80038ac:	f04f 0100 	mov.w	r1, #0
 80038b0:	0159      	lsls	r1, r3, #5
 80038b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038b6:	0150      	lsls	r0, r2, #5
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4641      	mov	r1, r8
 80038be:	ebb2 0a01 	subs.w	sl, r2, r1
 80038c2:	4649      	mov	r1, r9
 80038c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038dc:	ebb2 040a 	subs.w	r4, r2, sl
 80038e0:	eb63 050b 	sbc.w	r5, r3, fp
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	00eb      	lsls	r3, r5, #3
 80038ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038f2:	00e2      	lsls	r2, r4, #3
 80038f4:	4614      	mov	r4, r2
 80038f6:	461d      	mov	r5, r3
 80038f8:	4643      	mov	r3, r8
 80038fa:	18e3      	adds	r3, r4, r3
 80038fc:	603b      	str	r3, [r7, #0]
 80038fe:	464b      	mov	r3, r9
 8003900:	eb45 0303 	adc.w	r3, r5, r3
 8003904:	607b      	str	r3, [r7, #4]
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003912:	4629      	mov	r1, r5
 8003914:	028b      	lsls	r3, r1, #10
 8003916:	4621      	mov	r1, r4
 8003918:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800391c:	4621      	mov	r1, r4
 800391e:	028a      	lsls	r2, r1, #10
 8003920:	4610      	mov	r0, r2
 8003922:	4619      	mov	r1, r3
 8003924:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003926:	2200      	movs	r2, #0
 8003928:	61bb      	str	r3, [r7, #24]
 800392a:	61fa      	str	r2, [r7, #28]
 800392c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003930:	f7fd f98a 	bl	8000c48 <__aeabi_uldivmod>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4613      	mov	r3, r2
 800393a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800393c:	4b0b      	ldr	r3, [pc, #44]	@ (800396c <HAL_RCC_GetSysClockFreq+0x200>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	0c1b      	lsrs	r3, r3, #16
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	3301      	adds	r3, #1
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800394c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800394e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003950:	fbb2 f3f3 	udiv	r3, r2, r3
 8003954:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003956:	e002      	b.n	800395e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003958:	4b05      	ldr	r3, [pc, #20]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x204>)
 800395a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800395c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800395e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003960:	4618      	mov	r0, r3
 8003962:	3750      	adds	r7, #80	@ 0x50
 8003964:	46bd      	mov	sp, r7
 8003966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800396a:	bf00      	nop
 800396c:	40023800 	.word	0x40023800
 8003970:	00f42400 	.word	0x00f42400
 8003974:	007a1200 	.word	0x007a1200

08003978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800397c:	4b03      	ldr	r3, [pc, #12]	@ (800398c <HAL_RCC_GetHCLKFreq+0x14>)
 800397e:	681b      	ldr	r3, [r3, #0]
}
 8003980:	4618      	mov	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	20000000 	.word	0x20000000

08003990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003994:	f7ff fff0 	bl	8003978 <HAL_RCC_GetHCLKFreq>
 8003998:	4602      	mov	r2, r0
 800399a:	4b05      	ldr	r3, [pc, #20]	@ (80039b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	0a9b      	lsrs	r3, r3, #10
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	4903      	ldr	r1, [pc, #12]	@ (80039b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039a6:	5ccb      	ldrb	r3, [r1, r3]
 80039a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40023800 	.word	0x40023800
 80039b4:	08009ab4 	.word	0x08009ab4

080039b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039bc:	f7ff ffdc 	bl	8003978 <HAL_RCC_GetHCLKFreq>
 80039c0:	4602      	mov	r2, r0
 80039c2:	4b05      	ldr	r3, [pc, #20]	@ (80039d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	0b5b      	lsrs	r3, r3, #13
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	4903      	ldr	r1, [pc, #12]	@ (80039dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ce:	5ccb      	ldrb	r3, [r1, r3]
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40023800 	.word	0x40023800
 80039dc:	08009ab4 	.word	0x08009ab4

080039e0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d105      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d035      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a08:	4b62      	ldr	r3, [pc, #392]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a0e:	f7fd ffb3 	bl	8001978 <HAL_GetTick>
 8003a12:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a14:	e008      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a16:	f7fd ffaf 	bl	8001978 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e0b0      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a28:	4b5b      	ldr	r3, [pc, #364]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1f0      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	019a      	lsls	r2, r3, #6
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	071b      	lsls	r3, r3, #28
 8003a40:	4955      	ldr	r1, [pc, #340]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a48:	4b52      	ldr	r3, [pc, #328]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a4e:	f7fd ff93 	bl	8001978 <HAL_GetTick>
 8003a52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a54:	e008      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a56:	f7fd ff8f 	bl	8001978 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e090      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a68:	4b4b      	ldr	r3, [pc, #300]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0f0      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 8083 	beq.w	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	4b44      	ldr	r3, [pc, #272]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8a:	4a43      	ldr	r2, [pc, #268]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a92:	4b41      	ldr	r3, [pc, #260]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003a9e:	4b3f      	ldr	r3, [pc, #252]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a3e      	ldr	r2, [pc, #248]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003aa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aa8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003aaa:	f7fd ff65 	bl	8001978 <HAL_GetTick>
 8003aae:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab2:	f7fd ff61 	bl	8001978 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e062      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003ac4:	4b35      	ldr	r3, [pc, #212]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0f0      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ad0:	4b31      	ldr	r3, [pc, #196]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ad8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d02f      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d028      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003aee:	4b2a      	ldr	r3, [pc, #168]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003af6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003af8:	4b29      	ldr	r3, [pc, #164]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003afe:	4b28      	ldr	r3, [pc, #160]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003b04:	4a24      	ldr	r2, [pc, #144]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b0a:	4b23      	ldr	r3, [pc, #140]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d114      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003b16:	f7fd ff2f 	bl	8001978 <HAL_GetTick>
 8003b1a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1c:	e00a      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b1e:	f7fd ff2b 	bl	8001978 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e02a      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b34:	4b18      	ldr	r3, [pc, #96]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0ee      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b4c:	d10d      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003b4e:	4b12      	ldr	r3, [pc, #72]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003b5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b62:	490d      	ldr	r1, [pc, #52]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	608b      	str	r3, [r1, #8]
 8003b68:	e005      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b70:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003b74:	6093      	str	r3, [r2, #8]
 8003b76:	4b08      	ldr	r3, [pc, #32]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b78:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b82:	4905      	ldr	r1, [pc, #20]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	42470068 	.word	0x42470068
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	40007000 	.word	0x40007000
 8003ba0:	42470e40 	.word	0x42470e40

08003ba4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d13f      	bne.n	8003c42 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003bc2:	4b24      	ldr	r3, [pc, #144]	@ (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d006      	beq.n	8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bd8:	d12f      	bne.n	8003c3a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003bda:	4b1f      	ldr	r3, [pc, #124]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003bdc:	617b      	str	r3, [r7, #20]
          break;
 8003bde:	e02f      	b.n	8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003be0:	4b1c      	ldr	r3, [pc, #112]	@ (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003be8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bec:	d108      	bne.n	8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003bee:	4b19      	ldr	r3, [pc, #100]	@ (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bf6:	4a19      	ldr	r2, [pc, #100]	@ (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	e007      	b.n	8003c10 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003c00:	4b14      	ldr	r3, [pc, #80]	@ (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c08:	4a15      	ldr	r2, [pc, #84]	@ (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003c10:	4b10      	ldr	r3, [pc, #64]	@ (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c16:	099b      	lsrs	r3, r3, #6
 8003c18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	fb02 f303 	mul.w	r3, r2, r3
 8003c22:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003c24:	4b0b      	ldr	r3, [pc, #44]	@ (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c2a:	0f1b      	lsrs	r3, r3, #28
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c36:	617b      	str	r3, [r7, #20]
          break;
 8003c38:	e002      	b.n	8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	617b      	str	r3, [r7, #20]
          break;
 8003c3e:	bf00      	nop
        }
      }
      break;
 8003c40:	e000      	b.n	8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8003c42:	bf00      	nop
    }
  }
  return frequency;
 8003c44:	697b      	ldr	r3, [r7, #20]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	371c      	adds	r7, #28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800
 8003c58:	00bb8000 	.word	0x00bb8000
 8003c5c:	007a1200 	.word	0x007a1200
 8003c60:	00f42400 	.word	0x00f42400

08003c64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e042      	b.n	8003cfc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7fd fc8a 	bl	80015a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2224      	movs	r2, #36	@ 0x24
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ca6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f973 	bl	8003f94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695a      	ldr	r2, [r3, #20]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ccc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08a      	sub	sp, #40	@ 0x28
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	4613      	mov	r3, r2
 8003d12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	d175      	bne.n	8003e10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <HAL_UART_Transmit+0x2c>
 8003d2a:	88fb      	ldrh	r3, [r7, #6]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e06e      	b.n	8003e12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2221      	movs	r2, #33	@ 0x21
 8003d3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d42:	f7fd fe19 	bl	8001978 <HAL_GetTick>
 8003d46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	88fa      	ldrh	r2, [r7, #6]
 8003d4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	88fa      	ldrh	r2, [r7, #6]
 8003d52:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d5c:	d108      	bne.n	8003d70 <HAL_UART_Transmit+0x6c>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d104      	bne.n	8003d70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	61bb      	str	r3, [r7, #24]
 8003d6e:	e003      	b.n	8003d78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d74:	2300      	movs	r3, #0
 8003d76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d78:	e02e      	b.n	8003dd8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2200      	movs	r2, #0
 8003d82:	2180      	movs	r1, #128	@ 0x80
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 f848 	bl	8003e1a <UART_WaitOnFlagUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e03a      	b.n	8003e12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10b      	bne.n	8003dba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	461a      	mov	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003db0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	3302      	adds	r3, #2
 8003db6:	61bb      	str	r3, [r7, #24]
 8003db8:	e007      	b.n	8003dca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	781a      	ldrb	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1cb      	bne.n	8003d7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2200      	movs	r2, #0
 8003dea:	2140      	movs	r1, #64	@ 0x40
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 f814 	bl	8003e1a <UART_WaitOnFlagUntilTimeout>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d005      	beq.n	8003e04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e006      	b.n	8003e12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	e000      	b.n	8003e12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e10:	2302      	movs	r3, #2
  }
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3720      	adds	r7, #32
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b086      	sub	sp, #24
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	60f8      	str	r0, [r7, #12]
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	603b      	str	r3, [r7, #0]
 8003e26:	4613      	mov	r3, r2
 8003e28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e2a:	e03b      	b.n	8003ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e32:	d037      	beq.n	8003ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e34:	f7fd fda0 	bl	8001978 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	6a3a      	ldr	r2, [r7, #32]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d302      	bcc.n	8003e4a <UART_WaitOnFlagUntilTimeout+0x30>
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e03a      	b.n	8003ec4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d023      	beq.n	8003ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2b80      	cmp	r3, #128	@ 0x80
 8003e60:	d020      	beq.n	8003ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2b40      	cmp	r3, #64	@ 0x40
 8003e66:	d01d      	beq.n	8003ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d116      	bne.n	8003ea4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003e76:	2300      	movs	r3, #0
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	617b      	str	r3, [r7, #20]
 8003e8a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 f81d 	bl	8003ecc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2208      	movs	r2, #8
 8003e96:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e00f      	b.n	8003ec4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	4013      	ands	r3, r2
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	bf0c      	ite	eq
 8003eb4:	2301      	moveq	r3, #1
 8003eb6:	2300      	movne	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	461a      	mov	r2, r3
 8003ebc:	79fb      	ldrb	r3, [r7, #7]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d0b4      	beq.n	8003e2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b095      	sub	sp, #84	@ 0x54
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	330c      	adds	r3, #12
 8003eda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ede:	e853 3f00 	ldrex	r3, [r3]
 8003ee2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	330c      	adds	r3, #12
 8003ef2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ef4:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003efa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003efc:	e841 2300 	strex	r3, r2, [r1]
 8003f00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1e5      	bne.n	8003ed4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3314      	adds	r3, #20
 8003f0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	e853 3f00 	ldrex	r3, [r3]
 8003f16:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f023 0301 	bic.w	r3, r3, #1
 8003f1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3314      	adds	r3, #20
 8003f26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f30:	e841 2300 	strex	r3, r2, [r1]
 8003f34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1e5      	bne.n	8003f08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d119      	bne.n	8003f78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	330c      	adds	r3, #12
 8003f4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	e853 3f00 	ldrex	r3, [r3]
 8003f52:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f023 0310 	bic.w	r3, r3, #16
 8003f5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	330c      	adds	r3, #12
 8003f62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f64:	61ba      	str	r2, [r7, #24]
 8003f66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f68:	6979      	ldr	r1, [r7, #20]
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	e841 2300 	strex	r3, r2, [r1]
 8003f70:	613b      	str	r3, [r7, #16]
   return(result);
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1e5      	bne.n	8003f44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f86:	bf00      	nop
 8003f88:	3754      	adds	r7, #84	@ 0x54
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
	...

08003f94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f98:	b0c0      	sub	sp, #256	@ 0x100
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb0:	68d9      	ldr	r1, [r3, #12]
 8003fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	ea40 0301 	orr.w	r3, r0, r1
 8003fbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003fec:	f021 010c 	bic.w	r1, r1, #12
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003ffa:	430b      	orrs	r3, r1
 8003ffc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800400a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800400e:	6999      	ldr	r1, [r3, #24]
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	ea40 0301 	orr.w	r3, r0, r1
 800401a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	4b8f      	ldr	r3, [pc, #572]	@ (8004260 <UART_SetConfig+0x2cc>)
 8004024:	429a      	cmp	r2, r3
 8004026:	d005      	beq.n	8004034 <UART_SetConfig+0xa0>
 8004028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	4b8d      	ldr	r3, [pc, #564]	@ (8004264 <UART_SetConfig+0x2d0>)
 8004030:	429a      	cmp	r2, r3
 8004032:	d104      	bne.n	800403e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004034:	f7ff fcc0 	bl	80039b8 <HAL_RCC_GetPCLK2Freq>
 8004038:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800403c:	e003      	b.n	8004046 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800403e:	f7ff fca7 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 8004042:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004050:	f040 810c 	bne.w	800426c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004058:	2200      	movs	r2, #0
 800405a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800405e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004062:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004066:	4622      	mov	r2, r4
 8004068:	462b      	mov	r3, r5
 800406a:	1891      	adds	r1, r2, r2
 800406c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800406e:	415b      	adcs	r3, r3
 8004070:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004072:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004076:	4621      	mov	r1, r4
 8004078:	eb12 0801 	adds.w	r8, r2, r1
 800407c:	4629      	mov	r1, r5
 800407e:	eb43 0901 	adc.w	r9, r3, r1
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800408e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004092:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004096:	4690      	mov	r8, r2
 8004098:	4699      	mov	r9, r3
 800409a:	4623      	mov	r3, r4
 800409c:	eb18 0303 	adds.w	r3, r8, r3
 80040a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80040a4:	462b      	mov	r3, r5
 80040a6:	eb49 0303 	adc.w	r3, r9, r3
 80040aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80040ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80040be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80040c2:	460b      	mov	r3, r1
 80040c4:	18db      	adds	r3, r3, r3
 80040c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80040c8:	4613      	mov	r3, r2
 80040ca:	eb42 0303 	adc.w	r3, r2, r3
 80040ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80040d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80040d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80040d8:	f7fc fdb6 	bl	8000c48 <__aeabi_uldivmod>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4b61      	ldr	r3, [pc, #388]	@ (8004268 <UART_SetConfig+0x2d4>)
 80040e2:	fba3 2302 	umull	r2, r3, r3, r2
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	011c      	lsls	r4, r3, #4
 80040ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ee:	2200      	movs	r2, #0
 80040f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80040f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80040fc:	4642      	mov	r2, r8
 80040fe:	464b      	mov	r3, r9
 8004100:	1891      	adds	r1, r2, r2
 8004102:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004104:	415b      	adcs	r3, r3
 8004106:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004108:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800410c:	4641      	mov	r1, r8
 800410e:	eb12 0a01 	adds.w	sl, r2, r1
 8004112:	4649      	mov	r1, r9
 8004114:	eb43 0b01 	adc.w	fp, r3, r1
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004124:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004128:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800412c:	4692      	mov	sl, r2
 800412e:	469b      	mov	fp, r3
 8004130:	4643      	mov	r3, r8
 8004132:	eb1a 0303 	adds.w	r3, sl, r3
 8004136:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800413a:	464b      	mov	r3, r9
 800413c:	eb4b 0303 	adc.w	r3, fp, r3
 8004140:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004150:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004154:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004158:	460b      	mov	r3, r1
 800415a:	18db      	adds	r3, r3, r3
 800415c:	643b      	str	r3, [r7, #64]	@ 0x40
 800415e:	4613      	mov	r3, r2
 8004160:	eb42 0303 	adc.w	r3, r2, r3
 8004164:	647b      	str	r3, [r7, #68]	@ 0x44
 8004166:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800416a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800416e:	f7fc fd6b 	bl	8000c48 <__aeabi_uldivmod>
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	4611      	mov	r1, r2
 8004178:	4b3b      	ldr	r3, [pc, #236]	@ (8004268 <UART_SetConfig+0x2d4>)
 800417a:	fba3 2301 	umull	r2, r3, r3, r1
 800417e:	095b      	lsrs	r3, r3, #5
 8004180:	2264      	movs	r2, #100	@ 0x64
 8004182:	fb02 f303 	mul.w	r3, r2, r3
 8004186:	1acb      	subs	r3, r1, r3
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800418e:	4b36      	ldr	r3, [pc, #216]	@ (8004268 <UART_SetConfig+0x2d4>)
 8004190:	fba3 2302 	umull	r2, r3, r3, r2
 8004194:	095b      	lsrs	r3, r3, #5
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800419c:	441c      	add	r4, r3
 800419e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041a2:	2200      	movs	r2, #0
 80041a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80041ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80041b0:	4642      	mov	r2, r8
 80041b2:	464b      	mov	r3, r9
 80041b4:	1891      	adds	r1, r2, r2
 80041b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80041b8:	415b      	adcs	r3, r3
 80041ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80041c0:	4641      	mov	r1, r8
 80041c2:	1851      	adds	r1, r2, r1
 80041c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80041c6:	4649      	mov	r1, r9
 80041c8:	414b      	adcs	r3, r1
 80041ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80041d8:	4659      	mov	r1, fp
 80041da:	00cb      	lsls	r3, r1, #3
 80041dc:	4651      	mov	r1, sl
 80041de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041e2:	4651      	mov	r1, sl
 80041e4:	00ca      	lsls	r2, r1, #3
 80041e6:	4610      	mov	r0, r2
 80041e8:	4619      	mov	r1, r3
 80041ea:	4603      	mov	r3, r0
 80041ec:	4642      	mov	r2, r8
 80041ee:	189b      	adds	r3, r3, r2
 80041f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041f4:	464b      	mov	r3, r9
 80041f6:	460a      	mov	r2, r1
 80041f8:	eb42 0303 	adc.w	r3, r2, r3
 80041fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800420c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004210:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004214:	460b      	mov	r3, r1
 8004216:	18db      	adds	r3, r3, r3
 8004218:	62bb      	str	r3, [r7, #40]	@ 0x28
 800421a:	4613      	mov	r3, r2
 800421c:	eb42 0303 	adc.w	r3, r2, r3
 8004220:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004222:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004226:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800422a:	f7fc fd0d 	bl	8000c48 <__aeabi_uldivmod>
 800422e:	4602      	mov	r2, r0
 8004230:	460b      	mov	r3, r1
 8004232:	4b0d      	ldr	r3, [pc, #52]	@ (8004268 <UART_SetConfig+0x2d4>)
 8004234:	fba3 1302 	umull	r1, r3, r3, r2
 8004238:	095b      	lsrs	r3, r3, #5
 800423a:	2164      	movs	r1, #100	@ 0x64
 800423c:	fb01 f303 	mul.w	r3, r1, r3
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	3332      	adds	r3, #50	@ 0x32
 8004246:	4a08      	ldr	r2, [pc, #32]	@ (8004268 <UART_SetConfig+0x2d4>)
 8004248:	fba2 2303 	umull	r2, r3, r2, r3
 800424c:	095b      	lsrs	r3, r3, #5
 800424e:	f003 0207 	and.w	r2, r3, #7
 8004252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4422      	add	r2, r4
 800425a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800425c:	e106      	b.n	800446c <UART_SetConfig+0x4d8>
 800425e:	bf00      	nop
 8004260:	40011000 	.word	0x40011000
 8004264:	40011400 	.word	0x40011400
 8004268:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800426c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004270:	2200      	movs	r2, #0
 8004272:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004276:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800427a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800427e:	4642      	mov	r2, r8
 8004280:	464b      	mov	r3, r9
 8004282:	1891      	adds	r1, r2, r2
 8004284:	6239      	str	r1, [r7, #32]
 8004286:	415b      	adcs	r3, r3
 8004288:	627b      	str	r3, [r7, #36]	@ 0x24
 800428a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800428e:	4641      	mov	r1, r8
 8004290:	1854      	adds	r4, r2, r1
 8004292:	4649      	mov	r1, r9
 8004294:	eb43 0501 	adc.w	r5, r3, r1
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	00eb      	lsls	r3, r5, #3
 80042a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042a6:	00e2      	lsls	r2, r4, #3
 80042a8:	4614      	mov	r4, r2
 80042aa:	461d      	mov	r5, r3
 80042ac:	4643      	mov	r3, r8
 80042ae:	18e3      	adds	r3, r4, r3
 80042b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042b4:	464b      	mov	r3, r9
 80042b6:	eb45 0303 	adc.w	r3, r5, r3
 80042ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042ce:	f04f 0200 	mov.w	r2, #0
 80042d2:	f04f 0300 	mov.w	r3, #0
 80042d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80042da:	4629      	mov	r1, r5
 80042dc:	008b      	lsls	r3, r1, #2
 80042de:	4621      	mov	r1, r4
 80042e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042e4:	4621      	mov	r1, r4
 80042e6:	008a      	lsls	r2, r1, #2
 80042e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80042ec:	f7fc fcac 	bl	8000c48 <__aeabi_uldivmod>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4b60      	ldr	r3, [pc, #384]	@ (8004478 <UART_SetConfig+0x4e4>)
 80042f6:	fba3 2302 	umull	r2, r3, r3, r2
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	011c      	lsls	r4, r3, #4
 80042fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004302:	2200      	movs	r2, #0
 8004304:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004308:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800430c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004310:	4642      	mov	r2, r8
 8004312:	464b      	mov	r3, r9
 8004314:	1891      	adds	r1, r2, r2
 8004316:	61b9      	str	r1, [r7, #24]
 8004318:	415b      	adcs	r3, r3
 800431a:	61fb      	str	r3, [r7, #28]
 800431c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004320:	4641      	mov	r1, r8
 8004322:	1851      	adds	r1, r2, r1
 8004324:	6139      	str	r1, [r7, #16]
 8004326:	4649      	mov	r1, r9
 8004328:	414b      	adcs	r3, r1
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	f04f 0300 	mov.w	r3, #0
 8004334:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004338:	4659      	mov	r1, fp
 800433a:	00cb      	lsls	r3, r1, #3
 800433c:	4651      	mov	r1, sl
 800433e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004342:	4651      	mov	r1, sl
 8004344:	00ca      	lsls	r2, r1, #3
 8004346:	4610      	mov	r0, r2
 8004348:	4619      	mov	r1, r3
 800434a:	4603      	mov	r3, r0
 800434c:	4642      	mov	r2, r8
 800434e:	189b      	adds	r3, r3, r2
 8004350:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004354:	464b      	mov	r3, r9
 8004356:	460a      	mov	r2, r1
 8004358:	eb42 0303 	adc.w	r3, r2, r3
 800435c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	67bb      	str	r3, [r7, #120]	@ 0x78
 800436a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004378:	4649      	mov	r1, r9
 800437a:	008b      	lsls	r3, r1, #2
 800437c:	4641      	mov	r1, r8
 800437e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004382:	4641      	mov	r1, r8
 8004384:	008a      	lsls	r2, r1, #2
 8004386:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800438a:	f7fc fc5d 	bl	8000c48 <__aeabi_uldivmod>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4611      	mov	r1, r2
 8004394:	4b38      	ldr	r3, [pc, #224]	@ (8004478 <UART_SetConfig+0x4e4>)
 8004396:	fba3 2301 	umull	r2, r3, r3, r1
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	2264      	movs	r2, #100	@ 0x64
 800439e:	fb02 f303 	mul.w	r3, r2, r3
 80043a2:	1acb      	subs	r3, r1, r3
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	3332      	adds	r3, #50	@ 0x32
 80043a8:	4a33      	ldr	r2, [pc, #204]	@ (8004478 <UART_SetConfig+0x4e4>)
 80043aa:	fba2 2303 	umull	r2, r3, r2, r3
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043b4:	441c      	add	r4, r3
 80043b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043ba:	2200      	movs	r2, #0
 80043bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80043be:	677a      	str	r2, [r7, #116]	@ 0x74
 80043c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80043c4:	4642      	mov	r2, r8
 80043c6:	464b      	mov	r3, r9
 80043c8:	1891      	adds	r1, r2, r2
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	415b      	adcs	r3, r3
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043d4:	4641      	mov	r1, r8
 80043d6:	1851      	adds	r1, r2, r1
 80043d8:	6039      	str	r1, [r7, #0]
 80043da:	4649      	mov	r1, r9
 80043dc:	414b      	adcs	r3, r1
 80043de:	607b      	str	r3, [r7, #4]
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043ec:	4659      	mov	r1, fp
 80043ee:	00cb      	lsls	r3, r1, #3
 80043f0:	4651      	mov	r1, sl
 80043f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043f6:	4651      	mov	r1, sl
 80043f8:	00ca      	lsls	r2, r1, #3
 80043fa:	4610      	mov	r0, r2
 80043fc:	4619      	mov	r1, r3
 80043fe:	4603      	mov	r3, r0
 8004400:	4642      	mov	r2, r8
 8004402:	189b      	adds	r3, r3, r2
 8004404:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004406:	464b      	mov	r3, r9
 8004408:	460a      	mov	r2, r1
 800440a:	eb42 0303 	adc.w	r3, r2, r3
 800440e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	663b      	str	r3, [r7, #96]	@ 0x60
 800441a:	667a      	str	r2, [r7, #100]	@ 0x64
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004428:	4649      	mov	r1, r9
 800442a:	008b      	lsls	r3, r1, #2
 800442c:	4641      	mov	r1, r8
 800442e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004432:	4641      	mov	r1, r8
 8004434:	008a      	lsls	r2, r1, #2
 8004436:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800443a:	f7fc fc05 	bl	8000c48 <__aeabi_uldivmod>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4b0d      	ldr	r3, [pc, #52]	@ (8004478 <UART_SetConfig+0x4e4>)
 8004444:	fba3 1302 	umull	r1, r3, r3, r2
 8004448:	095b      	lsrs	r3, r3, #5
 800444a:	2164      	movs	r1, #100	@ 0x64
 800444c:	fb01 f303 	mul.w	r3, r1, r3
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	3332      	adds	r3, #50	@ 0x32
 8004456:	4a08      	ldr	r2, [pc, #32]	@ (8004478 <UART_SetConfig+0x4e4>)
 8004458:	fba2 2303 	umull	r2, r3, r2, r3
 800445c:	095b      	lsrs	r3, r3, #5
 800445e:	f003 020f 	and.w	r2, r3, #15
 8004462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4422      	add	r2, r4
 800446a:	609a      	str	r2, [r3, #8]
}
 800446c:	bf00      	nop
 800446e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004472:	46bd      	mov	sp, r7
 8004474:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004478:	51eb851f 	.word	0x51eb851f

0800447c <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 8004480:	4b10      	ldr	r3, [pc, #64]	@ (80044c4 <MX_PDM2PCM_Init+0x48>)
 8004482:	2200      	movs	r2, #0
 8004484:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 8004486:	4b0f      	ldr	r3, [pc, #60]	@ (80044c4 <MX_PDM2PCM_Init+0x48>)
 8004488:	2201      	movs	r2, #1
 800448a:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 1500000000;
 800448c:	4b0d      	ldr	r3, [pc, #52]	@ (80044c4 <MX_PDM2PCM_Init+0x48>)
 800448e:	4a0e      	ldr	r2, [pc, #56]	@ (80044c8 <MX_PDM2PCM_Init+0x4c>)
 8004490:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 8004492:	4b0c      	ldr	r3, [pc, #48]	@ (80044c4 <MX_PDM2PCM_Init+0x48>)
 8004494:	2201      	movs	r2, #1
 8004496:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 8004498:	4b0a      	ldr	r3, [pc, #40]	@ (80044c4 <MX_PDM2PCM_Init+0x48>)
 800449a:	2201      	movs	r2, #1
 800449c:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800449e:	4809      	ldr	r0, [pc, #36]	@ (80044c4 <MX_PDM2PCM_Init+0x48>)
 80044a0:	f001 fd26 	bl	8005ef0 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 80044a4:	4b09      	ldr	r3, [pc, #36]	@ (80044cc <MX_PDM2PCM_Init+0x50>)
 80044a6:	2202      	movs	r2, #2
 80044a8:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 80044aa:	4b08      	ldr	r3, [pc, #32]	@ (80044cc <MX_PDM2PCM_Init+0x50>)
 80044ac:	2210      	movs	r2, #16
 80044ae:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 15;
 80044b0:	4b06      	ldr	r3, [pc, #24]	@ (80044cc <MX_PDM2PCM_Init+0x50>)
 80044b2:	220f      	movs	r2, #15
 80044b4:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 80044b6:	4905      	ldr	r1, [pc, #20]	@ (80044cc <MX_PDM2PCM_Init+0x50>)
 80044b8:	4802      	ldr	r0, [pc, #8]	@ (80044c4 <MX_PDM2PCM_Init+0x48>)
 80044ba:	f001 fde9 	bl	8006090 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80044be:	bf00      	nop
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20000750 	.word	0x20000750
 80044c8:	59682f00 	.word	0x59682f00
 80044cc:	2000079c 	.word	0x2000079c

080044d0 <D16_GENERIC>:
 80044d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d4:	e9d2 6402 	ldrd	r6, r4, [r2, #8]
 80044d8:	b089      	sub	sp, #36	@ 0x24
 80044da:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 80044dc:	6993      	ldr	r3, [r2, #24]
 80044de:	9406      	str	r4, [sp, #24]
 80044e0:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80044e2:	9307      	str	r3, [sp, #28]
 80044e4:	9402      	str	r4, [sp, #8]
 80044e6:	e9d2 ab04 	ldrd	sl, fp, [r2, #16]
 80044ea:	69d3      	ldr	r3, [r2, #28]
 80044ec:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 80044ee:	9103      	str	r1, [sp, #12]
 80044f0:	2d00      	cmp	r5, #0
 80044f2:	d066      	beq.n	80045c2 <D16_GENERIC+0xf2>
 80044f4:	f004 0520 	and.w	r5, r4, #32
 80044f8:	f004 0410 	and.w	r4, r4, #16
 80044fc:	9505      	str	r5, [sp, #20]
 80044fe:	4937      	ldr	r1, [pc, #220]	@ (80045dc <D16_GENERIC+0x10c>)
 8004500:	9404      	str	r4, [sp, #16]
 8004502:	f04f 0c00 	mov.w	ip, #0
 8004506:	4635      	mov	r5, r6
 8004508:	e04f      	b.n	80045aa <D16_GENERIC+0xda>
 800450a:	5d87      	ldrb	r7, [r0, r6]
 800450c:	7804      	ldrb	r4, [r0, #0]
 800450e:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8004512:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8004516:	b2e6      	uxtb	r6, r4
 8004518:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800451c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8004520:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8004524:	4433      	add	r3, r6
 8004526:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 800452a:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800452e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004532:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8004536:	0aa3      	lsrs	r3, r4, #10
 8004538:	4c29      	ldr	r4, [pc, #164]	@ (80045e0 <D16_GENERIC+0x110>)
 800453a:	fb26 5404 	smlad	r4, r6, r4, r5
 800453e:	4d29      	ldr	r5, [pc, #164]	@ (80045e4 <D16_GENERIC+0x114>)
 8004540:	fb26 f505 	smuad	r5, r6, r5
 8004544:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 8004548:	eb04 080a 	add.w	r8, r4, sl
 800454c:	eba8 080b 	sub.w	r8, r8, fp
 8004550:	4646      	mov	r6, r8
 8004552:	17f7      	asrs	r7, r6, #31
 8004554:	e9cd 6700 	strd	r6, r7, [sp]
 8004558:	9e04      	ldr	r6, [sp, #16]
 800455a:	f10c 0e01 	add.w	lr, ip, #1
 800455e:	b16e      	cbz	r6, 800457c <D16_GENERIC+0xac>
 8004560:	6a16      	ldr	r6, [r2, #32]
 8004562:	9f01      	ldr	r7, [sp, #4]
 8004564:	fba8 ab06 	umull	sl, fp, r8, r6
 8004568:	fb06 bb07 	mla	fp, r6, r7, fp
 800456c:	f11a 4800 	adds.w	r8, sl, #2147483648	@ 0x80000000
 8004570:	f14b 0900 	adc.w	r9, fp, #0
 8004574:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8004578:	46a3      	mov	fp, r4
 800457a:	4654      	mov	r4, sl
 800457c:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 800457e:	9f02      	ldr	r7, [sp, #8]
 8004580:	0424      	lsls	r4, r4, #16
 8004582:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8004586:	f04f 0900 	mov.w	r9, #0
 800458a:	fb0c fc06 	mul.w	ip, ip, r6
 800458e:	fbc7 8904 	smlal	r8, r9, r7, r4
 8004592:	9e03      	ldr	r6, [sp, #12]
 8004594:	464f      	mov	r7, r9
 8004596:	10bc      	asrs	r4, r7, #2
 8004598:	f304 040f 	ssat	r4, #16, r4
 800459c:	f826 401c 	strh.w	r4, [r6, ip, lsl #1]
 80045a0:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 80045a2:	fa1f fc8e 	uxth.w	ip, lr
 80045a6:	4564      	cmp	r4, ip
 80045a8:	d90a      	bls.n	80045c0 <D16_GENERIC+0xf0>
 80045aa:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 80045ac:	2c01      	cmp	r4, #1
 80045ae:	b2e6      	uxtb	r6, r4
 80045b0:	d1ab      	bne.n	800450a <D16_GENERIC+0x3a>
 80045b2:	9e05      	ldr	r6, [sp, #20]
 80045b4:	f850 4b02 	ldr.w	r4, [r0], #2
 80045b8:	2e00      	cmp	r6, #0
 80045ba:	d0ac      	beq.n	8004516 <D16_GENERIC+0x46>
 80045bc:	ba64      	rev16	r4, r4
 80045be:	e7aa      	b.n	8004516 <D16_GENERIC+0x46>
 80045c0:	462e      	mov	r6, r5
 80045c2:	9906      	ldr	r1, [sp, #24]
 80045c4:	61d3      	str	r3, [r2, #28]
 80045c6:	9b07      	ldr	r3, [sp, #28]
 80045c8:	6096      	str	r6, [r2, #8]
 80045ca:	2000      	movs	r0, #0
 80045cc:	60d1      	str	r1, [r2, #12]
 80045ce:	e9c2 ab04 	strd	sl, fp, [r2, #16]
 80045d2:	6193      	str	r3, [r2, #24]
 80045d4:	b009      	add	sp, #36	@ 0x24
 80045d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045da:	bf00      	nop
 80045dc:	2000000c 	.word	0x2000000c
 80045e0:	00030001 	.word	0x00030001
 80045e4:	00010003 	.word	0x00010003

080045e8 <D24_GENERIC>:
 80045e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ec:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 80045ee:	6993      	ldr	r3, [r2, #24]
 80045f0:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 80045f2:	b089      	sub	sp, #36	@ 0x24
 80045f4:	e9d2 a904 	ldrd	sl, r9, [r2, #16]
 80045f8:	9307      	str	r3, [sp, #28]
 80045fa:	9503      	str	r5, [sp, #12]
 80045fc:	69d3      	ldr	r3, [r2, #28]
 80045fe:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8004600:	9104      	str	r1, [sp, #16]
 8004602:	e9d2 4b02 	ldrd	r4, fp, [r2, #8]
 8004606:	2e00      	cmp	r6, #0
 8004608:	f000 808f 	beq.w	800472a <D24_GENERIC+0x142>
 800460c:	f005 0620 	and.w	r6, r5, #32
 8004610:	f005 0510 	and.w	r5, r5, #16
 8004614:	4953      	ldr	r1, [pc, #332]	@ (8004764 <D24_GENERIC+0x17c>)
 8004616:	9606      	str	r6, [sp, #24]
 8004618:	9505      	str	r5, [sp, #20]
 800461a:	f04f 0c00 	mov.w	ip, #0
 800461e:	f8cd 9008 	str.w	r9, [sp, #8]
 8004622:	e068      	b.n	80046f6 <D24_GENERIC+0x10e>
 8004624:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8004628:	f810 8007 	ldrb.w	r8, [r0, r7]
 800462c:	042d      	lsls	r5, r5, #16
 800462e:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8004632:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8004636:	44ae      	add	lr, r5
 8004638:	4438      	add	r0, r7
 800463a:	fa5f f68e 	uxtb.w	r6, lr
 800463e:	f3ce 2507 	ubfx	r5, lr, #8, #8
 8004642:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8004646:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 800464a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 800464e:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8004652:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8004656:	f851 302e 	ldr.w	r3, [r1, lr, lsl #2]
 800465a:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800465e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004662:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8004666:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800466a:	4d3f      	ldr	r5, [pc, #252]	@ (8004768 <D24_GENERIC+0x180>)
 800466c:	fb26 b705 	smlad	r7, r6, r5, fp
 8004670:	4d3e      	ldr	r5, [pc, #248]	@ (800476c <D24_GENERIC+0x184>)
 8004672:	fb26 4b05 	smlad	fp, r6, r5, r4
 8004676:	f3c3 0409 	ubfx	r4, r3, #0, #10
 800467a:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 800467e:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8004682:	2401      	movs	r4, #1
 8004684:	fb26 f604 	smuad	r6, r6, r4
 8004688:	f5a7 55d8 	sub.w	r5, r7, #6912	@ 0x1b00
 800468c:	9f02      	ldr	r7, [sp, #8]
 800468e:	eb0c 0e04 	add.w	lr, ip, r4
 8004692:	eb08 0406 	add.w	r4, r8, r6
 8004696:	eb05 060a 	add.w	r6, r5, sl
 800469a:	1bf6      	subs	r6, r6, r7
 800469c:	4637      	mov	r7, r6
 800469e:	ea4f 78e6 	mov.w	r8, r6, asr #31
 80046a2:	e9cd 7800 	strd	r7, r8, [sp]
 80046a6:	9f05      	ldr	r7, [sp, #20]
 80046a8:	b177      	cbz	r7, 80046c8 <D24_GENERIC+0xe0>
 80046aa:	f8d2 8020 	ldr.w	r8, [r2, #32]
 80046ae:	9502      	str	r5, [sp, #8]
 80046b0:	fba6 9a08 	umull	r9, sl, r6, r8
 80046b4:	9e01      	ldr	r6, [sp, #4]
 80046b6:	fb08 aa06 	mla	sl, r8, r6, sl
 80046ba:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 80046be:	f14a 0700 	adc.w	r7, sl, #0
 80046c2:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 80046c6:	4655      	mov	r5, sl
 80046c8:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 80046ca:	9f03      	ldr	r7, [sp, #12]
 80046cc:	03ad      	lsls	r5, r5, #14
 80046ce:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 80046d2:	f04f 0900 	mov.w	r9, #0
 80046d6:	fb0c fc06 	mul.w	ip, ip, r6
 80046da:	fbc7 8905 	smlal	r8, r9, r7, r5
 80046de:	9e04      	ldr	r6, [sp, #16]
 80046e0:	464f      	mov	r7, r9
 80046e2:	10bd      	asrs	r5, r7, #2
 80046e4:	f305 050f 	ssat	r5, #16, r5
 80046e8:	f826 501c 	strh.w	r5, [r6, ip, lsl #1]
 80046ec:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 80046ee:	fa1f fc8e 	uxth.w	ip, lr
 80046f2:	4565      	cmp	r5, ip
 80046f4:	d917      	bls.n	8004726 <D24_GENERIC+0x13e>
 80046f6:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 80046f8:	f890 e000 	ldrb.w	lr, [r0]
 80046fc:	b2ef      	uxtb	r7, r5
 80046fe:	2d01      	cmp	r5, #1
 8004700:	b23e      	sxth	r6, r7
 8004702:	d18f      	bne.n	8004624 <D24_GENERIC+0x3c>
 8004704:	9d06      	ldr	r5, [sp, #24]
 8004706:	b1dd      	cbz	r5, 8004740 <D24_GENERIC+0x158>
 8004708:	78c5      	ldrb	r5, [r0, #3]
 800470a:	ea4f 280e 	mov.w	r8, lr, lsl #8
 800470e:	f01c 0f01 	tst.w	ip, #1
 8004712:	ea4f 2605 	mov.w	r6, r5, lsl #8
 8004716:	eb08 4805 	add.w	r8, r8, r5, lsl #16
 800471a:	d11b      	bne.n	8004754 <D24_GENERIC+0x16c>
 800471c:	f890 e001 	ldrb.w	lr, [r0, #1]
 8004720:	3002      	adds	r0, #2
 8004722:	44c6      	add	lr, r8
 8004724:	e789      	b.n	800463a <D24_GENERIC+0x52>
 8004726:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800472a:	61d3      	str	r3, [r2, #28]
 800472c:	9b07      	ldr	r3, [sp, #28]
 800472e:	6193      	str	r3, [r2, #24]
 8004730:	2000      	movs	r0, #0
 8004732:	e9c2 4b02 	strd	r4, fp, [r2, #8]
 8004736:	e9c2 a904 	strd	sl, r9, [r2, #16]
 800473a:	b009      	add	sp, #36	@ 0x24
 800473c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004740:	f890 8001 	ldrb.w	r8, [r0, #1]
 8004744:	7885      	ldrb	r5, [r0, #2]
 8004746:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800474a:	eb08 4805 	add.w	r8, r8, r5, lsl #16
 800474e:	44c6      	add	lr, r8
 8004750:	3003      	adds	r0, #3
 8004752:	e772      	b.n	800463a <D24_GENERIC+0x52>
 8004754:	f890 8002 	ldrb.w	r8, [r0, #2]
 8004758:	eb06 4808 	add.w	r8, r6, r8, lsl #16
 800475c:	44c6      	add	lr, r8
 800475e:	3004      	adds	r0, #4
 8004760:	e76b      	b.n	800463a <D24_GENERIC+0x52>
 8004762:	bf00      	nop
 8004764:	2000000c 	.word	0x2000000c
 8004768:	00030001 	.word	0x00030001
 800476c:	00060007 	.word	0x00060007

08004770 <D32_GENERIC>:
 8004770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004774:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8004776:	6993      	ldr	r3, [r2, #24]
 8004778:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 800477a:	69d6      	ldr	r6, [r2, #28]
 800477c:	b089      	sub	sp, #36	@ 0x24
 800477e:	e9d2 a904 	ldrd	sl, r9, [r2, #16]
 8004782:	9307      	str	r3, [sp, #28]
 8004784:	9403      	str	r4, [sp, #12]
 8004786:	e9d2 3b02 	ldrd	r3, fp, [r2, #8]
 800478a:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 800478c:	9104      	str	r1, [sp, #16]
 800478e:	2d00      	cmp	r5, #0
 8004790:	f000 809a 	beq.w	80048c8 <D32_GENERIC+0x158>
 8004794:	f004 0520 	and.w	r5, r4, #32
 8004798:	f004 0410 	and.w	r4, r4, #16
 800479c:	9506      	str	r5, [sp, #24]
 800479e:	4951      	ldr	r1, [pc, #324]	@ (80048e4 <D32_GENERIC+0x174>)
 80047a0:	9405      	str	r4, [sp, #20]
 80047a2:	f04f 0e00 	mov.w	lr, #0
 80047a6:	f8cd 9008 	str.w	r9, [sp, #8]
 80047aa:	461d      	mov	r5, r3
 80047ac:	4617      	mov	r7, r2
 80047ae:	e077      	b.n	80048a0 <D32_GENERIC+0x130>
 80047b0:	7823      	ldrb	r3, [r4, #0]
 80047b2:	f810 800c 	ldrb.w	r8, [r0, ip]
 80047b6:	f810 c002 	ldrb.w	ip, [r0, r2]
 80047ba:	7800      	ldrb	r0, [r0, #0]
 80047bc:	041b      	lsls	r3, r3, #16
 80047be:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 80047c2:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 80047c6:	4403      	add	r3, r0
 80047c8:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80047cc:	b2dc      	uxtb	r4, r3
 80047ce:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80047d2:	f3c3 4807 	ubfx	r8, r3, #16, #8
 80047d6:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80047da:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80047de:	0e1b      	lsrs	r3, r3, #24
 80047e0:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 80047e4:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 80047e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80047ec:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 80047f0:	eb06 2c92 	add.w	ip, r6, r2, lsr #10
 80047f4:	eb03 269c 	add.w	r6, r3, ip, lsr #10
 80047f8:	f3c6 0309 	ubfx	r3, r6, #0, #10
 80047fc:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004800:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004804:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004808:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 800480c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004810:	4b35      	ldr	r3, [pc, #212]	@ (80048e8 <D32_GENERIC+0x178>)
 8004812:	fb22 b403 	smlad	r4, r2, r3, fp
 8004816:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800481a:	fb2c 4803 	smlad	r8, ip, r3, r4
 800481e:	4b33      	ldr	r3, [pc, #204]	@ (80048ec <D32_GENERIC+0x17c>)
 8004820:	fb22 5503 	smlad	r5, r2, r3, r5
 8004824:	4b32      	ldr	r3, [pc, #200]	@ (80048f0 <D32_GENERIC+0x180>)
 8004826:	fb2c 5b03 	smlad	fp, ip, r3, r5
 800482a:	2301      	movs	r3, #1
 800482c:	fb22 f203 	smuad	r2, r2, r3
 8004830:	4b30      	ldr	r3, [pc, #192]	@ (80048f4 <D32_GENERIC+0x184>)
 8004832:	fb2c 2503 	smlad	r5, ip, r3, r2
 8004836:	9b02      	ldr	r3, [sp, #8]
 8004838:	f5a8 4480 	sub.w	r4, r8, #16384	@ 0x4000
 800483c:	eb04 080a 	add.w	r8, r4, sl
 8004840:	eba8 0803 	sub.w	r8, r8, r3
 8004844:	4642      	mov	r2, r8
 8004846:	17d3      	asrs	r3, r2, #31
 8004848:	e9cd 2300 	strd	r2, r3, [sp]
 800484c:	9b05      	ldr	r3, [sp, #20]
 800484e:	f10e 0c01 	add.w	ip, lr, #1
 8004852:	b173      	cbz	r3, 8004872 <D32_GENERIC+0x102>
 8004854:	6a3a      	ldr	r2, [r7, #32]
 8004856:	9b01      	ldr	r3, [sp, #4]
 8004858:	9402      	str	r4, [sp, #8]
 800485a:	fba8 8902 	umull	r8, r9, r8, r2
 800485e:	469a      	mov	sl, r3
 8004860:	fb02 930a 	mla	r3, r2, sl, r9
 8004864:	f118 4800 	adds.w	r8, r8, #2147483648	@ 0x80000000
 8004868:	f143 0900 	adc.w	r9, r3, #0
 800486c:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8004870:	4654      	mov	r4, sl
 8004872:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004874:	9a04      	ldr	r2, [sp, #16]
 8004876:	fb0e fe03 	mul.w	lr, lr, r3
 800487a:	9b03      	ldr	r3, [sp, #12]
 800487c:	0364      	lsls	r4, r4, #13
 800487e:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8004882:	f04f 0900 	mov.w	r9, #0
 8004886:	fbc3 8904 	smlal	r8, r9, r3, r4
 800488a:	464b      	mov	r3, r9
 800488c:	109b      	asrs	r3, r3, #2
 800488e:	f303 030f 	ssat	r3, #16, r3
 8004892:	f822 301e 	strh.w	r3, [r2, lr, lsl #1]
 8004896:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004898:	fa1f fe8c 	uxth.w	lr, ip
 800489c:	4573      	cmp	r3, lr
 800489e:	d90f      	bls.n	80048c0 <D32_GENERIC+0x150>
 80048a0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	eb00 0442 	add.w	r4, r0, r2, lsl #1
 80048aa:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 80048ae:	f47f af7f 	bne.w	80047b0 <D32_GENERIC+0x40>
 80048b2:	1d02      	adds	r2, r0, #4
 80048b4:	6803      	ldr	r3, [r0, #0]
 80048b6:	9806      	ldr	r0, [sp, #24]
 80048b8:	b188      	cbz	r0, 80048de <D32_GENERIC+0x16e>
 80048ba:	ba5b      	rev16	r3, r3
 80048bc:	4610      	mov	r0, r2
 80048be:	e785      	b.n	80047cc <D32_GENERIC+0x5c>
 80048c0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80048c4:	462b      	mov	r3, r5
 80048c6:	463a      	mov	r2, r7
 80048c8:	e9c2 3b02 	strd	r3, fp, [r2, #8]
 80048cc:	9b07      	ldr	r3, [sp, #28]
 80048ce:	61d6      	str	r6, [r2, #28]
 80048d0:	2000      	movs	r0, #0
 80048d2:	e9c2 a904 	strd	sl, r9, [r2, #16]
 80048d6:	6193      	str	r3, [r2, #24]
 80048d8:	b009      	add	sp, #36	@ 0x24
 80048da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048de:	4610      	mov	r0, r2
 80048e0:	e774      	b.n	80047cc <D32_GENERIC+0x5c>
 80048e2:	bf00      	nop
 80048e4:	2000000c 	.word	0x2000000c
 80048e8:	00060003 	.word	0x00060003
 80048ec:	000a000c 	.word	0x000a000c
 80048f0:	000c000a 	.word	0x000c000a
 80048f4:	00030006 	.word	0x00030006

080048f8 <D48_GENERIC>:
 80048f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048fc:	e9d2 a304 	ldrd	sl, r3, [r2, #16]
 8004900:	b08b      	sub	sp, #44	@ 0x2c
 8004902:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8004904:	9304      	str	r3, [sp, #16]
 8004906:	6993      	ldr	r3, [r2, #24]
 8004908:	9309      	str	r3, [sp, #36]	@ 0x24
 800490a:	e9d2 3402 	ldrd	r3, r4, [r2, #8]
 800490e:	9401      	str	r4, [sp, #4]
 8004910:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8004912:	9405      	str	r4, [sp, #20]
 8004914:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8004918:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 800491a:	9106      	str	r1, [sp, #24]
 800491c:	2d00      	cmp	r5, #0
 800491e:	f000 80c2 	beq.w	8004aa6 <D48_GENERIC+0x1ae>
 8004922:	f004 0520 	and.w	r5, r4, #32
 8004926:	f04f 0900 	mov.w	r9, #0
 800492a:	f004 0410 	and.w	r4, r4, #16
 800492e:	9508      	str	r5, [sp, #32]
 8004930:	4964      	ldr	r1, [pc, #400]	@ (8004ac4 <D48_GENERIC+0x1cc>)
 8004932:	9407      	str	r4, [sp, #28]
 8004934:	464d      	mov	r5, r9
 8004936:	e09e      	b.n	8004a76 <D48_GENERIC+0x17e>
 8004938:	f81b 4007 	ldrb.w	r4, [fp, r7]
 800493c:	f810 b008 	ldrb.w	fp, [r0, r8]
 8004940:	f819 8008 	ldrb.w	r8, [r9, r8]
 8004944:	f810 9006 	ldrb.w	r9, [r0, r6]
 8004948:	7800      	ldrb	r0, [r0, #0]
 800494a:	0424      	lsls	r4, r4, #16
 800494c:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8004950:	f81e 4007 	ldrb.w	r4, [lr, r7]
 8004954:	eb0b 2b09 	add.w	fp, fp, r9, lsl #8
 8004958:	44be      	add	lr, r7
 800495a:	eb04 2408 	add.w	r4, r4, r8, lsl #8
 800495e:	eb0b 0700 	add.w	r7, fp, r0
 8004962:	eb0e 0046 	add.w	r0, lr, r6, lsl #1
 8004966:	fa5f fe87 	uxtb.w	lr, r7
 800496a:	f3c7 2607 	ubfx	r6, r7, #8, #8
 800496e:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8004972:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8004976:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800497a:	0e3f      	lsrs	r7, r7, #24
 800497c:	eb09 299c 	add.w	r9, r9, ip, lsr #10
 8004980:	f851 b027 	ldr.w	fp, [r1, r7, lsl #2]
 8004984:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 8004988:	b2e7      	uxtb	r7, r4
 800498a:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800498e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8004992:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8004996:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800499a:	f851 c024 	ldr.w	ip, [r1, r4, lsl #2]
 800499e:	eb0b 249e 	add.w	r4, fp, lr, lsr #10
 80049a2:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 80049a6:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 80049aa:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80049ae:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80049b2:	f3cc 0809 	ubfx	r8, ip, #0, #10
 80049b6:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80049ba:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80049be:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80049c2:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 80049c6:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 80049ca:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80049ce:	4c3e      	ldr	r4, [pc, #248]	@ (8004ac8 <D48_GENERIC+0x1d0>)
 80049d0:	9e01      	ldr	r6, [sp, #4]
 80049d2:	fb29 6404 	smlad	r4, r9, r4, r6
 80049d6:	4e3d      	ldr	r6, [pc, #244]	@ (8004acc <D48_GENERIC+0x1d4>)
 80049d8:	fb2e 4406 	smlad	r4, lr, r6, r4
 80049dc:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 80049e0:	fb27 4b06 	smlad	fp, r7, r6, r4
 80049e4:	4c3a      	ldr	r4, [pc, #232]	@ (8004ad0 <D48_GENERIC+0x1d8>)
 80049e6:	fb29 3304 	smlad	r3, r9, r4, r3
 80049ea:	f04f 141b 	mov.w	r4, #1769499	@ 0x1b001b
 80049ee:	fb2e 3304 	smlad	r3, lr, r4, r3
 80049f2:	4c38      	ldr	r4, [pc, #224]	@ (8004ad4 <D48_GENERIC+0x1dc>)
 80049f4:	fb27 3304 	smlad	r3, r7, r4, r3
 80049f8:	2601      	movs	r6, #1
 80049fa:	9301      	str	r3, [sp, #4]
 80049fc:	fb29 f906 	smuad	r9, r9, r6
 8004a00:	4b35      	ldr	r3, [pc, #212]	@ (8004ad8 <D48_GENERIC+0x1e0>)
 8004a02:	fb2e 9e03 	smlad	lr, lr, r3, r9
 8004a06:	4b35      	ldr	r3, [pc, #212]	@ (8004adc <D48_GENERIC+0x1e4>)
 8004a08:	fb27 e303 	smlad	r3, r7, r3, lr
 8004a0c:	9f04      	ldr	r7, [sp, #16]
 8004a0e:	f5ab 4458 	sub.w	r4, fp, #55296	@ 0xd800
 8004a12:	eb05 0e06 	add.w	lr, r5, r6
 8004a16:	eb04 060a 	add.w	r6, r4, sl
 8004a1a:	1bf6      	subs	r6, r6, r7
 8004a1c:	4637      	mov	r7, r6
 8004a1e:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8004a22:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8004a26:	9f07      	ldr	r7, [sp, #28]
 8004a28:	b177      	cbz	r7, 8004a48 <D48_GENERIC+0x150>
 8004a2a:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8004a2e:	9404      	str	r4, [sp, #16]
 8004a30:	fba6 9a08 	umull	r9, sl, r6, r8
 8004a34:	9e03      	ldr	r6, [sp, #12]
 8004a36:	fb08 aa06 	mla	sl, r8, r6, sl
 8004a3a:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 8004a3e:	f14a 0700 	adc.w	r7, sl, #0
 8004a42:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8004a46:	4654      	mov	r4, sl
 8004a48:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8004a4a:	fb05 f606 	mul.w	r6, r5, r6
 8004a4e:	9d05      	ldr	r5, [sp, #20]
 8004a50:	02e4      	lsls	r4, r4, #11
 8004a52:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8004a56:	f04f 0800 	mov.w	r8, #0
 8004a5a:	fbc5 7804 	smlal	r7, r8, r5, r4
 8004a5e:	4645      	mov	r5, r8
 8004a60:	10ac      	asrs	r4, r5, #2
 8004a62:	9d06      	ldr	r5, [sp, #24]
 8004a64:	f304 040f 	ssat	r4, #16, r4
 8004a68:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8004a6c:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8004a6e:	fa1f f58e 	uxth.w	r5, lr
 8004a72:	42ac      	cmp	r4, r5
 8004a74:	d917      	bls.n	8004aa6 <D48_GENERIC+0x1ae>
 8004a76:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 8004a78:	b2e6      	uxtb	r6, r4
 8004a7a:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8004a7e:	4277      	negs	r7, r6
 8004a80:	eb00 0b08 	add.w	fp, r0, r8
 8004a84:	eb0b 0907 	add.w	r9, fp, r7
 8004a88:	2c01      	cmp	r4, #1
 8004a8a:	eb09 0e08 	add.w	lr, r9, r8
 8004a8e:	f47f af53 	bne.w	8004938 <D48_GENERIC+0x40>
 8004a92:	9e08      	ldr	r6, [sp, #32]
 8004a94:	e9d0 7400 	ldrd	r7, r4, [r0]
 8004a98:	3006      	adds	r0, #6
 8004a9a:	2e00      	cmp	r6, #0
 8004a9c:	f43f af63 	beq.w	8004966 <D48_GENERIC+0x6e>
 8004aa0:	ba7f      	rev16	r7, r7
 8004aa2:	ba64      	rev16	r4, r4
 8004aa4:	e75f      	b.n	8004966 <D48_GENERIC+0x6e>
 8004aa6:	6093      	str	r3, [r2, #8]
 8004aa8:	9b01      	ldr	r3, [sp, #4]
 8004aaa:	60d3      	str	r3, [r2, #12]
 8004aac:	9b04      	ldr	r3, [sp, #16]
 8004aae:	6153      	str	r3, [r2, #20]
 8004ab0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ab2:	f8c2 c01c 	str.w	ip, [r2, #28]
 8004ab6:	2000      	movs	r0, #0
 8004ab8:	f8c2 a010 	str.w	sl, [r2, #16]
 8004abc:	6193      	str	r3, [r2, #24]
 8004abe:	b00b      	add	sp, #44	@ 0x2c
 8004ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ac4:	2000000c 	.word	0x2000000c
 8004ac8:	000f000a 	.word	0x000f000a
 8004acc:	00060003 	.word	0x00060003
 8004ad0:	00150019 	.word	0x00150019
 8004ad4:	00190015 	.word	0x00190015
 8004ad8:	00030006 	.word	0x00030006
 8004adc:	000a000f 	.word	0x000a000f

08004ae0 <D64_GENERIC>:
 8004ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae4:	b089      	sub	sp, #36	@ 0x24
 8004ae6:	6895      	ldr	r5, [r2, #8]
 8004ae8:	6913      	ldr	r3, [r2, #16]
 8004aea:	9501      	str	r5, [sp, #4]
 8004aec:	68d5      	ldr	r5, [r2, #12]
 8004aee:	9302      	str	r3, [sp, #8]
 8004af0:	9500      	str	r5, [sp, #0]
 8004af2:	6953      	ldr	r3, [r2, #20]
 8004af4:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 8004af6:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8004af8:	9303      	str	r3, [sp, #12]
 8004afa:	6993      	ldr	r3, [r2, #24]
 8004afc:	9307      	str	r3, [sp, #28]
 8004afe:	e9cd 5104 	strd	r5, r1, [sp, #16]
 8004b02:	69d3      	ldr	r3, [r2, #28]
 8004b04:	2c00      	cmp	r4, #0
 8004b06:	f000 80d7 	beq.w	8004cb8 <D64_GENERIC+0x1d8>
 8004b0a:	6a11      	ldr	r1, [r2, #32]
 8004b0c:	9106      	str	r1, [sp, #24]
 8004b0e:	f04f 0e00 	mov.w	lr, #0
 8004b12:	f8df c1e4 	ldr.w	ip, [pc, #484]	@ 8004cf8 <D64_GENERIC+0x218>
 8004b16:	4681      	mov	r9, r0
 8004b18:	e0bf      	b.n	8004c9a <D64_GENERIC+0x1ba>
 8004b1a:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8004b1e:	426c      	negs	r4, r5
 8004b20:	eb09 0708 	add.w	r7, r9, r8
 8004b24:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8004b28:	eb0a 0648 	add.w	r6, sl, r8, lsl #1
 8004b2c:	5d38      	ldrb	r0, [r7, r4]
 8004b2e:	5d31      	ldrb	r1, [r6, r4]
 8004b30:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8004b34:	f819 a008 	ldrb.w	sl, [r9, r8]
 8004b38:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8004b3c:	f899 7000 	ldrb.w	r7, [r9]
 8004b40:	f816 9014 	ldrb.w	r9, [r6, r4, lsl #1]
 8004b44:	4426      	add	r6, r4
 8004b46:	0409      	lsls	r1, r1, #16
 8004b48:	0400      	lsls	r0, r0, #16
 8004b4a:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8004b4e:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8004b52:	f816 b014 	ldrb.w	fp, [r6, r4, lsl #1]
 8004b56:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 8004b5a:	eb06 0444 	add.w	r4, r6, r4, lsl #1
 8004b5e:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 8004b62:	4459      	add	r1, fp
 8004b64:	eb04 0985 	add.w	r9, r4, r5, lsl #2
 8004b68:	4438      	add	r0, r7
 8004b6a:	b2c5      	uxtb	r5, r0
 8004b6c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8004b70:	f85c 6025 	ldr.w	r6, [ip, r5, lsl #2]
 8004b74:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 8004b78:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8004b7c:	0e00      	lsrs	r0, r0, #24
 8004b7e:	eb03 0806 	add.w	r8, r3, r6
 8004b82:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8004b86:	f85c 4020 	ldr.w	r4, [ip, r0, lsl #2]
 8004b8a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8004b8e:	b2c8      	uxtb	r0, r1
 8004b90:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8004b94:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8004b98:	f85c 6020 	ldr.w	r6, [ip, r0, lsl #2]
 8004b9c:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 8004ba0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8004ba4:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8004ba8:	0e09      	lsrs	r1, r1, #24
 8004baa:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8004bae:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8004bb2:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8004bb6:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8004bba:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 8004bbe:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8004bc2:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8004bc6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004bca:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004bce:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004bd2:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8004bd6:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004bda:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004bde:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004be2:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8004be6:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 8004bea:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8004bee:	0a8b      	lsrs	r3, r1, #10
 8004bf0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8004bf4:	4938      	ldr	r1, [pc, #224]	@ (8004cd8 <D64_GENERIC+0x1f8>)
 8004bf6:	9c00      	ldr	r4, [sp, #0]
 8004bf8:	fb28 4101 	smlad	r1, r8, r1, r4
 8004bfc:	4c37      	ldr	r4, [pc, #220]	@ (8004cdc <D64_GENERIC+0x1fc>)
 8004bfe:	fb27 1104 	smlad	r1, r7, r4, r1
 8004c02:	4c37      	ldr	r4, [pc, #220]	@ (8004ce0 <D64_GENERIC+0x200>)
 8004c04:	fb20 1104 	smlad	r1, r0, r4, r1
 8004c08:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 8004c0c:	fb2a 1106 	smlad	r1, sl, r6, r1
 8004c10:	4d34      	ldr	r5, [pc, #208]	@ (8004ce4 <D64_GENERIC+0x204>)
 8004c12:	9c01      	ldr	r4, [sp, #4]
 8004c14:	fb28 4405 	smlad	r4, r8, r5, r4
 8004c18:	fb2a 4415 	smladx	r4, sl, r5, r4
 8004c1c:	4d32      	ldr	r5, [pc, #200]	@ (8004ce8 <D64_GENERIC+0x208>)
 8004c1e:	fb27 4405 	smlad	r4, r7, r5, r4
 8004c22:	fb20 4415 	smladx	r4, r0, r5, r4
 8004c26:	2501      	movs	r5, #1
 8004c28:	9400      	str	r4, [sp, #0]
 8004c2a:	fb28 f805 	smuad	r8, r8, r5
 8004c2e:	4c2f      	ldr	r4, [pc, #188]	@ (8004cec <D64_GENERIC+0x20c>)
 8004c30:	fb27 8704 	smlad	r7, r7, r4, r8
 8004c34:	4c2e      	ldr	r4, [pc, #184]	@ (8004cf0 <D64_GENERIC+0x210>)
 8004c36:	fb20 7004 	smlad	r0, r0, r4, r7
 8004c3a:	4c2e      	ldr	r4, [pc, #184]	@ (8004cf4 <D64_GENERIC+0x214>)
 8004c3c:	fb2a 0004 	smlad	r0, sl, r4, r0
 8004c40:	f5a1 3600 	sub.w	r6, r1, #131072	@ 0x20000
 8004c44:	9906      	ldr	r1, [sp, #24]
 8004c46:	9001      	str	r0, [sp, #4]
 8004c48:	b181      	cbz	r1, 8004c6c <D64_GENERIC+0x18c>
 8004c4a:	9802      	ldr	r0, [sp, #8]
 8004c4c:	9c03      	ldr	r4, [sp, #12]
 8004c4e:	4430      	add	r0, r6
 8004c50:	1b00      	subs	r0, r0, r4
 8004c52:	fba0 7801 	umull	r7, r8, r0, r1
 8004c56:	17c5      	asrs	r5, r0, #31
 8004c58:	fb01 8805 	mla	r8, r1, r5, r8
 8004c5c:	f117 4000 	adds.w	r0, r7, #2147483648	@ 0x80000000
 8004c60:	f148 0100 	adc.w	r1, r8, #0
 8004c64:	0049      	lsls	r1, r1, #1
 8004c66:	e9cd 1602 	strd	r1, r6, [sp, #8]
 8004c6a:	460e      	mov	r6, r1
 8004c6c:	8d14      	ldrh	r4, [r2, #40]	@ 0x28
 8004c6e:	9904      	ldr	r1, [sp, #16]
 8004c70:	9805      	ldr	r0, [sp, #20]
 8004c72:	02b6      	lsls	r6, r6, #10
 8004c74:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8004c78:	f04f 0800 	mov.w	r8, #0
 8004c7c:	fb0e f404 	mul.w	r4, lr, r4
 8004c80:	fbc1 7806 	smlal	r7, r8, r1, r6
 8004c84:	4641      	mov	r1, r8
 8004c86:	1089      	asrs	r1, r1, #2
 8004c88:	f301 010f 	ssat	r1, #16, r1
 8004c8c:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8004c90:	8cd1      	ldrh	r1, [r2, #38]	@ 0x26
 8004c92:	f10e 0e01 	add.w	lr, lr, #1
 8004c96:	4571      	cmp	r1, lr
 8004c98:	dd0e      	ble.n	8004cb8 <D64_GENERIC+0x1d8>
 8004c9a:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8004c9c:	2d01      	cmp	r5, #1
 8004c9e:	f47f af3c 	bne.w	8004b1a <D64_GENERIC+0x3a>
 8004ca2:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8004ca4:	06ac      	lsls	r4, r5, #26
 8004ca6:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004caa:	f109 0908 	add.w	r9, r9, #8
 8004cae:	f57f af5c 	bpl.w	8004b6a <D64_GENERIC+0x8a>
 8004cb2:	ba40      	rev16	r0, r0
 8004cb4:	ba49      	rev16	r1, r1
 8004cb6:	e758      	b.n	8004b6a <D64_GENERIC+0x8a>
 8004cb8:	61d3      	str	r3, [r2, #28]
 8004cba:	9b02      	ldr	r3, [sp, #8]
 8004cbc:	9901      	ldr	r1, [sp, #4]
 8004cbe:	6113      	str	r3, [r2, #16]
 8004cc0:	9b03      	ldr	r3, [sp, #12]
 8004cc2:	6091      	str	r1, [r2, #8]
 8004cc4:	6153      	str	r3, [r2, #20]
 8004cc6:	9900      	ldr	r1, [sp, #0]
 8004cc8:	9b07      	ldr	r3, [sp, #28]
 8004cca:	60d1      	str	r1, [r2, #12]
 8004ccc:	2000      	movs	r0, #0
 8004cce:	6193      	str	r3, [r2, #24]
 8004cd0:	b009      	add	sp, #36	@ 0x24
 8004cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cd6:	bf00      	nop
 8004cd8:	001c0015 	.word	0x001c0015
 8004cdc:	000f000a 	.word	0x000f000a
 8004ce0:	00060003 	.word	0x00060003
 8004ce4:	0024002a 	.word	0x0024002a
 8004ce8:	002e0030 	.word	0x002e0030
 8004cec:	00030006 	.word	0x00030006
 8004cf0:	000a000f 	.word	0x000a000f
 8004cf4:	0015001c 	.word	0x0015001c
 8004cf8:	2000000c 	.word	0x2000000c

08004cfc <D80_GENERIC>:
 8004cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d00:	b08b      	sub	sp, #44	@ 0x2c
 8004d02:	6914      	ldr	r4, [r2, #16]
 8004d04:	9405      	str	r4, [sp, #20]
 8004d06:	6954      	ldr	r4, [r2, #20]
 8004d08:	9406      	str	r4, [sp, #24]
 8004d0a:	6994      	ldr	r4, [r2, #24]
 8004d0c:	9409      	str	r4, [sp, #36]	@ 0x24
 8004d0e:	6894      	ldr	r4, [r2, #8]
 8004d10:	9402      	str	r4, [sp, #8]
 8004d12:	68d4      	ldr	r4, [r2, #12]
 8004d14:	9401      	str	r4, [sp, #4]
 8004d16:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8004d18:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8004d1a:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8004d1e:	e9cd 4107 	strd	r4, r1, [sp, #28]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 810a 	beq.w	8004f3c <D80_GENERIC+0x240>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	f8df 9260 	ldr.w	r9, [pc, #608]	@ 8004f8c <D80_GENERIC+0x290>
 8004d2e:	e9cd b303 	strd	fp, r3, [sp, #12]
 8004d32:	e0ee      	b.n	8004f12 <D80_GENERIC+0x216>
 8004d34:	fa5f fe8e 	uxtb.w	lr, lr
 8004d38:	fa0f f48e 	sxth.w	r4, lr
 8004d3c:	0066      	lsls	r6, r4, #1
 8004d3e:	eb06 0804 	add.w	r8, r6, r4
 8004d42:	f1ce 0500 	rsb	r5, lr, #0
 8004d46:	eb00 0108 	add.w	r1, r0, r8
 8004d4a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004d4e:	194b      	adds	r3, r1, r5
 8004d50:	5d49      	ldrb	r1, [r1, r5]
 8004d52:	f810 a008 	ldrb.w	sl, [r0, r8]
 8004d56:	f813 b004 	ldrb.w	fp, [r3, r4]
 8004d5a:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8004d5e:	f890 8000 	ldrb.w	r8, [r0]
 8004d62:	eb03 0c04 	add.w	ip, r3, r4
 8004d66:	eb0c 0705 	add.w	r7, ip, r5
 8004d6a:	0409      	lsls	r1, r1, #16
 8004d6c:	f81c 3005 	ldrb.w	r3, [ip, r5]
 8004d70:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8004d74:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8004d78:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8004d7c:	eb0a 0004 	add.w	r0, sl, r4
 8004d80:	041b      	lsls	r3, r3, #16
 8004d82:	f81a a004 	ldrb.w	sl, [sl, r4]
 8004d86:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8004d8a:	5d44      	ldrb	r4, [r0, r5]
 8004d8c:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8004d90:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 8004d94:	4428      	add	r0, r5
 8004d96:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8004d9a:	4441      	add	r1, r8
 8004d9c:	4430      	add	r0, r6
 8004d9e:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8004da2:	441f      	add	r7, r3
 8004da4:	b2cd      	uxtb	r5, r1
 8004da6:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8004daa:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8004dae:	f859 c023 	ldr.w	ip, [r9, r3, lsl #2]
 8004db2:	9b03      	ldr	r3, [sp, #12]
 8004db4:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8004db8:	0e09      	lsrs	r1, r1, #24
 8004dba:	4433      	add	r3, r6
 8004dbc:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8004dc0:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8004dc4:	b2fd      	uxtb	r5, r7
 8004dc6:	eb0c 2193 	add.w	r1, ip, r3, lsr #10
 8004dca:	469b      	mov	fp, r3
 8004dcc:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8004dd0:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8004dd4:	f859 e025 	ldr.w	lr, [r9, r5, lsl #2]
 8004dd8:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8004ddc:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 8004de0:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8004de4:	0e3b      	lsrs	r3, r7, #24
 8004de6:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8004dea:	f859 702c 	ldr.w	r7, [r9, ip, lsl #2]
 8004dee:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8004df2:	fa5f fc84 	uxtb.w	ip, r4
 8004df6:	eb05 259e 	add.w	r5, r5, lr, lsr #10
 8004dfa:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8004dfe:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8004e02:	f859 c02c 	ldr.w	ip, [r9, ip, lsl #2]
 8004e06:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8004e0a:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8004e0e:	eb0c 2c93 	add.w	ip, ip, r3, lsr #10
 8004e12:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8004e16:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004e1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e1e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8004e22:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004e26:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004e2a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004e2e:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8004e32:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8004e36:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8004e3a:	0aa3      	lsrs	r3, r4, #10
 8004e3c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004e40:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004e44:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004e48:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
 8004e4c:	9303      	str	r3, [sp, #12]
 8004e4e:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8004e52:	ea45 4e0e 	orr.w	lr, r5, lr, lsl #16
 8004e56:	4b41      	ldr	r3, [pc, #260]	@ (8004f5c <D80_GENERIC+0x260>)
 8004e58:	9901      	ldr	r1, [sp, #4]
 8004e5a:	fb2b 1303 	smlad	r3, fp, r3, r1
 8004e5e:	4940      	ldr	r1, [pc, #256]	@ (8004f60 <D80_GENERIC+0x264>)
 8004e60:	fb28 3301 	smlad	r3, r8, r1, r3
 8004e64:	493f      	ldr	r1, [pc, #252]	@ (8004f64 <D80_GENERIC+0x268>)
 8004e66:	fb2e 3301 	smlad	r3, lr, r1, r3
 8004e6a:	493f      	ldr	r1, [pc, #252]	@ (8004f68 <D80_GENERIC+0x26c>)
 8004e6c:	fb27 3301 	smlad	r3, r7, r1, r3
 8004e70:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8004e74:	fb2c 3404 	smlad	r4, ip, r4, r3
 8004e78:	4b3c      	ldr	r3, [pc, #240]	@ (8004f6c <D80_GENERIC+0x270>)
 8004e7a:	9902      	ldr	r1, [sp, #8]
 8004e7c:	fb2b 1303 	smlad	r3, fp, r3, r1
 8004e80:	493b      	ldr	r1, [pc, #236]	@ (8004f70 <D80_GENERIC+0x274>)
 8004e82:	fb28 3301 	smlad	r3, r8, r1, r3
 8004e86:	f04f 114b 	mov.w	r1, #4915275	@ 0x4b004b
 8004e8a:	fb2e 3101 	smlad	r1, lr, r1, r3
 8004e8e:	4b39      	ldr	r3, [pc, #228]	@ (8004f74 <D80_GENERIC+0x278>)
 8004e90:	fb27 1103 	smlad	r1, r7, r3, r1
 8004e94:	4b38      	ldr	r3, [pc, #224]	@ (8004f78 <D80_GENERIC+0x27c>)
 8004e96:	fb2c 1303 	smlad	r3, ip, r3, r1
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	9301      	str	r3, [sp, #4]
 8004e9e:	fb2b fb01 	smuad	fp, fp, r1
 8004ea2:	4b36      	ldr	r3, [pc, #216]	@ (8004f7c <D80_GENERIC+0x280>)
 8004ea4:	fb28 b803 	smlad	r8, r8, r3, fp
 8004ea8:	4d35      	ldr	r5, [pc, #212]	@ (8004f80 <D80_GENERIC+0x284>)
 8004eaa:	fb2e 8e05 	smlad	lr, lr, r5, r8
 8004eae:	4d35      	ldr	r5, [pc, #212]	@ (8004f84 <D80_GENERIC+0x288>)
 8004eb0:	fb27 e705 	smlad	r7, r7, r5, lr
 8004eb4:	4b34      	ldr	r3, [pc, #208]	@ (8004f88 <D80_GENERIC+0x28c>)
 8004eb6:	fb2c 7303 	smlad	r3, ip, r3, r7
 8004eba:	6a11      	ldr	r1, [r2, #32]
 8004ebc:	9302      	str	r3, [sp, #8]
 8004ebe:	f5a4 337a 	sub.w	r3, r4, #256000	@ 0x3e800
 8004ec2:	b181      	cbz	r1, 8004ee6 <D80_GENERIC+0x1ea>
 8004ec4:	9c05      	ldr	r4, [sp, #20]
 8004ec6:	9d06      	ldr	r5, [sp, #24]
 8004ec8:	441c      	add	r4, r3
 8004eca:	1b64      	subs	r4, r4, r5
 8004ecc:	fba4 ab01 	umull	sl, fp, r4, r1
 8004ed0:	17e7      	asrs	r7, r4, #31
 8004ed2:	fb01 bb07 	mla	fp, r1, r7, fp
 8004ed6:	f11a 4400 	adds.w	r4, sl, #2147483648	@ 0x80000000
 8004eda:	f14b 0500 	adc.w	r5, fp, #0
 8004ede:	0069      	lsls	r1, r5, #1
 8004ee0:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	9e04      	ldr	r6, [sp, #16]
 8004ee8:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 8004eea:	9f07      	ldr	r7, [sp, #28]
 8004eec:	025b      	lsls	r3, r3, #9
 8004eee:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8004ef2:	2500      	movs	r5, #0
 8004ef4:	fb06 f101 	mul.w	r1, r6, r1
 8004ef8:	fbc7 4503 	smlal	r4, r5, r7, r3
 8004efc:	9c08      	ldr	r4, [sp, #32]
 8004efe:	10ab      	asrs	r3, r5, #2
 8004f00:	f303 030f 	ssat	r3, #16, r3
 8004f04:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8004f08:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8004f0a:	1c71      	adds	r1, r6, #1
 8004f0c:	428b      	cmp	r3, r1
 8004f0e:	9104      	str	r1, [sp, #16]
 8004f10:	dd12      	ble.n	8004f38 <D80_GENERIC+0x23c>
 8004f12:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	@ 0x2a
 8004f16:	f1be 0f01 	cmp.w	lr, #1
 8004f1a:	f47f af0b 	bne.w	8004d34 <D80_GENERIC+0x38>
 8004f1e:	6801      	ldr	r1, [r0, #0]
 8004f20:	6847      	ldr	r7, [r0, #4]
 8004f22:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8004f24:	6884      	ldr	r4, [r0, #8]
 8004f26:	069b      	lsls	r3, r3, #26
 8004f28:	f100 000a 	add.w	r0, r0, #10
 8004f2c:	f57f af3a 	bpl.w	8004da4 <D80_GENERIC+0xa8>
 8004f30:	ba49      	rev16	r1, r1
 8004f32:	ba7f      	rev16	r7, r7
 8004f34:	ba64      	rev16	r4, r4
 8004f36:	e735      	b.n	8004da4 <D80_GENERIC+0xa8>
 8004f38:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004f3c:	9b02      	ldr	r3, [sp, #8]
 8004f3e:	6093      	str	r3, [r2, #8]
 8004f40:	9b01      	ldr	r3, [sp, #4]
 8004f42:	60d3      	str	r3, [r2, #12]
 8004f44:	9b05      	ldr	r3, [sp, #20]
 8004f46:	6113      	str	r3, [r2, #16]
 8004f48:	9b06      	ldr	r3, [sp, #24]
 8004f4a:	6153      	str	r3, [r2, #20]
 8004f4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f4e:	f8c2 b01c 	str.w	fp, [r2, #28]
 8004f52:	2000      	movs	r0, #0
 8004f54:	6193      	str	r3, [r2, #24]
 8004f56:	b00b      	add	sp, #44	@ 0x2c
 8004f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f5c:	002d0024 	.word	0x002d0024
 8004f60:	001c0015 	.word	0x001c0015
 8004f64:	000f000a 	.word	0x000f000a
 8004f68:	00060003 	.word	0x00060003
 8004f6c:	0037003f 	.word	0x0037003f
 8004f70:	00450049 	.word	0x00450049
 8004f74:	00490045 	.word	0x00490045
 8004f78:	003f0037 	.word	0x003f0037
 8004f7c:	00030006 	.word	0x00030006
 8004f80:	000a000f 	.word	0x000a000f
 8004f84:	0015001c 	.word	0x0015001c
 8004f88:	0024002d 	.word	0x0024002d
 8004f8c:	2000000c 	.word	0x2000000c

08004f90 <D128_GENERIC>:
 8004f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f94:	b091      	sub	sp, #68	@ 0x44
 8004f96:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8004f98:	9004      	str	r0, [sp, #16]
 8004f9a:	6910      	ldr	r0, [r2, #16]
 8004f9c:	900a      	str	r0, [sp, #40]	@ 0x28
 8004f9e:	6950      	ldr	r0, [r2, #20]
 8004fa0:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004fa2:	6990      	ldr	r0, [r2, #24]
 8004fa4:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004fa6:	69d0      	ldr	r0, [r2, #28]
 8004fa8:	9002      	str	r0, [sp, #8]
 8004faa:	6890      	ldr	r0, [r2, #8]
 8004fac:	9003      	str	r0, [sp, #12]
 8004fae:	68d0      	ldr	r0, [r2, #12]
 8004fb0:	9001      	str	r0, [sp, #4]
 8004fb2:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8004fb4:	9200      	str	r2, [sp, #0]
 8004fb6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 8196 	beq.w	80052ec <D128_GENERIC+0x35c>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	6a12      	ldr	r2, [r2, #32]
 8004fc4:	920e      	str	r2, [sp, #56]	@ 0x38
 8004fc6:	f8df 93a0 	ldr.w	r9, [pc, #928]	@ 8005368 <D128_GENERIC+0x3d8>
 8004fca:	9305      	str	r3, [sp, #20]
 8004fcc:	e177      	b.n	80052be <D128_GENERIC+0x32e>
 8004fce:	b2d2      	uxtb	r2, r2
 8004fd0:	9d04      	ldr	r5, [sp, #16]
 8004fd2:	b214      	sxth	r4, r2
 8004fd4:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8004fd8:	4250      	negs	r0, r2
 8004fda:	eb05 010a 	add.w	r1, r5, sl
 8004fde:	00a6      	lsls	r6, r4, #2
 8004fe0:	eb01 0800 	add.w	r8, r1, r0
 8004fe4:	eb06 0e04 	add.w	lr, r6, r4
 8004fe8:	eb08 070e 	add.w	r7, r8, lr
 8004fec:	183b      	adds	r3, r7, r0
 8004fee:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8004ff2:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
 8004ff6:	9608      	str	r6, [sp, #32]
 8004ff8:	eb0c 0604 	add.w	r6, ip, r4
 8004ffc:	9304      	str	r3, [sp, #16]
 8004ffe:	1833      	adds	r3, r6, r0
 8005000:	f815 b00a 	ldrb.w	fp, [r5, sl]
 8005004:	9306      	str	r3, [sp, #24]
 8005006:	f818 a00e 	ldrb.w	sl, [r8, lr]
 800500a:	9b04      	ldr	r3, [sp, #16]
 800500c:	f815 e002 	ldrb.w	lr, [r5, r2]
 8005010:	782d      	ldrb	r5, [r5, #0]
 8005012:	5c3a      	ldrb	r2, [r7, r0]
 8005014:	9507      	str	r5, [sp, #28]
 8005016:	9d06      	ldr	r5, [sp, #24]
 8005018:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 800501c:	f81c 8004 	ldrb.w	r8, [ip, r4]
 8005020:	9304      	str	r3, [sp, #16]
 8005022:	f817 c010 	ldrb.w	ip, [r7, r0, lsl #1]
 8005026:	5c33      	ldrb	r3, [r6, r0]
 8005028:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 800502c:	5c09      	ldrb	r1, [r1, r0]
 800502e:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8005032:	0412      	lsls	r2, r2, #16
 8005034:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8005038:	eb06 0a04 	add.w	sl, r6, r4
 800503c:	5d36      	ldrb	r6, [r6, r4]
 800503e:	f815 4010 	ldrb.w	r4, [r5, r0, lsl #1]
 8005042:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8005046:	042d      	lsls	r5, r5, #16
 8005048:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 800504c:	0409      	lsls	r1, r1, #16
 800504e:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8005052:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8005056:	041b      	lsls	r3, r3, #16
 8005058:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 800505c:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8005060:	eb0a 0e00 	add.w	lr, sl, r0
 8005064:	9d07      	ldr	r5, [sp, #28]
 8005066:	f81e b010 	ldrb.w	fp, [lr, r0, lsl #1]
 800506a:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800506e:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8005072:	9f08      	ldr	r7, [sp, #32]
 8005074:	eb0e 0040 	add.w	r0, lr, r0, lsl #1
 8005078:	4429      	add	r1, r5
 800507a:	9d04      	ldr	r5, [sp, #16]
 800507c:	4438      	add	r0, r7
 800507e:	eb02 220c 	add.w	r2, r2, ip, lsl #8
 8005082:	9004      	str	r0, [sp, #16]
 8005084:	442a      	add	r2, r5
 8005086:	eb06 0a0b 	add.w	sl, r6, fp
 800508a:	1918      	adds	r0, r3, r4
 800508c:	b2cb      	uxtb	r3, r1
 800508e:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8005092:	9e02      	ldr	r6, [sp, #8]
 8005094:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005098:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800509c:	f3c1 4407 	ubfx	r4, r1, #16, #8
 80050a0:	441e      	add	r6, r3
 80050a2:	0e09      	lsrs	r1, r1, #24
 80050a4:	4633      	mov	r3, r6
 80050a6:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80050aa:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 80050ae:	b2d4      	uxtb	r4, r2
 80050b0:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80050b4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80050b8:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 80050bc:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80050c0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80050c4:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80050c8:	0e12      	lsrs	r2, r2, #24
 80050ca:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 80050ce:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 80050d2:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80050d6:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 80050da:	9702      	str	r7, [sp, #8]
 80050dc:	b2c2      	uxtb	r2, r0
 80050de:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 80050e2:	eb06 2e91 	add.w	lr, r6, r1, lsr #10
 80050e6:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 80050ea:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 80050ee:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80050f2:	eb06 2c94 	add.w	ip, r6, r4, lsr #10
 80050f6:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80050fa:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 80050fe:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8005102:	0e00      	lsrs	r0, r0, #24
 8005104:	fa5f f68a 	uxtb.w	r6, sl
 8005108:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800510c:	9308      	str	r3, [sp, #32]
 800510e:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8005112:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8005116:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800511a:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800511e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005122:	9509      	str	r5, [sp, #36]	@ 0x24
 8005124:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8005128:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800512c:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8005130:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005134:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8005138:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800513c:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8005140:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8005144:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8005148:	9306      	str	r3, [sp, #24]
 800514a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800514e:	9b02      	ldr	r3, [sp, #8]
 8005150:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8005154:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005158:	f8cd a01c 	str.w	sl, [sp, #28]
 800515c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8005160:	9b06      	ldr	r3, [sp, #24]
 8005162:	9506      	str	r5, [sp, #24]
 8005164:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005166:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800516a:	f8cd e008 	str.w	lr, [sp, #8]
 800516e:	46ae      	mov	lr, r5
 8005170:	9d08      	ldr	r5, [sp, #32]
 8005172:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005176:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 800517a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800517e:	9d02      	ldr	r5, [sp, #8]
 8005180:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8005184:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005188:	9f07      	ldr	r7, [sp, #28]
 800518a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800518e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005192:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8005196:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800519a:	9d06      	ldr	r5, [sp, #24]
 800519c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051a0:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80051a4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80051a8:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80051ac:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80051b0:	f3c7 0c09 	ubfx	ip, r7, #0, #10
 80051b4:	0abe      	lsrs	r6, r7, #10
 80051b6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80051ba:	9602      	str	r6, [sp, #8]
 80051bc:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 80051c0:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80051c4:	ea4c 4505 	orr.w	r5, ip, r5, lsl #16
 80051c8:	4e52      	ldr	r6, [pc, #328]	@ (8005314 <D128_GENERIC+0x384>)
 80051ca:	9f01      	ldr	r7, [sp, #4]
 80051cc:	fb2e 7606 	smlad	r6, lr, r6, r7
 80051d0:	4f51      	ldr	r7, [pc, #324]	@ (8005318 <D128_GENERIC+0x388>)
 80051d2:	fb2a 6607 	smlad	r6, sl, r7, r6
 80051d6:	4f51      	ldr	r7, [pc, #324]	@ (800531c <D128_GENERIC+0x38c>)
 80051d8:	fb21 6607 	smlad	r6, r1, r7, r6
 80051dc:	4f50      	ldr	r7, [pc, #320]	@ (8005320 <D128_GENERIC+0x390>)
 80051de:	fb24 6607 	smlad	r6, r4, r7, r6
 80051e2:	4f50      	ldr	r7, [pc, #320]	@ (8005324 <D128_GENERIC+0x394>)
 80051e4:	fb22 6607 	smlad	r6, r2, r7, r6
 80051e8:	4f4f      	ldr	r7, [pc, #316]	@ (8005328 <D128_GENERIC+0x398>)
 80051ea:	fb20 6607 	smlad	r6, r0, r7, r6
 80051ee:	4f4f      	ldr	r7, [pc, #316]	@ (800532c <D128_GENERIC+0x39c>)
 80051f0:	fb23 6607 	smlad	r6, r3, r7, r6
 80051f4:	f44f 3780 	mov.w	r7, #65536	@ 0x10000
 80051f8:	fb25 6807 	smlad	r8, r5, r7, r6
 80051fc:	4f4c      	ldr	r7, [pc, #304]	@ (8005330 <D128_GENERIC+0x3a0>)
 80051fe:	9e03      	ldr	r6, [sp, #12]
 8005200:	fb2e 6c07 	smlad	ip, lr, r7, r6
 8005204:	4e4b      	ldr	r6, [pc, #300]	@ (8005334 <D128_GENERIC+0x3a4>)
 8005206:	fb2a cc06 	smlad	ip, sl, r6, ip
 800520a:	4f4b      	ldr	r7, [pc, #300]	@ (8005338 <D128_GENERIC+0x3a8>)
 800520c:	fb21 cc07 	smlad	ip, r1, r7, ip
 8005210:	4f4a      	ldr	r7, [pc, #296]	@ (800533c <D128_GENERIC+0x3ac>)
 8005212:	fb24 cc07 	smlad	ip, r4, r7, ip
 8005216:	4f4a      	ldr	r7, [pc, #296]	@ (8005340 <D128_GENERIC+0x3b0>)
 8005218:	fb22 cc07 	smlad	ip, r2, r7, ip
 800521c:	4f49      	ldr	r7, [pc, #292]	@ (8005344 <D128_GENERIC+0x3b4>)
 800521e:	fb20 cc07 	smlad	ip, r0, r7, ip
 8005222:	4f49      	ldr	r7, [pc, #292]	@ (8005348 <D128_GENERIC+0x3b8>)
 8005224:	fb23 c707 	smlad	r7, r3, r7, ip
 8005228:	f8df c140 	ldr.w	ip, [pc, #320]	@ 800536c <D128_GENERIC+0x3dc>
 800522c:	fb25 760c 	smlad	r6, r5, ip, r7
 8005230:	f04f 0b01 	mov.w	fp, #1
 8005234:	9601      	str	r6, [sp, #4]
 8005236:	fb2e fb0b 	smuad	fp, lr, fp
 800523a:	4f44      	ldr	r7, [pc, #272]	@ (800534c <D128_GENERIC+0x3bc>)
 800523c:	fb2a ba07 	smlad	sl, sl, r7, fp
 8005240:	4f43      	ldr	r7, [pc, #268]	@ (8005350 <D128_GENERIC+0x3c0>)
 8005242:	fb21 aa07 	smlad	sl, r1, r7, sl
 8005246:	4f43      	ldr	r7, [pc, #268]	@ (8005354 <D128_GENERIC+0x3c4>)
 8005248:	fb24 aa07 	smlad	sl, r4, r7, sl
 800524c:	4f42      	ldr	r7, [pc, #264]	@ (8005358 <D128_GENERIC+0x3c8>)
 800524e:	fb22 a707 	smlad	r7, r2, r7, sl
 8005252:	4a42      	ldr	r2, [pc, #264]	@ (800535c <D128_GENERIC+0x3cc>)
 8005254:	fb20 7702 	smlad	r7, r0, r2, r7
 8005258:	4a41      	ldr	r2, [pc, #260]	@ (8005360 <D128_GENERIC+0x3d0>)
 800525a:	fb23 7702 	smlad	r7, r3, r2, r7
 800525e:	4b41      	ldr	r3, [pc, #260]	@ (8005364 <D128_GENERIC+0x3d4>)
 8005260:	fb25 7303 	smlad	r3, r5, r3, r7
 8005264:	9303      	str	r3, [sp, #12]
 8005266:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005268:	f5a8 1680 	sub.w	r6, r8, #1048576	@ 0x100000
 800526c:	b183      	cbz	r3, 8005290 <D128_GENERIC+0x300>
 800526e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005270:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005272:	4432      	add	r2, r6
 8005274:	1a52      	subs	r2, r2, r1
 8005276:	fba2 4503 	umull	r4, r5, r2, r3
 800527a:	17d1      	asrs	r1, r2, #31
 800527c:	fb03 5501 	mla	r5, r3, r1, r5
 8005280:	f114 4200 	adds.w	r2, r4, #2147483648	@ 0x80000000
 8005284:	f145 0300 	adc.w	r3, r5, #0
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	e9cd 360a 	strd	r3, r6, [sp, #40]	@ 0x28
 800528e:	461e      	mov	r6, r3
 8005290:	9800      	ldr	r0, [sp, #0]
 8005292:	9c05      	ldr	r4, [sp, #20]
 8005294:	8d01      	ldrh	r1, [r0, #40]	@ 0x28
 8005296:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005298:	01f6      	lsls	r6, r6, #7
 800529a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800529e:	2300      	movs	r3, #0
 80052a0:	fbc5 2306 	smlal	r2, r3, r5, r6
 80052a4:	fb04 f101 	mul.w	r1, r4, r1
 80052a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80052aa:	109b      	asrs	r3, r3, #2
 80052ac:	f303 030f 	ssat	r3, #16, r3
 80052b0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 80052b4:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 80052b6:	1c62      	adds	r2, r4, #1
 80052b8:	4293      	cmp	r3, r2
 80052ba:	9205      	str	r2, [sp, #20]
 80052bc:	dd16      	ble.n	80052ec <D128_GENERIC+0x35c>
 80052be:	9b00      	ldr	r3, [sp, #0]
 80052c0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80052c2:	2a01      	cmp	r2, #1
 80052c4:	f47f ae83 	bne.w	8004fce <D128_GENERIC+0x3e>
 80052c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ca:	9c04      	ldr	r4, [sp, #16]
 80052cc:	069b      	lsls	r3, r3, #26
 80052ce:	e9d4 1200 	ldrd	r1, r2, [r4]
 80052d2:	68a0      	ldr	r0, [r4, #8]
 80052d4:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80052d8:	f104 0410 	add.w	r4, r4, #16
 80052dc:	d517      	bpl.n	800530e <D128_GENERIC+0x37e>
 80052de:	ba49      	rev16	r1, r1
 80052e0:	ba52      	rev16	r2, r2
 80052e2:	ba40      	rev16	r0, r0
 80052e4:	fa9a fa9a 	rev16.w	sl, sl
 80052e8:	9404      	str	r4, [sp, #16]
 80052ea:	e6cf      	b.n	800508c <D128_GENERIC+0xfc>
 80052ec:	9b00      	ldr	r3, [sp, #0]
 80052ee:	9903      	ldr	r1, [sp, #12]
 80052f0:	6099      	str	r1, [r3, #8]
 80052f2:	9901      	ldr	r1, [sp, #4]
 80052f4:	60d9      	str	r1, [r3, #12]
 80052f6:	9902      	ldr	r1, [sp, #8]
 80052f8:	61d9      	str	r1, [r3, #28]
 80052fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80052fc:	6119      	str	r1, [r3, #16]
 80052fe:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005300:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005302:	6159      	str	r1, [r3, #20]
 8005304:	2000      	movs	r0, #0
 8005306:	619a      	str	r2, [r3, #24]
 8005308:	b011      	add	sp, #68	@ 0x44
 800530a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800530e:	9404      	str	r4, [sp, #16]
 8005310:	e6bc      	b.n	800508c <D128_GENERIC+0xfc>
 8005312:	bf00      	nop
 8005314:	00780069 	.word	0x00780069
 8005318:	005b004e 	.word	0x005b004e
 800531c:	00420037 	.word	0x00420037
 8005320:	002d0024 	.word	0x002d0024
 8005324:	001c0015 	.word	0x001c0015
 8005328:	000f000a 	.word	0x000f000a
 800532c:	00060003 	.word	0x00060003
 8005330:	00880096 	.word	0x00880096
 8005334:	00a200ac 	.word	0x00a200ac
 8005338:	00b400ba 	.word	0x00b400ba
 800533c:	00be00c0 	.word	0x00be00c0
 8005340:	00c000be 	.word	0x00c000be
 8005344:	00ba00b4 	.word	0x00ba00b4
 8005348:	00ac00a2 	.word	0x00ac00a2
 800534c:	00030006 	.word	0x00030006
 8005350:	000a000f 	.word	0x000a000f
 8005354:	0015001c 	.word	0x0015001c
 8005358:	0024002d 	.word	0x0024002d
 800535c:	00370042 	.word	0x00370042
 8005360:	004e005b 	.word	0x004e005b
 8005364:	00690078 	.word	0x00690078
 8005368:	2000000c 	.word	0x2000000c
 800536c:	00960088 	.word	0x00960088

08005370 <D16_1CH_HTONS_VOL_HP>:
 8005370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005374:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 8005378:	b085      	sub	sp, #20
 800537a:	4681      	mov	r9, r0
 800537c:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 800537e:	6993      	ldr	r3, [r2, #24]
 8005380:	9303      	str	r3, [sp, #12]
 8005382:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 8005386:	69d3      	ldr	r3, [r2, #28]
 8005388:	9402      	str	r4, [sp, #8]
 800538a:	f8d2 a030 	ldr.w	sl, [r2, #48]	@ 0x30
 800538e:	f8d2 c020 	ldr.w	ip, [r2, #32]
 8005392:	2800      	cmp	r0, #0
 8005394:	d057      	beq.n	8005446 <D16_1CH_HTONS_VOL_HP+0xd6>
 8005396:	eb09 0b40 	add.w	fp, r9, r0, lsl #1
 800539a:	f8df e0b8 	ldr.w	lr, [pc, #184]	@ 8005454 <D16_1CH_HTONS_VOL_HP+0xe4>
 800539e:	f1a1 0802 	sub.w	r8, r1, #2
 80053a2:	4639      	mov	r1, r7
 80053a4:	465f      	mov	r7, fp
 80053a6:	46d3      	mov	fp, sl
 80053a8:	46ca      	mov	sl, r9
 80053aa:	4699      	mov	r9, r3
 80053ac:	4633      	mov	r3, r6
 80053ae:	4616      	mov	r6, r2
 80053b0:	f85a 2b02 	ldr.w	r2, [sl], #2
 80053b4:	ba52      	rev16	r2, r2
 80053b6:	b2d4      	uxtb	r4, r2
 80053b8:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80053bc:	f85e 2024 	ldr.w	r2, [lr, r4, lsl #2]
 80053c0:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 80053c4:	4491      	add	r9, r2
 80053c6:	eb00 2099 	add.w	r0, r0, r9, lsr #10
 80053ca:	f3c0 0209 	ubfx	r2, r0, #0, #10
 80053ce:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80053d2:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 80053d6:	ea4f 2990 	mov.w	r9, r0, lsr #10
 80053da:	481c      	ldr	r0, [pc, #112]	@ (800544c <D16_1CH_HTONS_VOL_HP+0xdc>)
 80053dc:	fb22 5400 	smlad	r4, r2, r0, r5
 80053e0:	481b      	ldr	r0, [pc, #108]	@ (8005450 <D16_1CH_HTONS_VOL_HP+0xe0>)
 80053e2:	fb22 f500 	smuad	r5, r2, r0
 80053e6:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 80053ea:	18e2      	adds	r2, r4, r3
 80053ec:	1a52      	subs	r2, r2, r1
 80053ee:	17d1      	asrs	r1, r2, #31
 80053f0:	fba2 230c 	umull	r2, r3, r2, ip
 80053f4:	f112 4000 	adds.w	r0, r2, #2147483648	@ 0x80000000
 80053f8:	fb0c 3301 	mla	r3, ip, r1, r3
 80053fc:	f143 0100 	adc.w	r1, r3, #0
 8005400:	e9cd 0100 	strd	r0, r1, [sp]
 8005404:	044a      	lsls	r2, r1, #17
 8005406:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800540a:	2100      	movs	r1, #0
 800540c:	9b01      	ldr	r3, [sp, #4]
 800540e:	fbcb 0102 	smlal	r0, r1, fp, r2
 8005412:	45ba      	cmp	sl, r7
 8005414:	ea4f 02a1 	mov.w	r2, r1, asr #2
 8005418:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800541c:	f302 020f 	ssat	r2, #16, r2
 8005420:	4621      	mov	r1, r4
 8005422:	f828 2f02 	strh.w	r2, [r8, #2]!
 8005426:	d1c3      	bne.n	80053b0 <D16_1CH_HTONS_VOL_HP+0x40>
 8005428:	4632      	mov	r2, r6
 800542a:	461e      	mov	r6, r3
 800542c:	464b      	mov	r3, r9
 800542e:	9902      	ldr	r1, [sp, #8]
 8005430:	61d3      	str	r3, [r2, #28]
 8005432:	9b03      	ldr	r3, [sp, #12]
 8005434:	6095      	str	r5, [r2, #8]
 8005436:	2000      	movs	r0, #0
 8005438:	60d1      	str	r1, [r2, #12]
 800543a:	e9c2 6404 	strd	r6, r4, [r2, #16]
 800543e:	6193      	str	r3, [r2, #24]
 8005440:	b005      	add	sp, #20
 8005442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005446:	463c      	mov	r4, r7
 8005448:	e7f1      	b.n	800542e <D16_1CH_HTONS_VOL_HP+0xbe>
 800544a:	bf00      	nop
 800544c:	00030001 	.word	0x00030001
 8005450:	00010003 	.word	0x00010003
 8005454:	2000000c 	.word	0x2000000c

08005458 <D24_1CH_HTONS_VOL_HP>:
 8005458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800545c:	4696      	mov	lr, r2
 800545e:	b089      	sub	sp, #36	@ 0x24
 8005460:	f8de 7030 	ldr.w	r7, [lr, #48]	@ 0x30
 8005464:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8005466:	f8de 3018 	ldr.w	r3, [lr, #24]
 800546a:	9703      	str	r7, [sp, #12]
 800546c:	f8de 7020 	ldr.w	r7, [lr, #32]
 8005470:	9306      	str	r3, [sp, #24]
 8005472:	9205      	str	r2, [sp, #20]
 8005474:	e9de 5404 	ldrd	r5, r4, [lr, #16]
 8005478:	f8de 601c 	ldr.w	r6, [lr, #28]
 800547c:	9704      	str	r7, [sp, #16]
 800547e:	e9de 3a02 	ldrd	r3, sl, [lr, #8]
 8005482:	2a00      	cmp	r2, #0
 8005484:	f000 8081 	beq.w	800558a <D24_1CH_HTONS_VOL_HP+0x132>
 8005488:	f1a1 0b02 	sub.w	fp, r1, #2
 800548c:	2700      	movs	r7, #0
 800548e:	46d9      	mov	r9, fp
 8005490:	f8cd e01c 	str.w	lr, [sp, #28]
 8005494:	46d3      	mov	fp, sl
 8005496:	f8df c100 	ldr.w	ip, [pc, #256]	@ 8005598 <D24_1CH_HTONS_VOL_HP+0x140>
 800549a:	46a8      	mov	r8, r5
 800549c:	46ba      	mov	sl, r7
 800549e:	469e      	mov	lr, r3
 80054a0:	e052      	b.n	8005548 <D24_1CH_HTONS_VOL_HP+0xf0>
 80054a2:	7842      	ldrb	r2, [r0, #1]
 80054a4:	3002      	adds	r0, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	b2d9      	uxtb	r1, r3
 80054aa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80054ae:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 80054b2:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 80054b6:	0c1b      	lsrs	r3, r3, #16
 80054b8:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80054bc:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 80054c0:	f85c 6023 	ldr.w	r6, [ip, r3, lsl #2]
 80054c4:	f3c7 0309 	ubfx	r3, r7, #0, #10
 80054c8:	f3c2 0709 	ubfx	r7, r2, #0, #10
 80054cc:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80054d0:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80054d4:	4a2e      	ldr	r2, [pc, #184]	@ (8005590 <D24_1CH_HTONS_VOL_HP+0x138>)
 80054d6:	fb23 b102 	smlad	r1, r3, r2, fp
 80054da:	4a2e      	ldr	r2, [pc, #184]	@ (8005594 <D24_1CH_HTONS_VOL_HP+0x13c>)
 80054dc:	fb23 eb02 	smlad	fp, r3, r2, lr
 80054e0:	f3c6 0e09 	ubfx	lr, r6, #0, #10
 80054e4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80054e8:	eb0b 0b4e 	add.w	fp, fp, lr, lsl #1
 80054ec:	2201      	movs	r2, #1
 80054ee:	fb23 f702 	smuad	r7, r3, r2
 80054f2:	f5a1 51d8 	sub.w	r1, r1, #6912	@ 0x1b00
 80054f6:	eb01 0208 	add.w	r2, r1, r8
 80054fa:	1b12      	subs	r2, r2, r4
 80054fc:	17d4      	asrs	r4, r2, #31
 80054fe:	4613      	mov	r3, r2
 8005500:	e9cd 3400 	strd	r3, r4, [sp]
 8005504:	9c04      	ldr	r4, [sp, #16]
 8005506:	9d01      	ldr	r5, [sp, #4]
 8005508:	fba2 2304 	umull	r2, r3, r2, r4
 800550c:	fb04 3305 	mla	r3, r4, r5, r3
 8005510:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 8005514:	f143 0500 	adc.w	r5, r3, #0
 8005518:	9b03      	ldr	r3, [sp, #12]
 800551a:	e9cd 4500 	strd	r4, r5, [sp]
 800551e:	03ea      	lsls	r2, r5, #15
 8005520:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8005524:	2500      	movs	r5, #0
 8005526:	fbc3 4502 	smlal	r4, r5, r3, r2
 800552a:	9b01      	ldr	r3, [sp, #4]
 800552c:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8005530:	10ab      	asrs	r3, r5, #2
 8005532:	f303 030f 	ssat	r3, #16, r3
 8005536:	f829 3f02 	strh.w	r3, [r9, #2]!
 800553a:	9b05      	ldr	r3, [sp, #20]
 800553c:	f10a 0a01 	add.w	sl, sl, #1
 8005540:	459a      	cmp	sl, r3
 8005542:	44be      	add	lr, r7
 8005544:	460c      	mov	r4, r1
 8005546:	d00e      	beq.n	8005566 <D24_1CH_HTONS_VOL_HP+0x10e>
 8005548:	7801      	ldrb	r1, [r0, #0]
 800554a:	78c2      	ldrb	r2, [r0, #3]
 800554c:	020b      	lsls	r3, r1, #8
 800554e:	f01a 0f01 	tst.w	sl, #1
 8005552:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8005556:	d0a4      	beq.n	80054a2 <D24_1CH_HTONS_VOL_HP+0x4a>
 8005558:	7885      	ldrb	r5, [r0, #2]
 800555a:	0212      	lsls	r2, r2, #8
 800555c:	eb02 4305 	add.w	r3, r2, r5, lsl #16
 8005560:	440b      	add	r3, r1
 8005562:	3004      	adds	r0, #4
 8005564:	e7a0      	b.n	80054a8 <D24_1CH_HTONS_VOL_HP+0x50>
 8005566:	4673      	mov	r3, lr
 8005568:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800556c:	46da      	mov	sl, fp
 800556e:	4645      	mov	r5, r8
 8005570:	e9ce 3a02 	strd	r3, sl, [lr, #8]
 8005574:	9b06      	ldr	r3, [sp, #24]
 8005576:	f8ce 601c 	str.w	r6, [lr, #28]
 800557a:	2000      	movs	r0, #0
 800557c:	e9ce 5104 	strd	r5, r1, [lr, #16]
 8005580:	f8ce 3018 	str.w	r3, [lr, #24]
 8005584:	b009      	add	sp, #36	@ 0x24
 8005586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800558a:	4621      	mov	r1, r4
 800558c:	e7f0      	b.n	8005570 <D24_1CH_HTONS_VOL_HP+0x118>
 800558e:	bf00      	nop
 8005590:	00030001 	.word	0x00030001
 8005594:	00060007 	.word	0x00060007
 8005598:	2000000c 	.word	0x2000000c

0800559c <D32_1CH_HTONS_VOL_HP>:
 800559c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a0:	4682      	mov	sl, r0
 80055a2:	b087      	sub	sp, #28
 80055a4:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 80055a6:	6993      	ldr	r3, [r2, #24]
 80055a8:	9304      	str	r3, [sp, #16]
 80055aa:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 80055ae:	69d5      	ldr	r5, [r2, #28]
 80055b0:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80055b2:	f8d2 9020 	ldr.w	r9, [r2, #32]
 80055b6:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 80055ba:	2800      	cmp	r0, #0
 80055bc:	d070      	beq.n	80056a0 <D32_1CH_HTONS_VOL_HP+0x104>
 80055be:	468e      	mov	lr, r1
 80055c0:	f8df c0f0 	ldr.w	ip, [pc, #240]	@ 80056b4 <D32_1CH_HTONS_VOL_HP+0x118>
 80055c4:	9205      	str	r2, [sp, #20]
 80055c6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80055ca:	46d3      	mov	fp, sl
 80055cc:	4638      	mov	r0, r7
 80055ce:	46ca      	mov	sl, r9
 80055d0:	9103      	str	r1, [sp, #12]
 80055d2:	4627      	mov	r7, r4
 80055d4:	4699      	mov	r9, r3
 80055d6:	f85b 1b04 	ldr.w	r1, [fp], #4
 80055da:	ba49      	rev16	r1, r1
 80055dc:	b2ca      	uxtb	r2, r1
 80055de:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80055e2:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 80055e6:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80055ea:	f3c1 4407 	ubfx	r4, r1, #16, #8
 80055ee:	0e09      	lsrs	r1, r1, #24
 80055f0:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 80055f4:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 80055f8:	f85c 5021 	ldr.w	r5, [ip, r1, lsl #2]
 80055fc:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8005600:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8005604:	eb05 2594 	add.w	r5, r5, r4, lsr #10
 8005608:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800560c:	f3c5 0109 	ubfx	r1, r5, #0, #10
 8005610:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005614:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005618:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800561c:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8005620:	4a20      	ldr	r2, [pc, #128]	@ (80056a4 <D32_1CH_HTONS_VOL_HP+0x108>)
 8005622:	fb23 8802 	smlad	r8, r3, r2, r8
 8005626:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800562a:	fb24 8102 	smlad	r1, r4, r2, r8
 800562e:	4a1e      	ldr	r2, [pc, #120]	@ (80056a8 <D32_1CH_HTONS_VOL_HP+0x10c>)
 8005630:	fb23 9802 	smlad	r8, r3, r2, r9
 8005634:	4a1d      	ldr	r2, [pc, #116]	@ (80056ac <D32_1CH_HTONS_VOL_HP+0x110>)
 8005636:	fb24 8802 	smlad	r8, r4, r2, r8
 800563a:	2201      	movs	r2, #1
 800563c:	fb23 f302 	smuad	r3, r3, r2
 8005640:	4a1b      	ldr	r2, [pc, #108]	@ (80056b0 <D32_1CH_HTONS_VOL_HP+0x114>)
 8005642:	fb24 3902 	smlad	r9, r4, r2, r3
 8005646:	f5a1 4480 	sub.w	r4, r1, #16384	@ 0x4000
 800564a:	19a2      	adds	r2, r4, r6
 800564c:	1a12      	subs	r2, r2, r0
 800564e:	17d1      	asrs	r1, r2, #31
 8005650:	fba2 230a 	umull	r2, r3, r2, sl
 8005654:	f112 4000 	adds.w	r0, r2, #2147483648	@ 0x80000000
 8005658:	fb0a 3301 	mla	r3, sl, r1, r3
 800565c:	f143 0100 	adc.w	r1, r3, #0
 8005660:	e9cd 0100 	strd	r0, r1, [sp]
 8005664:	038a      	lsls	r2, r1, #14
 8005666:	9b01      	ldr	r3, [sp, #4]
 8005668:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800566c:	2100      	movs	r1, #0
 800566e:	fbc7 0102 	smlal	r0, r1, r7, r2
 8005672:	108a      	asrs	r2, r1, #2
 8005674:	005e      	lsls	r6, r3, #1
 8005676:	f302 020f 	ssat	r2, #16, r2
 800567a:	9b03      	ldr	r3, [sp, #12]
 800567c:	f82e 2b02 	strh.w	r2, [lr], #2
 8005680:	459e      	cmp	lr, r3
 8005682:	4620      	mov	r0, r4
 8005684:	d1a7      	bne.n	80055d6 <D32_1CH_HTONS_VOL_HP+0x3a>
 8005686:	9a05      	ldr	r2, [sp, #20]
 8005688:	464b      	mov	r3, r9
 800568a:	e9c2 3802 	strd	r3, r8, [r2, #8]
 800568e:	9b04      	ldr	r3, [sp, #16]
 8005690:	61d5      	str	r5, [r2, #28]
 8005692:	2000      	movs	r0, #0
 8005694:	e9c2 6404 	strd	r6, r4, [r2, #16]
 8005698:	6193      	str	r3, [r2, #24]
 800569a:	b007      	add	sp, #28
 800569c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a0:	463c      	mov	r4, r7
 80056a2:	e7f2      	b.n	800568a <D32_1CH_HTONS_VOL_HP+0xee>
 80056a4:	00060003 	.word	0x00060003
 80056a8:	000a000c 	.word	0x000a000c
 80056ac:	000c000a 	.word	0x000c000a
 80056b0:	00030006 	.word	0x00030006
 80056b4:	2000000c 	.word	0x2000000c

080056b8 <D48_1CH_HTONS_VOL_HP>:
 80056b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056bc:	b087      	sub	sp, #28
 80056be:	6b17      	ldr	r7, [r2, #48]	@ 0x30
 80056c0:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 80056c2:	6993      	ldr	r3, [r2, #24]
 80056c4:	9702      	str	r7, [sp, #8]
 80056c6:	6a17      	ldr	r7, [r2, #32]
 80056c8:	9304      	str	r3, [sp, #16]
 80056ca:	e9d2 4904 	ldrd	r4, r9, [r2, #16]
 80056ce:	69d6      	ldr	r6, [r2, #28]
 80056d0:	9705      	str	r7, [sp, #20]
 80056d2:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 80056d6:	2d00      	cmp	r5, #0
 80056d8:	f000 8093 	beq.w	8005802 <D48_1CH_HTONS_VOL_HP+0x14a>
 80056dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056e0:	46ba      	mov	sl, r7
 80056e2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80056e6:	3902      	subs	r1, #2
 80056e8:	4f47      	ldr	r7, [pc, #284]	@ (8005808 <D48_1CH_HTONS_VOL_HP+0x150>)
 80056ea:	9503      	str	r5, [sp, #12]
 80056ec:	9101      	str	r1, [sp, #4]
 80056ee:	469e      	mov	lr, r3
 80056f0:	9205      	str	r2, [sp, #20]
 80056f2:	e9d0 3500 	ldrd	r3, r5, [r0]
 80056f6:	3006      	adds	r0, #6
 80056f8:	ba5b      	rev16	r3, r3
 80056fa:	ba6d      	rev16	r5, r5
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8005702:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8005706:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800570a:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800570e:	0e1b      	lsrs	r3, r3, #24
 8005710:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8005714:	f857 8028 	ldr.w	r8, [r7, r8, lsl #2]
 8005718:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800571c:	fa5f fb85 	uxtb.w	fp, r5
 8005720:	eb01 2192 	add.w	r1, r1, r2, lsr #10
 8005724:	f3c5 2607 	ubfx	r6, r5, #8, #8
 8005728:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 800572c:	f857 502b 	ldr.w	r5, [r7, fp, lsl #2]
 8005730:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8005734:	eb03 2398 	add.w	r3, r3, r8, lsr #10
 8005738:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800573c:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8005740:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005744:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005748:	f3c6 0b09 	ubfx	fp, r6, #0, #10
 800574c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005750:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005754:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005758:	ea43 4808 	orr.w	r8, r3, r8, lsl #16
 800575c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8005760:	ea4b 4505 	orr.w	r5, fp, r5, lsl #16
 8005764:	4b29      	ldr	r3, [pc, #164]	@ (800580c <D48_1CH_HTONS_VOL_HP+0x154>)
 8005766:	fb22 c103 	smlad	r1, r2, r3, ip
 800576a:	4b29      	ldr	r3, [pc, #164]	@ (8005810 <D48_1CH_HTONS_VOL_HP+0x158>)
 800576c:	fb28 1103 	smlad	r1, r8, r3, r1
 8005770:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005774:	fb25 1103 	smlad	r1, r5, r3, r1
 8005778:	4b26      	ldr	r3, [pc, #152]	@ (8005814 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800577a:	fb22 ec03 	smlad	ip, r2, r3, lr
 800577e:	f04f 131b 	mov.w	r3, #1769499	@ 0x1b001b
 8005782:	fb28 cc03 	smlad	ip, r8, r3, ip
 8005786:	4b24      	ldr	r3, [pc, #144]	@ (8005818 <D48_1CH_HTONS_VOL_HP+0x160>)
 8005788:	fb25 cc03 	smlad	ip, r5, r3, ip
 800578c:	f04f 0e01 	mov.w	lr, #1
 8005790:	fb22 f20e 	smuad	r2, r2, lr
 8005794:	4b21      	ldr	r3, [pc, #132]	@ (800581c <D48_1CH_HTONS_VOL_HP+0x164>)
 8005796:	fb28 2803 	smlad	r8, r8, r3, r2
 800579a:	4b21      	ldr	r3, [pc, #132]	@ (8005820 <D48_1CH_HTONS_VOL_HP+0x168>)
 800579c:	fb25 8e03 	smlad	lr, r5, r3, r8
 80057a0:	f5a1 4158 	sub.w	r1, r1, #55296	@ 0xd800
 80057a4:	190a      	adds	r2, r1, r4
 80057a6:	eba2 0209 	sub.w	r2, r2, r9
 80057aa:	17d5      	asrs	r5, r2, #31
 80057ac:	fba2 230a 	umull	r2, r3, r2, sl
 80057b0:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 80057b4:	fb0a 3305 	mla	r3, sl, r5, r3
 80057b8:	f143 0500 	adc.w	r5, r3, #0
 80057bc:	9b02      	ldr	r3, [sp, #8]
 80057be:	032a      	lsls	r2, r5, #12
 80057c0:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 80057c4:	f04f 0900 	mov.w	r9, #0
 80057c8:	fbc3 8902 	smlal	r8, r9, r3, r2
 80057cc:	9a01      	ldr	r2, [sp, #4]
 80057ce:	ea4f 03a9 	mov.w	r3, r9, asr #2
 80057d2:	f303 030f 	ssat	r3, #16, r3
 80057d6:	f822 3f02 	strh.w	r3, [r2, #2]!
 80057da:	9b03      	ldr	r3, [sp, #12]
 80057dc:	9201      	str	r2, [sp, #4]
 80057de:	4283      	cmp	r3, r0
 80057e0:	ea4f 0445 	mov.w	r4, r5, lsl #1
 80057e4:	4689      	mov	r9, r1
 80057e6:	d184      	bne.n	80056f2 <D48_1CH_HTONS_VOL_HP+0x3a>
 80057e8:	9a05      	ldr	r2, [sp, #20]
 80057ea:	4673      	mov	r3, lr
 80057ec:	e9c2 3c02 	strd	r3, ip, [r2, #8]
 80057f0:	9b04      	ldr	r3, [sp, #16]
 80057f2:	61d6      	str	r6, [r2, #28]
 80057f4:	2000      	movs	r0, #0
 80057f6:	e9c2 4104 	strd	r4, r1, [r2, #16]
 80057fa:	6193      	str	r3, [r2, #24]
 80057fc:	b007      	add	sp, #28
 80057fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005802:	4649      	mov	r1, r9
 8005804:	e7f2      	b.n	80057ec <D48_1CH_HTONS_VOL_HP+0x134>
 8005806:	bf00      	nop
 8005808:	2000000c 	.word	0x2000000c
 800580c:	000f000a 	.word	0x000f000a
 8005810:	00060003 	.word	0x00060003
 8005814:	00150019 	.word	0x00150019
 8005818:	00190015 	.word	0x00190015
 800581c:	00030006 	.word	0x00030006
 8005820:	000a000f 	.word	0x000a000f

08005824 <D64_1CH_HTONS_VOL_HP>:
 8005824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005828:	b087      	sub	sp, #28
 800582a:	6913      	ldr	r3, [r2, #16]
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	e9d2 4305 	ldrd	r4, r3, [r2, #20]
 8005832:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 8005834:	9601      	str	r6, [sp, #4]
 8005836:	4681      	mov	r9, r0
 8005838:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 800583a:	6a16      	ldr	r6, [r2, #32]
 800583c:	9304      	str	r3, [sp, #16]
 800583e:	e9d2 5802 	ldrd	r5, r8, [r2, #8]
 8005842:	69d3      	ldr	r3, [r2, #28]
 8005844:	9602      	str	r6, [sp, #8]
 8005846:	2800      	cmp	r0, #0
 8005848:	f000 809d 	beq.w	8005986 <D64_1CH_HTONS_VOL_HP+0x162>
 800584c:	468e      	mov	lr, r1
 800584e:	f8df c170 	ldr.w	ip, [pc, #368]	@ 80059c0 <D64_1CH_HTONS_VOL_HP+0x19c>
 8005852:	9205      	str	r2, [sp, #20]
 8005854:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8005858:	9103      	str	r1, [sp, #12]
 800585a:	4622      	mov	r2, r4
 800585c:	4619      	mov	r1, r3
 800585e:	f859 3b08 	ldr.w	r3, [r9], #8
 8005862:	f859 6c04 	ldr.w	r6, [r9, #-4]
 8005866:	ba5b      	rev16	r3, r3
 8005868:	ba76      	rev16	r6, r6
 800586a:	b2dc      	uxtb	r4, r3
 800586c:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8005870:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8005874:	f85c 4020 	ldr.w	r4, [ip, r0, lsl #2]
 8005878:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800587c:	0e1b      	lsrs	r3, r3, #24
 800587e:	eb01 0b07 	add.w	fp, r1, r7
 8005882:	f85c 7020 	ldr.w	r7, [ip, r0, lsl #2]
 8005886:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 800588a:	b2f1      	uxtb	r1, r6
 800588c:	eb04 249b 	add.w	r4, r4, fp, lsr #10
 8005890:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8005894:	eb07 2a94 	add.w	sl, r7, r4, lsr #10
 8005898:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 800589c:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80058a0:	f3c6 4107 	ubfx	r1, r6, #16, #8
 80058a4:	eb00 209a 	add.w	r0, r0, sl, lsr #10
 80058a8:	0e36      	lsrs	r6, r6, #24
 80058aa:	eb07 2790 	add.w	r7, r7, r0, lsr #10
 80058ae:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 80058b2:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 80058b6:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80058ba:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 80058be:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 80058c2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80058c6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80058ca:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80058ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058d2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80058d6:	ea44 4b0b 	orr.w	fp, r4, fp, lsl #16
 80058da:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80058de:	f3c6 0409 	ubfx	r4, r6, #0, #10
 80058e2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80058e6:	ea40 4a0a 	orr.w	sl, r0, sl, lsl #16
 80058ea:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 80058ee:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 80058f2:	4b2b      	ldr	r3, [pc, #172]	@ (80059a0 <D64_1CH_HTONS_VOL_HP+0x17c>)
 80058f4:	0ab1      	lsrs	r1, r6, #10
 80058f6:	fb2b 8803 	smlad	r8, fp, r3, r8
 80058fa:	4b2a      	ldr	r3, [pc, #168]	@ (80059a4 <D64_1CH_HTONS_VOL_HP+0x180>)
 80058fc:	fb2a 8803 	smlad	r8, sl, r3, r8
 8005900:	4b29      	ldr	r3, [pc, #164]	@ (80059a8 <D64_1CH_HTONS_VOL_HP+0x184>)
 8005902:	fb27 8803 	smlad	r8, r7, r3, r8
 8005906:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 800590a:	fb20 8604 	smlad	r6, r0, r4, r8
 800590e:	4b27      	ldr	r3, [pc, #156]	@ (80059ac <D64_1CH_HTONS_VOL_HP+0x188>)
 8005910:	fb2b 5803 	smlad	r8, fp, r3, r5
 8005914:	fb20 8813 	smladx	r8, r0, r3, r8
 8005918:	4b25      	ldr	r3, [pc, #148]	@ (80059b0 <D64_1CH_HTONS_VOL_HP+0x18c>)
 800591a:	fb2a 8803 	smlad	r8, sl, r3, r8
 800591e:	fb27 8813 	smladx	r8, r7, r3, r8
 8005922:	2401      	movs	r4, #1
 8005924:	fb2b fb04 	smuad	fp, fp, r4
 8005928:	4b22      	ldr	r3, [pc, #136]	@ (80059b4 <D64_1CH_HTONS_VOL_HP+0x190>)
 800592a:	fb2a ba03 	smlad	sl, sl, r3, fp
 800592e:	4b22      	ldr	r3, [pc, #136]	@ (80059b8 <D64_1CH_HTONS_VOL_HP+0x194>)
 8005930:	fb27 a703 	smlad	r7, r7, r3, sl
 8005934:	4b21      	ldr	r3, [pc, #132]	@ (80059bc <D64_1CH_HTONS_VOL_HP+0x198>)
 8005936:	fb20 7503 	smlad	r5, r0, r3, r7
 800593a:	9b00      	ldr	r3, [sp, #0]
 800593c:	9802      	ldr	r0, [sp, #8]
 800593e:	f5a6 3400 	sub.w	r4, r6, #131072	@ 0x20000
 8005942:	4423      	add	r3, r4
 8005944:	1a9a      	subs	r2, r3, r2
 8005946:	17d7      	asrs	r7, r2, #31
 8005948:	fba2 2300 	umull	r2, r3, r2, r0
 800594c:	fb00 3307 	mla	r3, r0, r7, r3
 8005950:	f112 4a00 	adds.w	sl, r2, #2147483648	@ 0x80000000
 8005954:	f143 0b00 	adc.w	fp, r3, #0
 8005958:	9b01      	ldr	r3, [sp, #4]
 800595a:	ea4f 22cb 	mov.w	r2, fp, lsl #11
 800595e:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 8005962:	2700      	movs	r7, #0
 8005964:	fbc3 6702 	smlal	r6, r7, r3, r2
 8005968:	ea4f 034b 	mov.w	r3, fp, lsl #1
 800596c:	10ba      	asrs	r2, r7, #2
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	f302 020f 	ssat	r2, #16, r2
 8005974:	9b03      	ldr	r3, [sp, #12]
 8005976:	f82e 2b02 	strh.w	r2, [lr], #2
 800597a:	459e      	cmp	lr, r3
 800597c:	4622      	mov	r2, r4
 800597e:	f47f af6e 	bne.w	800585e <D64_1CH_HTONS_VOL_HP+0x3a>
 8005982:	9a05      	ldr	r2, [sp, #20]
 8005984:	460b      	mov	r3, r1
 8005986:	61d3      	str	r3, [r2, #28]
 8005988:	9b00      	ldr	r3, [sp, #0]
 800598a:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800598e:	9b04      	ldr	r3, [sp, #16]
 8005990:	6193      	str	r3, [r2, #24]
 8005992:	2000      	movs	r0, #0
 8005994:	e9c2 5802 	strd	r5, r8, [r2, #8]
 8005998:	b007      	add	sp, #28
 800599a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800599e:	bf00      	nop
 80059a0:	001c0015 	.word	0x001c0015
 80059a4:	000f000a 	.word	0x000f000a
 80059a8:	00060003 	.word	0x00060003
 80059ac:	0024002a 	.word	0x0024002a
 80059b0:	002e0030 	.word	0x002e0030
 80059b4:	00030006 	.word	0x00030006
 80059b8:	000a000f 	.word	0x000a000f
 80059bc:	0015001c 	.word	0x0015001c
 80059c0:	2000000c 	.word	0x2000000c

080059c4 <D80_1CH_HTONS_VOL_HP>:
 80059c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c8:	4615      	mov	r5, r2
 80059ca:	b089      	sub	sp, #36	@ 0x24
 80059cc:	e9d5 c402 	ldrd	ip, r4, [r5, #8]
 80059d0:	692b      	ldr	r3, [r5, #16]
 80059d2:	9301      	str	r3, [sp, #4]
 80059d4:	e9d5 6305 	ldrd	r6, r3, [r5, #20]
 80059d8:	9400      	str	r4, [sp, #0]
 80059da:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 80059dc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80059de:	9403      	str	r4, [sp, #12]
 80059e0:	6a2c      	ldr	r4, [r5, #32]
 80059e2:	9306      	str	r3, [sp, #24]
 80059e4:	9404      	str	r4, [sp, #16]
 80059e6:	69eb      	ldr	r3, [r5, #28]
 80059e8:	2a00      	cmp	r2, #0
 80059ea:	f000 80d3 	beq.w	8005b94 <D80_1CH_HTONS_VOL_HP+0x1d0>
 80059ee:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80059f2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80059f6:	9205      	str	r2, [sp, #20]
 80059f8:	4c67      	ldr	r4, [pc, #412]	@ (8005b98 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 80059fa:	9507      	str	r5, [sp, #28]
 80059fc:	1e8a      	subs	r2, r1, #2
 80059fe:	9202      	str	r2, [sp, #8]
 8005a00:	469b      	mov	fp, r3
 8005a02:	6807      	ldr	r7, [r0, #0]
 8005a04:	6842      	ldr	r2, [r0, #4]
 8005a06:	6883      	ldr	r3, [r0, #8]
 8005a08:	300a      	adds	r0, #10
 8005a0a:	ba7f      	rev16	r7, r7
 8005a0c:	ba52      	rev16	r2, r2
 8005a0e:	ba5b      	rev16	r3, r3
 8005a10:	b2fd      	uxtb	r5, r7
 8005a12:	f3c7 2107 	ubfx	r1, r7, #8, #8
 8005a16:	f854 e025 	ldr.w	lr, [r4, r5, lsl #2]
 8005a1a:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8005a1e:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8005a22:	44f3      	add	fp, lr
 8005a24:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8005a28:	0e3f      	lsrs	r7, r7, #24
 8005a2a:	fa5f fe82 	uxtb.w	lr, r2
 8005a2e:	eb01 219b 	add.w	r1, r1, fp, lsr #10
 8005a32:	eb05 2a91 	add.w	sl, r5, r1, lsr #10
 8005a36:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 8005a3a:	f854 902e 	ldr.w	r9, [r4, lr, lsl #2]
 8005a3e:	f3c2 2507 	ubfx	r5, r2, #8, #8
 8005a42:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8005a46:	eb07 279a 	add.w	r7, r7, sl, lsr #10
 8005a4a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8005a4e:	f854 802e 	ldr.w	r8, [r4, lr, lsl #2]
 8005a52:	0e12      	lsrs	r2, r2, #24
 8005a54:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8005a58:	fa5f fe83 	uxtb.w	lr, r3
 8005a5c:	eb05 2599 	add.w	r5, r5, r9, lsr #10
 8005a60:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a64:	f854 e02e 	ldr.w	lr, [r4, lr, lsl #2]
 8005a68:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8005a6c:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8005a70:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 8005a74:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8005a78:	eb0e 2e92 	add.w	lr, lr, r2, lsr #10
 8005a7c:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 8005a80:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8005a84:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005a88:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005a8c:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8005a90:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005a94:	ea41 410b 	orr.w	r1, r1, fp, lsl #16
 8005a98:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005a9c:	f3c3 0b09 	ubfx	fp, r3, #0, #10
 8005aa0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005aa4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005aa8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005aac:	ea42 4808 	orr.w	r8, r2, r8, lsl #16
 8005ab0:	ea4b 4e0e 	orr.w	lr, fp, lr, lsl #16
 8005ab4:	ea47 470a 	orr.w	r7, r7, sl, lsl #16
 8005ab8:	ea4f 2b93 	mov.w	fp, r3, lsr #10
 8005abc:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8005ac0:	4b36      	ldr	r3, [pc, #216]	@ (8005b9c <D80_1CH_HTONS_VOL_HP+0x1d8>)
 8005ac2:	9a00      	ldr	r2, [sp, #0]
 8005ac4:	fb21 2303 	smlad	r3, r1, r3, r2
 8005ac8:	4a35      	ldr	r2, [pc, #212]	@ (8005ba0 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 8005aca:	fb27 3302 	smlad	r3, r7, r2, r3
 8005ace:	4a35      	ldr	r2, [pc, #212]	@ (8005ba4 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8005ad0:	fb25 3302 	smlad	r3, r5, r2, r3
 8005ad4:	4a34      	ldr	r2, [pc, #208]	@ (8005ba8 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8005ad6:	fb28 3302 	smlad	r3, r8, r2, r3
 8005ada:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005ade:	fb2e 3302 	smlad	r3, lr, r2, r3
 8005ae2:	4a32      	ldr	r2, [pc, #200]	@ (8005bac <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8005ae4:	fb21 cc02 	smlad	ip, r1, r2, ip
 8005ae8:	4a31      	ldr	r2, [pc, #196]	@ (8005bb0 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8005aea:	fb27 cc02 	smlad	ip, r7, r2, ip
 8005aee:	f04f 194b 	mov.w	r9, #4915275	@ 0x4b004b
 8005af2:	fb25 c909 	smlad	r9, r5, r9, ip
 8005af6:	4a2f      	ldr	r2, [pc, #188]	@ (8005bb4 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8005af8:	fb28 9902 	smlad	r9, r8, r2, r9
 8005afc:	4a2e      	ldr	r2, [pc, #184]	@ (8005bb8 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8005afe:	fb2e 9202 	smlad	r2, lr, r2, r9
 8005b02:	f04f 0a01 	mov.w	sl, #1
 8005b06:	9200      	str	r2, [sp, #0]
 8005b08:	fb21 fa0a 	smuad	sl, r1, sl
 8005b0c:	4a2b      	ldr	r2, [pc, #172]	@ (8005bbc <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8005b0e:	fb27 a702 	smlad	r7, r7, r2, sl
 8005b12:	4a2b      	ldr	r2, [pc, #172]	@ (8005bc0 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8005b14:	fb25 7702 	smlad	r7, r5, r2, r7
 8005b18:	4a2a      	ldr	r2, [pc, #168]	@ (8005bc4 <D80_1CH_HTONS_VOL_HP+0x200>)
 8005b1a:	fb28 7202 	smlad	r2, r8, r2, r7
 8005b1e:	4d2a      	ldr	r5, [pc, #168]	@ (8005bc8 <D80_1CH_HTONS_VOL_HP+0x204>)
 8005b20:	fb2e 2c05 	smlad	ip, lr, r5, r2
 8005b24:	f5a3 327a 	sub.w	r2, r3, #256000	@ 0x3e800
 8005b28:	9b01      	ldr	r3, [sp, #4]
 8005b2a:	9903      	ldr	r1, [sp, #12]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	1b9e      	subs	r6, r3, r6
 8005b30:	9b04      	ldr	r3, [sp, #16]
 8005b32:	ea4f 79e6 	mov.w	r9, r6, asr #31
 8005b36:	fba6 5603 	umull	r5, r6, r6, r3
 8005b3a:	fb03 6309 	mla	r3, r3, r9, r6
 8005b3e:	462e      	mov	r6, r5
 8005b40:	f116 4600 	adds.w	r6, r6, #2147483648	@ 0x80000000
 8005b44:	f143 0700 	adc.w	r7, r3, #0
 8005b48:	02bb      	lsls	r3, r7, #10
 8005b4a:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8005b4e:	f04f 0900 	mov.w	r9, #0
 8005b52:	fbc1 8903 	smlal	r8, r9, r1, r3
 8005b56:	9902      	ldr	r1, [sp, #8]
 8005b58:	007b      	lsls	r3, r7, #1
 8005b5a:	9301      	str	r3, [sp, #4]
 8005b5c:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8005b60:	f303 030f 	ssat	r3, #16, r3
 8005b64:	f821 3f02 	strh.w	r3, [r1, #2]!
 8005b68:	9b05      	ldr	r3, [sp, #20]
 8005b6a:	9102      	str	r1, [sp, #8]
 8005b6c:	4283      	cmp	r3, r0
 8005b6e:	4616      	mov	r6, r2
 8005b70:	f47f af47 	bne.w	8005a02 <D80_1CH_HTONS_VOL_HP+0x3e>
 8005b74:	9d07      	ldr	r5, [sp, #28]
 8005b76:	465b      	mov	r3, fp
 8005b78:	61eb      	str	r3, [r5, #28]
 8005b7a:	9b01      	ldr	r3, [sp, #4]
 8005b7c:	9900      	ldr	r1, [sp, #0]
 8005b7e:	f8c5 c008 	str.w	ip, [r5, #8]
 8005b82:	e9c5 3204 	strd	r3, r2, [r5, #16]
 8005b86:	9b06      	ldr	r3, [sp, #24]
 8005b88:	60e9      	str	r1, [r5, #12]
 8005b8a:	2000      	movs	r0, #0
 8005b8c:	61ab      	str	r3, [r5, #24]
 8005b8e:	b009      	add	sp, #36	@ 0x24
 8005b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b94:	4632      	mov	r2, r6
 8005b96:	e7ef      	b.n	8005b78 <D80_1CH_HTONS_VOL_HP+0x1b4>
 8005b98:	2000000c 	.word	0x2000000c
 8005b9c:	002d0024 	.word	0x002d0024
 8005ba0:	001c0015 	.word	0x001c0015
 8005ba4:	000f000a 	.word	0x000f000a
 8005ba8:	00060003 	.word	0x00060003
 8005bac:	0037003f 	.word	0x0037003f
 8005bb0:	00450049 	.word	0x00450049
 8005bb4:	00490045 	.word	0x00490045
 8005bb8:	003f0037 	.word	0x003f0037
 8005bbc:	00030006 	.word	0x00030006
 8005bc0:	000a000f 	.word	0x000a000f
 8005bc4:	0015001c 	.word	0x0015001c
 8005bc8:	0024002d 	.word	0x0024002d

08005bcc <D128_1CH_HTONS_VOL_HP>:
 8005bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd0:	b093      	sub	sp, #76	@ 0x4c
 8005bd2:	6914      	ldr	r4, [r2, #16]
 8005bd4:	9404      	str	r4, [sp, #16]
 8005bd6:	6954      	ldr	r4, [r2, #20]
 8005bd8:	9406      	str	r4, [sp, #24]
 8005bda:	6994      	ldr	r4, [r2, #24]
 8005bdc:	9410      	str	r4, [sp, #64]	@ 0x40
 8005bde:	6894      	ldr	r4, [r2, #8]
 8005be0:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8005be2:	9403      	str	r4, [sp, #12]
 8005be4:	68d4      	ldr	r4, [r2, #12]
 8005be6:	9211      	str	r2, [sp, #68]	@ 0x44
 8005be8:	69d6      	ldr	r6, [r2, #28]
 8005bea:	9402      	str	r4, [sp, #8]
 8005bec:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8005bee:	6a12      	ldr	r2, [r2, #32]
 8005bf0:	940d      	str	r4, [sp, #52]	@ 0x34
 8005bf2:	920e      	str	r2, [sp, #56]	@ 0x38
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 814a 	beq.w	8005e8e <D128_1CH_HTONS_VOL_HP+0x2c2>
 8005bfa:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8005bfe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005c00:	f8df 82c8 	ldr.w	r8, [pc, #712]	@ 8005ecc <D128_1CH_HTONS_VOL_HP+0x300>
 8005c04:	9107      	str	r1, [sp, #28]
 8005c06:	f100 0310 	add.w	r3, r0, #16
 8005c0a:	469b      	mov	fp, r3
 8005c0c:	9605      	str	r6, [sp, #20]
 8005c0e:	e95b 1204 	ldrd	r1, r2, [fp, #-16]
 8005c12:	e95b 3002 	ldrd	r3, r0, [fp, #-8]
 8005c16:	ba49      	rev16	r1, r1
 8005c18:	ba52      	rev16	r2, r2
 8005c1a:	ba5b      	rev16	r3, r3
 8005c1c:	fa90 fa90 	rev16.w	sl, r0
 8005c20:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8005c24:	b2cc      	uxtb	r4, r1
 8005c26:	9e05      	ldr	r6, [sp, #20]
 8005c28:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8005c2c:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 8005c30:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8005c34:	0e09      	lsrs	r1, r1, #24
 8005c36:	4426      	add	r6, r4
 8005c38:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8005c3c:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 8005c40:	b2d0      	uxtb	r0, r2
 8005c42:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8005c46:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005c4a:	f858 c020 	ldr.w	ip, [r8, r0, lsl #2]
 8005c4e:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8005c52:	eb04 2495 	add.w	r4, r4, r5, lsr #10
 8005c56:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8005c5a:	0e12      	lsrs	r2, r2, #24
 8005c5c:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8005c60:	9401      	str	r4, [sp, #4]
 8005c62:	eb0c 2997 	add.w	r9, ip, r7, lsr #10
 8005c66:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8005c6a:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8005c6e:	9705      	str	r7, [sp, #20]
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	eb01 2199 	add.w	r1, r1, r9, lsr #10
 8005c76:	eb00 2e91 	add.w	lr, r0, r1, lsr #10
 8005c7a:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8005c7e:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8005c82:	eb00 2c94 	add.w	ip, r0, r4, lsr #10
 8005c86:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005c8a:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8005c8e:	0e1b      	lsrs	r3, r3, #24
 8005c90:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8005c94:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8005c98:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8005c9c:	fa5f f38a 	uxtb.w	r3, sl
 8005ca0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005ca4:	960a      	str	r6, [sp, #40]	@ 0x28
 8005ca6:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8005caa:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 8005cae:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005cb2:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8005cb6:	950b      	str	r5, [sp, #44]	@ 0x2c
 8005cb8:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8005cbc:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8005cc0:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8005cc4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8005cc8:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8005ccc:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8005cd0:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8005cd4:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8005cd8:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 8005cdc:	9308      	str	r3, [sp, #32]
 8005cde:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005ce2:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8005ce6:	920c      	str	r2, [sp, #48]	@ 0x30
 8005ce8:	9b01      	ldr	r3, [sp, #4]
 8005cea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005cec:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8005cf0:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8005cf4:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8005cf8:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8005cfc:	9b05      	ldr	r3, [sp, #20]
 8005cfe:	f8cd 9014 	str.w	r9, [sp, #20]
 8005d02:	4691      	mov	r9, r2
 8005d04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d06:	f8cd a004 	str.w	sl, [sp, #4]
 8005d0a:	ea49 4902 	orr.w	r9, r9, r2, lsl #16
 8005d0e:	9a01      	ldr	r2, [sp, #4]
 8005d10:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8005d14:	ea4a 4a02 	orr.w	sl, sl, r2, lsl #16
 8005d18:	9b08      	ldr	r3, [sp, #32]
 8005d1a:	9a05      	ldr	r2, [sp, #20]
 8005d1c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005d20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005d24:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005d26:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8005d2a:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8005d2e:	9201      	str	r2, [sp, #4]
 8005d30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d32:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005d36:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005d3a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005d3e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005d42:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005d46:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8005d4a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005d4e:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8005d52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d56:	0a92      	lsrs	r2, r2, #10
 8005d58:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 8005d5c:	9205      	str	r2, [sp, #20]
 8005d5e:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8005d62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8005d66:	4d4b      	ldr	r5, [pc, #300]	@ (8005e94 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8005d68:	9a02      	ldr	r2, [sp, #8]
 8005d6a:	fb29 2505 	smlad	r5, r9, r5, r2
 8005d6e:	4a4a      	ldr	r2, [pc, #296]	@ (8005e98 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8005d70:	fb2a 5502 	smlad	r5, sl, r2, r5
 8005d74:	4a49      	ldr	r2, [pc, #292]	@ (8005e9c <D128_1CH_HTONS_VOL_HP+0x2d0>)
 8005d76:	fb21 5502 	smlad	r5, r1, r2, r5
 8005d7a:	4a49      	ldr	r2, [pc, #292]	@ (8005ea0 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8005d7c:	fb24 5502 	smlad	r5, r4, r2, r5
 8005d80:	4a48      	ldr	r2, [pc, #288]	@ (8005ea4 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 8005d82:	9e01      	ldr	r6, [sp, #4]
 8005d84:	fb26 5502 	smlad	r5, r6, r2, r5
 8005d88:	4a47      	ldr	r2, [pc, #284]	@ (8005ea8 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 8005d8a:	fb20 5502 	smlad	r5, r0, r2, r5
 8005d8e:	4a47      	ldr	r2, [pc, #284]	@ (8005eac <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8005d90:	fb23 5502 	smlad	r5, r3, r2, r5
 8005d94:	f44f 3c80 	mov.w	ip, #65536	@ 0x10000
 8005d98:	fb27 520c 	smlad	r2, r7, ip, r5
 8005d9c:	4616      	mov	r6, r2
 8005d9e:	9d03      	ldr	r5, [sp, #12]
 8005da0:	4a43      	ldr	r2, [pc, #268]	@ (8005eb0 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8005da2:	fb29 5c02 	smlad	ip, r9, r2, r5
 8005da6:	4a43      	ldr	r2, [pc, #268]	@ (8005eb4 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 8005da8:	fb2a ce02 	smlad	lr, sl, r2, ip
 8005dac:	f8df c120 	ldr.w	ip, [pc, #288]	@ 8005ed0 <D128_1CH_HTONS_VOL_HP+0x304>
 8005db0:	fb21 ec0c 	smlad	ip, r1, ip, lr
 8005db4:	f8df e11c 	ldr.w	lr, [pc, #284]	@ 8005ed4 <D128_1CH_HTONS_VOL_HP+0x308>
 8005db8:	fb24 cc0e 	smlad	ip, r4, lr, ip
 8005dbc:	f8df e118 	ldr.w	lr, [pc, #280]	@ 8005ed8 <D128_1CH_HTONS_VOL_HP+0x30c>
 8005dc0:	9d01      	ldr	r5, [sp, #4]
 8005dc2:	fb25 ce0e 	smlad	lr, r5, lr, ip
 8005dc6:	f8df c114 	ldr.w	ip, [pc, #276]	@ 8005edc <D128_1CH_HTONS_VOL_HP+0x310>
 8005dca:	fb20 ee0c 	smlad	lr, r0, ip, lr
 8005dce:	f8df c110 	ldr.w	ip, [pc, #272]	@ 8005ee0 <D128_1CH_HTONS_VOL_HP+0x314>
 8005dd2:	fb23 ec0c 	smlad	ip, r3, ip, lr
 8005dd6:	f8df e10c 	ldr.w	lr, [pc, #268]	@ 8005ee4 <D128_1CH_HTONS_VOL_HP+0x318>
 8005dda:	fb27 c20e 	smlad	r2, r7, lr, ip
 8005dde:	f04f 0c01 	mov.w	ip, #1
 8005de2:	9202      	str	r2, [sp, #8]
 8005de4:	fb29 fc0c 	smuad	ip, r9, ip
 8005de8:	f8df 90fc 	ldr.w	r9, [pc, #252]	@ 8005ee8 <D128_1CH_HTONS_VOL_HP+0x31c>
 8005dec:	fb2a ca09 	smlad	sl, sl, r9, ip
 8005df0:	f8df 90f8 	ldr.w	r9, [pc, #248]	@ 8005eec <D128_1CH_HTONS_VOL_HP+0x320>
 8005df4:	fb21 a909 	smlad	r9, r1, r9, sl
 8005df8:	492f      	ldr	r1, [pc, #188]	@ (8005eb8 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 8005dfa:	fb24 9901 	smlad	r9, r4, r1, r9
 8005dfe:	492f      	ldr	r1, [pc, #188]	@ (8005ebc <D128_1CH_HTONS_VOL_HP+0x2f0>)
 8005e00:	fb25 9901 	smlad	r9, r5, r1, r9
 8005e04:	492e      	ldr	r1, [pc, #184]	@ (8005ec0 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 8005e06:	fb20 9901 	smlad	r9, r0, r1, r9
 8005e0a:	492e      	ldr	r1, [pc, #184]	@ (8005ec4 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 8005e0c:	fb23 9301 	smlad	r3, r3, r1, r9
 8005e10:	482d      	ldr	r0, [pc, #180]	@ (8005ec8 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 8005e12:	fb27 3300 	smlad	r3, r7, r0, r3
 8005e16:	9303      	str	r3, [sp, #12]
 8005e18:	9b04      	ldr	r3, [sp, #16]
 8005e1a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8005e1c:	f5a6 1580 	sub.w	r5, r6, #1048576	@ 0x100000
 8005e20:	442b      	add	r3, r5
 8005e22:	461a      	mov	r2, r3
 8005e24:	9b06      	ldr	r3, [sp, #24]
 8005e26:	9506      	str	r5, [sp, #24]
 8005e28:	1ad2      	subs	r2, r2, r3
 8005e2a:	17d1      	asrs	r1, r2, #31
 8005e2c:	fba2 2304 	umull	r2, r3, r2, r4
 8005e30:	fb04 3301 	mla	r3, r4, r1, r3
 8005e34:	f112 4900 	adds.w	r9, r2, #2147483648	@ 0x80000000
 8005e38:	f143 0a00 	adc.w	sl, r3, #0
 8005e3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e3e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8005e42:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8005e46:	2100      	movs	r1, #0
 8005e48:	fbc3 0102 	smlal	r0, r1, r3, r2
 8005e4c:	9b07      	ldr	r3, [sp, #28]
 8005e4e:	108a      	asrs	r2, r1, #2
 8005e50:	f302 020f 	ssat	r2, #16, r2
 8005e54:	f823 2b02 	strh.w	r2, [r3], #2
 8005e58:	ea4f 024a 	mov.w	r2, sl, lsl #1
 8005e5c:	9204      	str	r2, [sp, #16]
 8005e5e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005e60:	9307      	str	r3, [sp, #28]
 8005e62:	4293      	cmp	r3, r2
 8005e64:	f10b 0b10 	add.w	fp, fp, #16
 8005e68:	f47f aed1 	bne.w	8005c0e <D128_1CH_HTONS_VOL_HP+0x42>
 8005e6c:	9e05      	ldr	r6, [sp, #20]
 8005e6e:	4629      	mov	r1, r5
 8005e70:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005e72:	9803      	ldr	r0, [sp, #12]
 8005e74:	6098      	str	r0, [r3, #8]
 8005e76:	9802      	ldr	r0, [sp, #8]
 8005e78:	60d8      	str	r0, [r3, #12]
 8005e7a:	9804      	ldr	r0, [sp, #16]
 8005e7c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8005e7e:	61de      	str	r6, [r3, #28]
 8005e80:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005e84:	2000      	movs	r0, #0
 8005e86:	619a      	str	r2, [r3, #24]
 8005e88:	b013      	add	sp, #76	@ 0x4c
 8005e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e8e:	9906      	ldr	r1, [sp, #24]
 8005e90:	e7ee      	b.n	8005e70 <D128_1CH_HTONS_VOL_HP+0x2a4>
 8005e92:	bf00      	nop
 8005e94:	00780069 	.word	0x00780069
 8005e98:	005b004e 	.word	0x005b004e
 8005e9c:	00420037 	.word	0x00420037
 8005ea0:	002d0024 	.word	0x002d0024
 8005ea4:	001c0015 	.word	0x001c0015
 8005ea8:	000f000a 	.word	0x000f000a
 8005eac:	00060003 	.word	0x00060003
 8005eb0:	00880096 	.word	0x00880096
 8005eb4:	00a200ac 	.word	0x00a200ac
 8005eb8:	0015001c 	.word	0x0015001c
 8005ebc:	0024002d 	.word	0x0024002d
 8005ec0:	00370042 	.word	0x00370042
 8005ec4:	004e005b 	.word	0x004e005b
 8005ec8:	00690078 	.word	0x00690078
 8005ecc:	2000000c 	.word	0x2000000c
 8005ed0:	00b400ba 	.word	0x00b400ba
 8005ed4:	00be00c0 	.word	0x00be00c0
 8005ed8:	00c000be 	.word	0x00c000be
 8005edc:	00ba00b4 	.word	0x00ba00b4
 8005ee0:	00ac00a2 	.word	0x00ac00a2
 8005ee4:	00960088 	.word	0x00960088
 8005ee8:	00030006 	.word	0x00030006
 8005eec:	000a000f 	.word	0x000a000f

08005ef0 <PDM_Filter_Init>:
 8005ef0:	4a59      	ldr	r2, [pc, #356]	@ (8006058 <PDM_Filter_Init+0x168>)
 8005ef2:	495a      	ldr	r1, [pc, #360]	@ (800605c <PDM_Filter_Init+0x16c>)
 8005ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ef6:	6813      	ldr	r3, [r2, #0]
 8005ef8:	f023 0301 	bic.w	r3, r3, #1
 8005efc:	6013      	str	r3, [r2, #0]
 8005efe:	680b      	ldr	r3, [r1, #0]
 8005f00:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8005f04:	4013      	ands	r3, r2
 8005f06:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8005f0a:	42ab      	cmp	r3, r5
 8005f0c:	4604      	mov	r4, r0
 8005f0e:	d044      	beq.n	8005f9a <PDM_Filter_Init+0xaa>
 8005f10:	680b      	ldr	r3, [r1, #0]
 8005f12:	f24c 2170 	movw	r1, #49776	@ 0xc270
 8005f16:	401a      	ands	r2, r3
 8005f18:	428a      	cmp	r2, r1
 8005f1a:	d03e      	beq.n	8005f9a <PDM_Filter_Init+0xaa>
 8005f1c:	4b50      	ldr	r3, [pc, #320]	@ (8006060 <PDM_Filter_Init+0x170>)
 8005f1e:	2201      	movs	r2, #1
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	6819      	ldr	r1, [r3, #0]
 8005f24:	2900      	cmp	r1, #0
 8005f26:	d1fc      	bne.n	8005f22 <PDM_Filter_Init+0x32>
 8005f28:	4b4e      	ldr	r3, [pc, #312]	@ (8006064 <PDM_Filter_Init+0x174>)
 8005f2a:	4a4f      	ldr	r2, [pc, #316]	@ (8006068 <PDM_Filter_Init+0x178>)
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	4b4e      	ldr	r3, [pc, #312]	@ (800606c <PDM_Filter_Init+0x17c>)
 8005f32:	429a      	cmp	r2, r3
 8005f34:	f104 000c 	add.w	r0, r4, #12
 8005f38:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8005f3c:	d047      	beq.n	8005fce <PDM_Filter_Init+0xde>
 8005f3e:	f000 ff58 	bl	8006df2 <memset>
 8005f42:	2300      	movs	r3, #0
 8005f44:	6463      	str	r3, [r4, #68]	@ 0x44
 8005f46:	8820      	ldrh	r0, [r4, #0]
 8005f48:	8963      	ldrh	r3, [r4, #10]
 8005f4a:	8922      	ldrh	r2, [r4, #8]
 8005f4c:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8005f4e:	2801      	cmp	r0, #1
 8005f50:	f04f 0300 	mov.w	r3, #0
 8005f54:	61a3      	str	r3, [r4, #24]
 8005f56:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8005f5a:	60e3      	str	r3, [r4, #12]
 8005f5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005f5e:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8005f62:	6423      	str	r3, [r4, #64]	@ 0x40
 8005f64:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8005f66:	d93a      	bls.n	8005fde <PDM_Filter_Init+0xee>
 8005f68:	2003      	movs	r0, #3
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	8862      	ldrh	r2, [r4, #2]
 8005f6e:	2a01      	cmp	r2, #1
 8005f70:	d932      	bls.n	8005fd8 <PDM_Filter_Init+0xe8>
 8005f72:	2140      	movs	r1, #64	@ 0x40
 8005f74:	2300      	movs	r3, #0
 8005f76:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8005f78:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8005f7c:	6862      	ldr	r2, [r4, #4]
 8005f7e:	bf04      	itt	eq
 8005f80:	6421      	streq	r1, [r4, #64]	@ 0x40
 8005f82:	460b      	moveq	r3, r1
 8005f84:	b11a      	cbz	r2, 8005f8e <PDM_Filter_Init+0x9e>
 8005f86:	f043 0310 	orr.w	r3, r3, #16
 8005f8a:	6423      	str	r3, [r4, #64]	@ 0x40
 8005f8c:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8005f8e:	2200      	movs	r2, #0
 8005f90:	8722      	strh	r2, [r4, #56]	@ 0x38
 8005f92:	b908      	cbnz	r0, 8005f98 <PDM_Filter_Init+0xa8>
 8005f94:	3380      	adds	r3, #128	@ 0x80
 8005f96:	6423      	str	r3, [r4, #64]	@ 0x40
 8005f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f9a:	4b35      	ldr	r3, [pc, #212]	@ (8006070 <PDM_Filter_Init+0x180>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1bc      	bne.n	8005f1c <PDM_Filter_Init+0x2c>
 8005fa2:	4a34      	ldr	r2, [pc, #208]	@ (8006074 <PDM_Filter_Init+0x184>)
 8005fa4:	6813      	ldr	r3, [r2, #0]
 8005fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005faa:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8005fae:	d006      	beq.n	8005fbe <PDM_Filter_Init+0xce>
 8005fb0:	6813      	ldr	r3, [r2, #0]
 8005fb2:	f240 4283 	movw	r2, #1155	@ 0x483
 8005fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d1ae      	bne.n	8005f1c <PDM_Filter_Init+0x2c>
 8005fbe:	4b2e      	ldr	r3, [pc, #184]	@ (8006078 <PDM_Filter_Init+0x188>)
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	6819      	ldr	r1, [r3, #0]
 8005fc6:	2900      	cmp	r1, #0
 8005fc8:	d1fc      	bne.n	8005fc4 <PDM_Filter_Init+0xd4>
 8005fca:	4b2c      	ldr	r3, [pc, #176]	@ (800607c <PDM_Filter_Init+0x18c>)
 8005fcc:	e7ad      	b.n	8005f2a <PDM_Filter_Init+0x3a>
 8005fce:	f000 ff10 	bl	8006df2 <memset>
 8005fd2:	4b26      	ldr	r3, [pc, #152]	@ (800606c <PDM_Filter_Init+0x17c>)
 8005fd4:	6463      	str	r3, [r4, #68]	@ 0x44
 8005fd6:	e7b6      	b.n	8005f46 <PDM_Filter_Init+0x56>
 8005fd8:	d038      	beq.n	800604c <PDM_Filter_Init+0x15c>
 8005fda:	4618      	mov	r0, r3
 8005fdc:	e7c9      	b.n	8005f72 <PDM_Filter_Init+0x82>
 8005fde:	4d28      	ldr	r5, [pc, #160]	@ (8006080 <PDM_Filter_Init+0x190>)
 8005fe0:	782a      	ldrb	r2, [r5, #0]
 8005fe2:	d01a      	beq.n	800601a <PDM_Filter_Init+0x12a>
 8005fe4:	2a01      	cmp	r2, #1
 8005fe6:	d001      	beq.n	8005fec <PDM_Filter_Init+0xfc>
 8005fe8:	2001      	movs	r0, #1
 8005fea:	e7bf      	b.n	8005f6c <PDM_Filter_Init+0x7c>
 8005fec:	4925      	ldr	r1, [pc, #148]	@ (8006084 <PDM_Filter_Init+0x194>)
 8005fee:	f8df c09c 	ldr.w	ip, [pc, #156]	@ 800608c <PDM_Filter_Init+0x19c>
 8005ff2:	4f25      	ldr	r7, [pc, #148]	@ (8006088 <PDM_Filter_Init+0x198>)
 8005ff4:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 8005ff8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8005ffc:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8006000:	ea02 0007 	and.w	r0, r2, r7
 8006004:	4303      	orrs	r3, r0
 8006006:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800600a:	4413      	add	r3, r2
 800600c:	428e      	cmp	r6, r1
 800600e:	600b      	str	r3, [r1, #0]
 8006010:	d1f2      	bne.n	8005ff8 <PDM_Filter_Init+0x108>
 8006012:	2300      	movs	r3, #0
 8006014:	702b      	strb	r3, [r5, #0]
 8006016:	2001      	movs	r0, #1
 8006018:	e7a8      	b.n	8005f6c <PDM_Filter_Init+0x7c>
 800601a:	2a00      	cmp	r2, #0
 800601c:	d1a6      	bne.n	8005f6c <PDM_Filter_Init+0x7c>
 800601e:	4919      	ldr	r1, [pc, #100]	@ (8006084 <PDM_Filter_Init+0x194>)
 8006020:	f8df c068 	ldr.w	ip, [pc, #104]	@ 800608c <PDM_Filter_Init+0x19c>
 8006024:	4f18      	ldr	r7, [pc, #96]	@ (8006088 <PDM_Filter_Init+0x198>)
 8006026:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 800602a:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800602e:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8006032:	ea02 0007 	and.w	r0, r2, r7
 8006036:	4303      	orrs	r3, r0
 8006038:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800603c:	4413      	add	r3, r2
 800603e:	428e      	cmp	r6, r1
 8006040:	600b      	str	r3, [r1, #0]
 8006042:	d1f2      	bne.n	800602a <PDM_Filter_Init+0x13a>
 8006044:	2001      	movs	r0, #1
 8006046:	7028      	strb	r0, [r5, #0]
 8006048:	2300      	movs	r3, #0
 800604a:	e78f      	b.n	8005f6c <PDM_Filter_Init+0x7c>
 800604c:	2220      	movs	r2, #32
 800604e:	4618      	mov	r0, r3
 8006050:	6422      	str	r2, [r4, #64]	@ 0x40
 8006052:	4613      	mov	r3, r2
 8006054:	2160      	movs	r1, #96	@ 0x60
 8006056:	e78e      	b.n	8005f76 <PDM_Filter_Init+0x86>
 8006058:	e0002000 	.word	0xe0002000
 800605c:	e000ed00 	.word	0xe000ed00
 8006060:	40023008 	.word	0x40023008
 8006064:	40023000 	.word	0x40023000
 8006068:	f407a5c2 	.word	0xf407a5c2
 800606c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006070:	e0042000 	.word	0xe0042000
 8006074:	5c001000 	.word	0x5c001000
 8006078:	58024c08 	.word	0x58024c08
 800607c:	58024c00 	.word	0x58024c00
 8006080:	200007a2 	.word	0x200007a2
 8006084:	20000008 	.word	0x20000008
 8006088:	000ffc00 	.word	0x000ffc00
 800608c:	3ff00000 	.word	0x3ff00000

08006090 <PDM_Filter_setConfig>:
 8006090:	4b6d      	ldr	r3, [pc, #436]	@ (8006248 <PDM_Filter_setConfig+0x1b8>)
 8006092:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8006094:	429a      	cmp	r2, r3
 8006096:	d12f      	bne.n	80060f8 <PDM_Filter_setConfig+0x68>
 8006098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800609a:	880e      	ldrh	r6, [r1, #0]
 800609c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800609e:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80060a2:	ed2d 8b02 	vpush	{d8}
 80060a6:	4604      	mov	r4, r0
 80060a8:	1e72      	subs	r2, r6, #1
 80060aa:	460d      	mov	r5, r1
 80060ac:	2a06      	cmp	r2, #6
 80060ae:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80060b2:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	@ 0x38
 80060b6:	6421      	str	r1, [r4, #64]	@ 0x40
 80060b8:	b083      	sub	sp, #12
 80060ba:	d904      	bls.n	80060c6 <PDM_Filter_setConfig+0x36>
 80060bc:	42b8      	cmp	r0, r7
 80060be:	f000 80bb 	beq.w	8006238 <PDM_Filter_setConfig+0x1a8>
 80060c2:	2008      	movs	r0, #8
 80060c4:	e01d      	b.n	8006102 <PDM_Filter_setConfig+0x72>
 80060c6:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 80060c8:	42b2      	cmp	r2, r6
 80060ca:	d070      	beq.n	80061ae <PDM_Filter_setConfig+0x11e>
 80060cc:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 80060d0:	f023 0301 	bic.w	r3, r3, #1
 80060d4:	4333      	orrs	r3, r6
 80060d6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80060da:	6423      	str	r3, [r4, #64]	@ 0x40
 80060dc:	2a70      	cmp	r2, #112	@ 0x70
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80060e6:	d067      	beq.n	80061b8 <PDM_Filter_setConfig+0x128>
 80060e8:	2b06      	cmp	r3, #6
 80060ea:	d809      	bhi.n	8006100 <PDM_Filter_setConfig+0x70>
 80060ec:	e8df f003 	tbb	[pc, r3]
 80060f0:	89868380 	.word	0x89868380
 80060f4:	8f8c      	.short	0x8f8c
 80060f6:	7d          	.byte	0x7d
 80060f7:	00          	.byte	0x00
 80060f8:	2004      	movs	r0, #4
 80060fa:	4770      	bx	lr
 80060fc:	4b53      	ldr	r3, [pc, #332]	@ (800624c <PDM_Filter_setConfig+0x1bc>)
 80060fe:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006100:	2000      	movs	r0, #0
 8006102:	f117 0f0c 	cmn.w	r7, #12
 8006106:	da0a      	bge.n	800611e <PDM_Filter_setConfig+0x8e>
 8006108:	f64f 73f4 	movw	r3, #65524	@ 0xfff4
 800610c:	3040      	adds	r0, #64	@ 0x40
 800610e:	80ab      	strh	r3, [r5, #4]
 8006110:	886b      	ldrh	r3, [r5, #2]
 8006112:	8663      	strh	r3, [r4, #50]	@ 0x32
 8006114:	8626      	strh	r6, [r4, #48]	@ 0x30
 8006116:	b003      	add	sp, #12
 8006118:	ecbd 8b02 	vpop	{d8}
 800611c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800611e:	2f33      	cmp	r7, #51	@ 0x33
 8006120:	dc41      	bgt.n	80061a6 <PDM_Filter_setConfig+0x116>
 8006122:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006124:	f003 030f 	and.w	r3, r3, #15
 8006128:	3b01      	subs	r3, #1
 800612a:	2b06      	cmp	r3, #6
 800612c:	d858      	bhi.n	80061e0 <PDM_Filter_setConfig+0x150>
 800612e:	4948      	ldr	r1, [pc, #288]	@ (8006250 <PDM_Filter_setConfig+0x1c0>)
 8006130:	4a48      	ldr	r2, [pc, #288]	@ (8006254 <PDM_Filter_setConfig+0x1c4>)
 8006132:	eddf 0a49 	vldr	s1, [pc, #292]	@ 8006258 <PDM_Filter_setConfig+0x1c8>
 8006136:	9001      	str	r0, [sp, #4]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4419      	add	r1, r3
 800613c:	edd1 7a00 	vldr	s15, [r1]
 8006140:	4413      	add	r3, r2
 8006142:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8006146:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800614a:	ed93 8a00 	vldr	s16, [r3]
 800614e:	f002 ff49 	bl	8008fe4 <powf>
 8006152:	9801      	ldr	r0, [sp, #4]
 8006154:	eef0 8a40 	vmov.f32	s17, s0
 8006158:	ee07 7a10 	vmov	s14, r7
 800615c:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800625c <PDM_Filter_setConfig+0x1cc>
 8006160:	9001      	str	r0, [sp, #4]
 8006162:	eef8 0ac7 	vcvt.f32.s32	s1, s14
 8006166:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800616a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800616e:	f002 ff39 	bl	8008fe4 <powf>
 8006172:	ee28 8a28 	vmul.f32	s16, s16, s17
 8006176:	ee28 0a00 	vmul.f32	s0, s16, s0
 800617a:	f002 ff9b 	bl	80090b4 <roundf>
 800617e:	9801      	ldr	r0, [sp, #4]
 8006180:	886b      	ldrh	r3, [r5, #2]
 8006182:	8663      	strh	r3, [r4, #50]	@ 0x32
 8006184:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8006188:	8727      	strh	r7, [r4, #56]	@ 0x38
 800618a:	8626      	strh	r6, [r4, #48]	@ 0x30
 800618c:	ed84 0a0f 	vstr	s0, [r4, #60]	@ 0x3c
 8006190:	2800      	cmp	r0, #0
 8006192:	d1c0      	bne.n	8006116 <PDM_Filter_setConfig+0x86>
 8006194:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006196:	2000      	movs	r0, #0
 8006198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800619c:	6423      	str	r3, [r4, #64]	@ 0x40
 800619e:	b003      	add	sp, #12
 80061a0:	ecbd 8b02 	vpop	{d8}
 80061a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061a6:	2333      	movs	r3, #51	@ 0x33
 80061a8:	3040      	adds	r0, #64	@ 0x40
 80061aa:	80ab      	strh	r3, [r5, #4]
 80061ac:	e7b0      	b.n	8006110 <PDM_Filter_setConfig+0x80>
 80061ae:	42b8      	cmp	r0, r7
 80061b0:	d1a6      	bne.n	8006100 <PDM_Filter_setConfig+0x70>
 80061b2:	886b      	ldrh	r3, [r5, #2]
 80061b4:	8663      	strh	r3, [r4, #50]	@ 0x32
 80061b6:	e7ed      	b.n	8006194 <PDM_Filter_setConfig+0x104>
 80061b8:	2b06      	cmp	r3, #6
 80061ba:	d8a1      	bhi.n	8006100 <PDM_Filter_setConfig+0x70>
 80061bc:	a201      	add	r2, pc, #4	@ (adr r2, 80061c4 <PDM_Filter_setConfig+0x134>)
 80061be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c2:	bf00      	nop
 80061c4:	08006233 	.word	0x08006233
 80061c8:	0800622d 	.word	0x0800622d
 80061cc:	08006221 	.word	0x08006221
 80061d0:	0800621b 	.word	0x0800621b
 80061d4:	080060fd 	.word	0x080060fd
 80061d8:	08006215 	.word	0x08006215
 80061dc:	08006227 	.word	0x08006227
 80061e0:	eddf 8a1f 	vldr	s17, [pc, #124]	@ 8006260 <PDM_Filter_setConfig+0x1d0>
 80061e4:	ed9f 8a1f 	vldr	s16, [pc, #124]	@ 8006264 <PDM_Filter_setConfig+0x1d4>
 80061e8:	e7b6      	b.n	8006158 <PDM_Filter_setConfig+0xc8>
 80061ea:	4b1f      	ldr	r3, [pc, #124]	@ (8006268 <PDM_Filter_setConfig+0x1d8>)
 80061ec:	64a3      	str	r3, [r4, #72]	@ 0x48
 80061ee:	e787      	b.n	8006100 <PDM_Filter_setConfig+0x70>
 80061f0:	4b1e      	ldr	r3, [pc, #120]	@ (800626c <PDM_Filter_setConfig+0x1dc>)
 80061f2:	64a3      	str	r3, [r4, #72]	@ 0x48
 80061f4:	e784      	b.n	8006100 <PDM_Filter_setConfig+0x70>
 80061f6:	4b1e      	ldr	r3, [pc, #120]	@ (8006270 <PDM_Filter_setConfig+0x1e0>)
 80061f8:	64a3      	str	r3, [r4, #72]	@ 0x48
 80061fa:	e781      	b.n	8006100 <PDM_Filter_setConfig+0x70>
 80061fc:	4b1d      	ldr	r3, [pc, #116]	@ (8006274 <PDM_Filter_setConfig+0x1e4>)
 80061fe:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006200:	e77e      	b.n	8006100 <PDM_Filter_setConfig+0x70>
 8006202:	4b1d      	ldr	r3, [pc, #116]	@ (8006278 <PDM_Filter_setConfig+0x1e8>)
 8006204:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006206:	e77b      	b.n	8006100 <PDM_Filter_setConfig+0x70>
 8006208:	4b1c      	ldr	r3, [pc, #112]	@ (800627c <PDM_Filter_setConfig+0x1ec>)
 800620a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800620c:	e778      	b.n	8006100 <PDM_Filter_setConfig+0x70>
 800620e:	4b1c      	ldr	r3, [pc, #112]	@ (8006280 <PDM_Filter_setConfig+0x1f0>)
 8006210:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006212:	e775      	b.n	8006100 <PDM_Filter_setConfig+0x70>
 8006214:	4b1b      	ldr	r3, [pc, #108]	@ (8006284 <PDM_Filter_setConfig+0x1f4>)
 8006216:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006218:	e772      	b.n	8006100 <PDM_Filter_setConfig+0x70>
 800621a:	4b1b      	ldr	r3, [pc, #108]	@ (8006288 <PDM_Filter_setConfig+0x1f8>)
 800621c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800621e:	e76f      	b.n	8006100 <PDM_Filter_setConfig+0x70>
 8006220:	4b1a      	ldr	r3, [pc, #104]	@ (800628c <PDM_Filter_setConfig+0x1fc>)
 8006222:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006224:	e76c      	b.n	8006100 <PDM_Filter_setConfig+0x70>
 8006226:	4b1a      	ldr	r3, [pc, #104]	@ (8006290 <PDM_Filter_setConfig+0x200>)
 8006228:	64a3      	str	r3, [r4, #72]	@ 0x48
 800622a:	e769      	b.n	8006100 <PDM_Filter_setConfig+0x70>
 800622c:	4b19      	ldr	r3, [pc, #100]	@ (8006294 <PDM_Filter_setConfig+0x204>)
 800622e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006230:	e766      	b.n	8006100 <PDM_Filter_setConfig+0x70>
 8006232:	4b19      	ldr	r3, [pc, #100]	@ (8006298 <PDM_Filter_setConfig+0x208>)
 8006234:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006236:	e763      	b.n	8006100 <PDM_Filter_setConfig+0x70>
 8006238:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800623a:	42b3      	cmp	r3, r6
 800623c:	f47f af41 	bne.w	80060c2 <PDM_Filter_setConfig+0x32>
 8006240:	886b      	ldrh	r3, [r5, #2]
 8006242:	8663      	strh	r3, [r4, #50]	@ 0x32
 8006244:	2008      	movs	r0, #8
 8006246:	e766      	b.n	8006116 <PDM_Filter_setConfig+0x86>
 8006248:	b5e8b5cd 	.word	0xb5e8b5cd
 800624c:	08005371 	.word	0x08005371
 8006250:	08009ac4 	.word	0x08009ac4
 8006254:	08009ae0 	.word	0x08009ae0
 8006258:	42000000 	.word	0x42000000
 800625c:	3d4ccccd 	.word	0x3d4ccccd
 8006260:	4f800000 	.word	0x4f800000
 8006264:	00000000 	.word	0x00000000
 8006268:	08004771 	.word	0x08004771
 800626c:	080048f9 	.word	0x080048f9
 8006270:	08004ae1 	.word	0x08004ae1
 8006274:	08004cfd 	.word	0x08004cfd
 8006278:	08004f91 	.word	0x08004f91
 800627c:	080044d1 	.word	0x080044d1
 8006280:	080045e9 	.word	0x080045e9
 8006284:	08005459 	.word	0x08005459
 8006288:	08005bcd 	.word	0x08005bcd
 800628c:	080059c5 	.word	0x080059c5
 8006290:	0800559d 	.word	0x0800559d
 8006294:	08005825 	.word	0x08005825
 8006298:	080056b9 	.word	0x080056b9

0800629c <PDM_Filter>:
 800629c:	b410      	push	{r4}
 800629e:	4b0b      	ldr	r3, [pc, #44]	@ (80062cc <PDM_Filter+0x30>)
 80062a0:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 80062a2:	429c      	cmp	r4, r3
 80062a4:	d107      	bne.n	80062b6 <PDM_Filter+0x1a>
 80062a6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80062a8:	05dc      	lsls	r4, r3, #23
 80062aa:	d508      	bpl.n	80062be <PDM_Filter+0x22>
 80062ac:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 80062ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062b2:	320c      	adds	r2, #12
 80062b4:	4718      	bx	r3
 80062b6:	2004      	movs	r0, #4
 80062b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80062c2:	bf14      	ite	ne
 80062c4:	2020      	movne	r0, #32
 80062c6:	2030      	moveq	r0, #48	@ 0x30
 80062c8:	e7f6      	b.n	80062b8 <PDM_Filter+0x1c>
 80062ca:	bf00      	nop
 80062cc:	b5e8b5cd 	.word	0xb5e8b5cd

080062d0 <__cvt>:
 80062d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062d4:	ec57 6b10 	vmov	r6, r7, d0
 80062d8:	2f00      	cmp	r7, #0
 80062da:	460c      	mov	r4, r1
 80062dc:	4619      	mov	r1, r3
 80062de:	463b      	mov	r3, r7
 80062e0:	bfbb      	ittet	lt
 80062e2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80062e6:	461f      	movlt	r7, r3
 80062e8:	2300      	movge	r3, #0
 80062ea:	232d      	movlt	r3, #45	@ 0x2d
 80062ec:	700b      	strb	r3, [r1, #0]
 80062ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062f0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80062f4:	4691      	mov	r9, r2
 80062f6:	f023 0820 	bic.w	r8, r3, #32
 80062fa:	bfbc      	itt	lt
 80062fc:	4632      	movlt	r2, r6
 80062fe:	4616      	movlt	r6, r2
 8006300:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006304:	d005      	beq.n	8006312 <__cvt+0x42>
 8006306:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800630a:	d100      	bne.n	800630e <__cvt+0x3e>
 800630c:	3401      	adds	r4, #1
 800630e:	2102      	movs	r1, #2
 8006310:	e000      	b.n	8006314 <__cvt+0x44>
 8006312:	2103      	movs	r1, #3
 8006314:	ab03      	add	r3, sp, #12
 8006316:	9301      	str	r3, [sp, #4]
 8006318:	ab02      	add	r3, sp, #8
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	ec47 6b10 	vmov	d0, r6, r7
 8006320:	4653      	mov	r3, sl
 8006322:	4622      	mov	r2, r4
 8006324:	f000 fe70 	bl	8007008 <_dtoa_r>
 8006328:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800632c:	4605      	mov	r5, r0
 800632e:	d119      	bne.n	8006364 <__cvt+0x94>
 8006330:	f019 0f01 	tst.w	r9, #1
 8006334:	d00e      	beq.n	8006354 <__cvt+0x84>
 8006336:	eb00 0904 	add.w	r9, r0, r4
 800633a:	2200      	movs	r2, #0
 800633c:	2300      	movs	r3, #0
 800633e:	4630      	mov	r0, r6
 8006340:	4639      	mov	r1, r7
 8006342:	f7fa fbc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006346:	b108      	cbz	r0, 800634c <__cvt+0x7c>
 8006348:	f8cd 900c 	str.w	r9, [sp, #12]
 800634c:	2230      	movs	r2, #48	@ 0x30
 800634e:	9b03      	ldr	r3, [sp, #12]
 8006350:	454b      	cmp	r3, r9
 8006352:	d31e      	bcc.n	8006392 <__cvt+0xc2>
 8006354:	9b03      	ldr	r3, [sp, #12]
 8006356:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006358:	1b5b      	subs	r3, r3, r5
 800635a:	4628      	mov	r0, r5
 800635c:	6013      	str	r3, [r2, #0]
 800635e:	b004      	add	sp, #16
 8006360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006364:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006368:	eb00 0904 	add.w	r9, r0, r4
 800636c:	d1e5      	bne.n	800633a <__cvt+0x6a>
 800636e:	7803      	ldrb	r3, [r0, #0]
 8006370:	2b30      	cmp	r3, #48	@ 0x30
 8006372:	d10a      	bne.n	800638a <__cvt+0xba>
 8006374:	2200      	movs	r2, #0
 8006376:	2300      	movs	r3, #0
 8006378:	4630      	mov	r0, r6
 800637a:	4639      	mov	r1, r7
 800637c:	f7fa fba4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006380:	b918      	cbnz	r0, 800638a <__cvt+0xba>
 8006382:	f1c4 0401 	rsb	r4, r4, #1
 8006386:	f8ca 4000 	str.w	r4, [sl]
 800638a:	f8da 3000 	ldr.w	r3, [sl]
 800638e:	4499      	add	r9, r3
 8006390:	e7d3      	b.n	800633a <__cvt+0x6a>
 8006392:	1c59      	adds	r1, r3, #1
 8006394:	9103      	str	r1, [sp, #12]
 8006396:	701a      	strb	r2, [r3, #0]
 8006398:	e7d9      	b.n	800634e <__cvt+0x7e>

0800639a <__exponent>:
 800639a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800639c:	2900      	cmp	r1, #0
 800639e:	bfba      	itte	lt
 80063a0:	4249      	neglt	r1, r1
 80063a2:	232d      	movlt	r3, #45	@ 0x2d
 80063a4:	232b      	movge	r3, #43	@ 0x2b
 80063a6:	2909      	cmp	r1, #9
 80063a8:	7002      	strb	r2, [r0, #0]
 80063aa:	7043      	strb	r3, [r0, #1]
 80063ac:	dd29      	ble.n	8006402 <__exponent+0x68>
 80063ae:	f10d 0307 	add.w	r3, sp, #7
 80063b2:	461d      	mov	r5, r3
 80063b4:	270a      	movs	r7, #10
 80063b6:	461a      	mov	r2, r3
 80063b8:	fbb1 f6f7 	udiv	r6, r1, r7
 80063bc:	fb07 1416 	mls	r4, r7, r6, r1
 80063c0:	3430      	adds	r4, #48	@ 0x30
 80063c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80063c6:	460c      	mov	r4, r1
 80063c8:	2c63      	cmp	r4, #99	@ 0x63
 80063ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80063ce:	4631      	mov	r1, r6
 80063d0:	dcf1      	bgt.n	80063b6 <__exponent+0x1c>
 80063d2:	3130      	adds	r1, #48	@ 0x30
 80063d4:	1e94      	subs	r4, r2, #2
 80063d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80063da:	1c41      	adds	r1, r0, #1
 80063dc:	4623      	mov	r3, r4
 80063de:	42ab      	cmp	r3, r5
 80063e0:	d30a      	bcc.n	80063f8 <__exponent+0x5e>
 80063e2:	f10d 0309 	add.w	r3, sp, #9
 80063e6:	1a9b      	subs	r3, r3, r2
 80063e8:	42ac      	cmp	r4, r5
 80063ea:	bf88      	it	hi
 80063ec:	2300      	movhi	r3, #0
 80063ee:	3302      	adds	r3, #2
 80063f0:	4403      	add	r3, r0
 80063f2:	1a18      	subs	r0, r3, r0
 80063f4:	b003      	add	sp, #12
 80063f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80063fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006400:	e7ed      	b.n	80063de <__exponent+0x44>
 8006402:	2330      	movs	r3, #48	@ 0x30
 8006404:	3130      	adds	r1, #48	@ 0x30
 8006406:	7083      	strb	r3, [r0, #2]
 8006408:	70c1      	strb	r1, [r0, #3]
 800640a:	1d03      	adds	r3, r0, #4
 800640c:	e7f1      	b.n	80063f2 <__exponent+0x58>
	...

08006410 <_printf_float>:
 8006410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006414:	b08d      	sub	sp, #52	@ 0x34
 8006416:	460c      	mov	r4, r1
 8006418:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800641c:	4616      	mov	r6, r2
 800641e:	461f      	mov	r7, r3
 8006420:	4605      	mov	r5, r0
 8006422:	f000 fcef 	bl	8006e04 <_localeconv_r>
 8006426:	6803      	ldr	r3, [r0, #0]
 8006428:	9304      	str	r3, [sp, #16]
 800642a:	4618      	mov	r0, r3
 800642c:	f7f9 ff20 	bl	8000270 <strlen>
 8006430:	2300      	movs	r3, #0
 8006432:	930a      	str	r3, [sp, #40]	@ 0x28
 8006434:	f8d8 3000 	ldr.w	r3, [r8]
 8006438:	9005      	str	r0, [sp, #20]
 800643a:	3307      	adds	r3, #7
 800643c:	f023 0307 	bic.w	r3, r3, #7
 8006440:	f103 0208 	add.w	r2, r3, #8
 8006444:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006448:	f8d4 b000 	ldr.w	fp, [r4]
 800644c:	f8c8 2000 	str.w	r2, [r8]
 8006450:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006454:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006458:	9307      	str	r3, [sp, #28]
 800645a:	f8cd 8018 	str.w	r8, [sp, #24]
 800645e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006462:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006466:	4b9c      	ldr	r3, [pc, #624]	@ (80066d8 <_printf_float+0x2c8>)
 8006468:	f04f 32ff 	mov.w	r2, #4294967295
 800646c:	f7fa fb5e 	bl	8000b2c <__aeabi_dcmpun>
 8006470:	bb70      	cbnz	r0, 80064d0 <_printf_float+0xc0>
 8006472:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006476:	4b98      	ldr	r3, [pc, #608]	@ (80066d8 <_printf_float+0x2c8>)
 8006478:	f04f 32ff 	mov.w	r2, #4294967295
 800647c:	f7fa fb38 	bl	8000af0 <__aeabi_dcmple>
 8006480:	bb30      	cbnz	r0, 80064d0 <_printf_float+0xc0>
 8006482:	2200      	movs	r2, #0
 8006484:	2300      	movs	r3, #0
 8006486:	4640      	mov	r0, r8
 8006488:	4649      	mov	r1, r9
 800648a:	f7fa fb27 	bl	8000adc <__aeabi_dcmplt>
 800648e:	b110      	cbz	r0, 8006496 <_printf_float+0x86>
 8006490:	232d      	movs	r3, #45	@ 0x2d
 8006492:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006496:	4a91      	ldr	r2, [pc, #580]	@ (80066dc <_printf_float+0x2cc>)
 8006498:	4b91      	ldr	r3, [pc, #580]	@ (80066e0 <_printf_float+0x2d0>)
 800649a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800649e:	bf94      	ite	ls
 80064a0:	4690      	movls	r8, r2
 80064a2:	4698      	movhi	r8, r3
 80064a4:	2303      	movs	r3, #3
 80064a6:	6123      	str	r3, [r4, #16]
 80064a8:	f02b 0304 	bic.w	r3, fp, #4
 80064ac:	6023      	str	r3, [r4, #0]
 80064ae:	f04f 0900 	mov.w	r9, #0
 80064b2:	9700      	str	r7, [sp, #0]
 80064b4:	4633      	mov	r3, r6
 80064b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80064b8:	4621      	mov	r1, r4
 80064ba:	4628      	mov	r0, r5
 80064bc:	f000 f9d2 	bl	8006864 <_printf_common>
 80064c0:	3001      	adds	r0, #1
 80064c2:	f040 808d 	bne.w	80065e0 <_printf_float+0x1d0>
 80064c6:	f04f 30ff 	mov.w	r0, #4294967295
 80064ca:	b00d      	add	sp, #52	@ 0x34
 80064cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d0:	4642      	mov	r2, r8
 80064d2:	464b      	mov	r3, r9
 80064d4:	4640      	mov	r0, r8
 80064d6:	4649      	mov	r1, r9
 80064d8:	f7fa fb28 	bl	8000b2c <__aeabi_dcmpun>
 80064dc:	b140      	cbz	r0, 80064f0 <_printf_float+0xe0>
 80064de:	464b      	mov	r3, r9
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	bfbc      	itt	lt
 80064e4:	232d      	movlt	r3, #45	@ 0x2d
 80064e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80064ea:	4a7e      	ldr	r2, [pc, #504]	@ (80066e4 <_printf_float+0x2d4>)
 80064ec:	4b7e      	ldr	r3, [pc, #504]	@ (80066e8 <_printf_float+0x2d8>)
 80064ee:	e7d4      	b.n	800649a <_printf_float+0x8a>
 80064f0:	6863      	ldr	r3, [r4, #4]
 80064f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80064f6:	9206      	str	r2, [sp, #24]
 80064f8:	1c5a      	adds	r2, r3, #1
 80064fa:	d13b      	bne.n	8006574 <_printf_float+0x164>
 80064fc:	2306      	movs	r3, #6
 80064fe:	6063      	str	r3, [r4, #4]
 8006500:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006504:	2300      	movs	r3, #0
 8006506:	6022      	str	r2, [r4, #0]
 8006508:	9303      	str	r3, [sp, #12]
 800650a:	ab0a      	add	r3, sp, #40	@ 0x28
 800650c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006510:	ab09      	add	r3, sp, #36	@ 0x24
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	6861      	ldr	r1, [r4, #4]
 8006516:	ec49 8b10 	vmov	d0, r8, r9
 800651a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800651e:	4628      	mov	r0, r5
 8006520:	f7ff fed6 	bl	80062d0 <__cvt>
 8006524:	9b06      	ldr	r3, [sp, #24]
 8006526:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006528:	2b47      	cmp	r3, #71	@ 0x47
 800652a:	4680      	mov	r8, r0
 800652c:	d129      	bne.n	8006582 <_printf_float+0x172>
 800652e:	1cc8      	adds	r0, r1, #3
 8006530:	db02      	blt.n	8006538 <_printf_float+0x128>
 8006532:	6863      	ldr	r3, [r4, #4]
 8006534:	4299      	cmp	r1, r3
 8006536:	dd41      	ble.n	80065bc <_printf_float+0x1ac>
 8006538:	f1aa 0a02 	sub.w	sl, sl, #2
 800653c:	fa5f fa8a 	uxtb.w	sl, sl
 8006540:	3901      	subs	r1, #1
 8006542:	4652      	mov	r2, sl
 8006544:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006548:	9109      	str	r1, [sp, #36]	@ 0x24
 800654a:	f7ff ff26 	bl	800639a <__exponent>
 800654e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006550:	1813      	adds	r3, r2, r0
 8006552:	2a01      	cmp	r2, #1
 8006554:	4681      	mov	r9, r0
 8006556:	6123      	str	r3, [r4, #16]
 8006558:	dc02      	bgt.n	8006560 <_printf_float+0x150>
 800655a:	6822      	ldr	r2, [r4, #0]
 800655c:	07d2      	lsls	r2, r2, #31
 800655e:	d501      	bpl.n	8006564 <_printf_float+0x154>
 8006560:	3301      	adds	r3, #1
 8006562:	6123      	str	r3, [r4, #16]
 8006564:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006568:	2b00      	cmp	r3, #0
 800656a:	d0a2      	beq.n	80064b2 <_printf_float+0xa2>
 800656c:	232d      	movs	r3, #45	@ 0x2d
 800656e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006572:	e79e      	b.n	80064b2 <_printf_float+0xa2>
 8006574:	9a06      	ldr	r2, [sp, #24]
 8006576:	2a47      	cmp	r2, #71	@ 0x47
 8006578:	d1c2      	bne.n	8006500 <_printf_float+0xf0>
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1c0      	bne.n	8006500 <_printf_float+0xf0>
 800657e:	2301      	movs	r3, #1
 8006580:	e7bd      	b.n	80064fe <_printf_float+0xee>
 8006582:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006586:	d9db      	bls.n	8006540 <_printf_float+0x130>
 8006588:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800658c:	d118      	bne.n	80065c0 <_printf_float+0x1b0>
 800658e:	2900      	cmp	r1, #0
 8006590:	6863      	ldr	r3, [r4, #4]
 8006592:	dd0b      	ble.n	80065ac <_printf_float+0x19c>
 8006594:	6121      	str	r1, [r4, #16]
 8006596:	b913      	cbnz	r3, 800659e <_printf_float+0x18e>
 8006598:	6822      	ldr	r2, [r4, #0]
 800659a:	07d0      	lsls	r0, r2, #31
 800659c:	d502      	bpl.n	80065a4 <_printf_float+0x194>
 800659e:	3301      	adds	r3, #1
 80065a0:	440b      	add	r3, r1
 80065a2:	6123      	str	r3, [r4, #16]
 80065a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80065a6:	f04f 0900 	mov.w	r9, #0
 80065aa:	e7db      	b.n	8006564 <_printf_float+0x154>
 80065ac:	b913      	cbnz	r3, 80065b4 <_printf_float+0x1a4>
 80065ae:	6822      	ldr	r2, [r4, #0]
 80065b0:	07d2      	lsls	r2, r2, #31
 80065b2:	d501      	bpl.n	80065b8 <_printf_float+0x1a8>
 80065b4:	3302      	adds	r3, #2
 80065b6:	e7f4      	b.n	80065a2 <_printf_float+0x192>
 80065b8:	2301      	movs	r3, #1
 80065ba:	e7f2      	b.n	80065a2 <_printf_float+0x192>
 80065bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80065c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065c2:	4299      	cmp	r1, r3
 80065c4:	db05      	blt.n	80065d2 <_printf_float+0x1c2>
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	6121      	str	r1, [r4, #16]
 80065ca:	07d8      	lsls	r0, r3, #31
 80065cc:	d5ea      	bpl.n	80065a4 <_printf_float+0x194>
 80065ce:	1c4b      	adds	r3, r1, #1
 80065d0:	e7e7      	b.n	80065a2 <_printf_float+0x192>
 80065d2:	2900      	cmp	r1, #0
 80065d4:	bfd4      	ite	le
 80065d6:	f1c1 0202 	rsble	r2, r1, #2
 80065da:	2201      	movgt	r2, #1
 80065dc:	4413      	add	r3, r2
 80065de:	e7e0      	b.n	80065a2 <_printf_float+0x192>
 80065e0:	6823      	ldr	r3, [r4, #0]
 80065e2:	055a      	lsls	r2, r3, #21
 80065e4:	d407      	bmi.n	80065f6 <_printf_float+0x1e6>
 80065e6:	6923      	ldr	r3, [r4, #16]
 80065e8:	4642      	mov	r2, r8
 80065ea:	4631      	mov	r1, r6
 80065ec:	4628      	mov	r0, r5
 80065ee:	47b8      	blx	r7
 80065f0:	3001      	adds	r0, #1
 80065f2:	d12b      	bne.n	800664c <_printf_float+0x23c>
 80065f4:	e767      	b.n	80064c6 <_printf_float+0xb6>
 80065f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80065fa:	f240 80dd 	bls.w	80067b8 <_printf_float+0x3a8>
 80065fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006602:	2200      	movs	r2, #0
 8006604:	2300      	movs	r3, #0
 8006606:	f7fa fa5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800660a:	2800      	cmp	r0, #0
 800660c:	d033      	beq.n	8006676 <_printf_float+0x266>
 800660e:	4a37      	ldr	r2, [pc, #220]	@ (80066ec <_printf_float+0x2dc>)
 8006610:	2301      	movs	r3, #1
 8006612:	4631      	mov	r1, r6
 8006614:	4628      	mov	r0, r5
 8006616:	47b8      	blx	r7
 8006618:	3001      	adds	r0, #1
 800661a:	f43f af54 	beq.w	80064c6 <_printf_float+0xb6>
 800661e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006622:	4543      	cmp	r3, r8
 8006624:	db02      	blt.n	800662c <_printf_float+0x21c>
 8006626:	6823      	ldr	r3, [r4, #0]
 8006628:	07d8      	lsls	r0, r3, #31
 800662a:	d50f      	bpl.n	800664c <_printf_float+0x23c>
 800662c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006630:	4631      	mov	r1, r6
 8006632:	4628      	mov	r0, r5
 8006634:	47b8      	blx	r7
 8006636:	3001      	adds	r0, #1
 8006638:	f43f af45 	beq.w	80064c6 <_printf_float+0xb6>
 800663c:	f04f 0900 	mov.w	r9, #0
 8006640:	f108 38ff 	add.w	r8, r8, #4294967295
 8006644:	f104 0a1a 	add.w	sl, r4, #26
 8006648:	45c8      	cmp	r8, r9
 800664a:	dc09      	bgt.n	8006660 <_printf_float+0x250>
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	079b      	lsls	r3, r3, #30
 8006650:	f100 8103 	bmi.w	800685a <_printf_float+0x44a>
 8006654:	68e0      	ldr	r0, [r4, #12]
 8006656:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006658:	4298      	cmp	r0, r3
 800665a:	bfb8      	it	lt
 800665c:	4618      	movlt	r0, r3
 800665e:	e734      	b.n	80064ca <_printf_float+0xba>
 8006660:	2301      	movs	r3, #1
 8006662:	4652      	mov	r2, sl
 8006664:	4631      	mov	r1, r6
 8006666:	4628      	mov	r0, r5
 8006668:	47b8      	blx	r7
 800666a:	3001      	adds	r0, #1
 800666c:	f43f af2b 	beq.w	80064c6 <_printf_float+0xb6>
 8006670:	f109 0901 	add.w	r9, r9, #1
 8006674:	e7e8      	b.n	8006648 <_printf_float+0x238>
 8006676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006678:	2b00      	cmp	r3, #0
 800667a:	dc39      	bgt.n	80066f0 <_printf_float+0x2e0>
 800667c:	4a1b      	ldr	r2, [pc, #108]	@ (80066ec <_printf_float+0x2dc>)
 800667e:	2301      	movs	r3, #1
 8006680:	4631      	mov	r1, r6
 8006682:	4628      	mov	r0, r5
 8006684:	47b8      	blx	r7
 8006686:	3001      	adds	r0, #1
 8006688:	f43f af1d 	beq.w	80064c6 <_printf_float+0xb6>
 800668c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006690:	ea59 0303 	orrs.w	r3, r9, r3
 8006694:	d102      	bne.n	800669c <_printf_float+0x28c>
 8006696:	6823      	ldr	r3, [r4, #0]
 8006698:	07d9      	lsls	r1, r3, #31
 800669a:	d5d7      	bpl.n	800664c <_printf_float+0x23c>
 800669c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066a0:	4631      	mov	r1, r6
 80066a2:	4628      	mov	r0, r5
 80066a4:	47b8      	blx	r7
 80066a6:	3001      	adds	r0, #1
 80066a8:	f43f af0d 	beq.w	80064c6 <_printf_float+0xb6>
 80066ac:	f04f 0a00 	mov.w	sl, #0
 80066b0:	f104 0b1a 	add.w	fp, r4, #26
 80066b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066b6:	425b      	negs	r3, r3
 80066b8:	4553      	cmp	r3, sl
 80066ba:	dc01      	bgt.n	80066c0 <_printf_float+0x2b0>
 80066bc:	464b      	mov	r3, r9
 80066be:	e793      	b.n	80065e8 <_printf_float+0x1d8>
 80066c0:	2301      	movs	r3, #1
 80066c2:	465a      	mov	r2, fp
 80066c4:	4631      	mov	r1, r6
 80066c6:	4628      	mov	r0, r5
 80066c8:	47b8      	blx	r7
 80066ca:	3001      	adds	r0, #1
 80066cc:	f43f aefb 	beq.w	80064c6 <_printf_float+0xb6>
 80066d0:	f10a 0a01 	add.w	sl, sl, #1
 80066d4:	e7ee      	b.n	80066b4 <_printf_float+0x2a4>
 80066d6:	bf00      	nop
 80066d8:	7fefffff 	.word	0x7fefffff
 80066dc:	08009afc 	.word	0x08009afc
 80066e0:	08009b00 	.word	0x08009b00
 80066e4:	08009b04 	.word	0x08009b04
 80066e8:	08009b08 	.word	0x08009b08
 80066ec:	08009b0c 	.word	0x08009b0c
 80066f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80066f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80066f6:	4553      	cmp	r3, sl
 80066f8:	bfa8      	it	ge
 80066fa:	4653      	movge	r3, sl
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	4699      	mov	r9, r3
 8006700:	dc36      	bgt.n	8006770 <_printf_float+0x360>
 8006702:	f04f 0b00 	mov.w	fp, #0
 8006706:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800670a:	f104 021a 	add.w	r2, r4, #26
 800670e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006710:	9306      	str	r3, [sp, #24]
 8006712:	eba3 0309 	sub.w	r3, r3, r9
 8006716:	455b      	cmp	r3, fp
 8006718:	dc31      	bgt.n	800677e <_printf_float+0x36e>
 800671a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800671c:	459a      	cmp	sl, r3
 800671e:	dc3a      	bgt.n	8006796 <_printf_float+0x386>
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	07da      	lsls	r2, r3, #31
 8006724:	d437      	bmi.n	8006796 <_printf_float+0x386>
 8006726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006728:	ebaa 0903 	sub.w	r9, sl, r3
 800672c:	9b06      	ldr	r3, [sp, #24]
 800672e:	ebaa 0303 	sub.w	r3, sl, r3
 8006732:	4599      	cmp	r9, r3
 8006734:	bfa8      	it	ge
 8006736:	4699      	movge	r9, r3
 8006738:	f1b9 0f00 	cmp.w	r9, #0
 800673c:	dc33      	bgt.n	80067a6 <_printf_float+0x396>
 800673e:	f04f 0800 	mov.w	r8, #0
 8006742:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006746:	f104 0b1a 	add.w	fp, r4, #26
 800674a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800674c:	ebaa 0303 	sub.w	r3, sl, r3
 8006750:	eba3 0309 	sub.w	r3, r3, r9
 8006754:	4543      	cmp	r3, r8
 8006756:	f77f af79 	ble.w	800664c <_printf_float+0x23c>
 800675a:	2301      	movs	r3, #1
 800675c:	465a      	mov	r2, fp
 800675e:	4631      	mov	r1, r6
 8006760:	4628      	mov	r0, r5
 8006762:	47b8      	blx	r7
 8006764:	3001      	adds	r0, #1
 8006766:	f43f aeae 	beq.w	80064c6 <_printf_float+0xb6>
 800676a:	f108 0801 	add.w	r8, r8, #1
 800676e:	e7ec      	b.n	800674a <_printf_float+0x33a>
 8006770:	4642      	mov	r2, r8
 8006772:	4631      	mov	r1, r6
 8006774:	4628      	mov	r0, r5
 8006776:	47b8      	blx	r7
 8006778:	3001      	adds	r0, #1
 800677a:	d1c2      	bne.n	8006702 <_printf_float+0x2f2>
 800677c:	e6a3      	b.n	80064c6 <_printf_float+0xb6>
 800677e:	2301      	movs	r3, #1
 8006780:	4631      	mov	r1, r6
 8006782:	4628      	mov	r0, r5
 8006784:	9206      	str	r2, [sp, #24]
 8006786:	47b8      	blx	r7
 8006788:	3001      	adds	r0, #1
 800678a:	f43f ae9c 	beq.w	80064c6 <_printf_float+0xb6>
 800678e:	9a06      	ldr	r2, [sp, #24]
 8006790:	f10b 0b01 	add.w	fp, fp, #1
 8006794:	e7bb      	b.n	800670e <_printf_float+0x2fe>
 8006796:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800679a:	4631      	mov	r1, r6
 800679c:	4628      	mov	r0, r5
 800679e:	47b8      	blx	r7
 80067a0:	3001      	adds	r0, #1
 80067a2:	d1c0      	bne.n	8006726 <_printf_float+0x316>
 80067a4:	e68f      	b.n	80064c6 <_printf_float+0xb6>
 80067a6:	9a06      	ldr	r2, [sp, #24]
 80067a8:	464b      	mov	r3, r9
 80067aa:	4442      	add	r2, r8
 80067ac:	4631      	mov	r1, r6
 80067ae:	4628      	mov	r0, r5
 80067b0:	47b8      	blx	r7
 80067b2:	3001      	adds	r0, #1
 80067b4:	d1c3      	bne.n	800673e <_printf_float+0x32e>
 80067b6:	e686      	b.n	80064c6 <_printf_float+0xb6>
 80067b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80067bc:	f1ba 0f01 	cmp.w	sl, #1
 80067c0:	dc01      	bgt.n	80067c6 <_printf_float+0x3b6>
 80067c2:	07db      	lsls	r3, r3, #31
 80067c4:	d536      	bpl.n	8006834 <_printf_float+0x424>
 80067c6:	2301      	movs	r3, #1
 80067c8:	4642      	mov	r2, r8
 80067ca:	4631      	mov	r1, r6
 80067cc:	4628      	mov	r0, r5
 80067ce:	47b8      	blx	r7
 80067d0:	3001      	adds	r0, #1
 80067d2:	f43f ae78 	beq.w	80064c6 <_printf_float+0xb6>
 80067d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067da:	4631      	mov	r1, r6
 80067dc:	4628      	mov	r0, r5
 80067de:	47b8      	blx	r7
 80067e0:	3001      	adds	r0, #1
 80067e2:	f43f ae70 	beq.w	80064c6 <_printf_float+0xb6>
 80067e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80067ea:	2200      	movs	r2, #0
 80067ec:	2300      	movs	r3, #0
 80067ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067f2:	f7fa f969 	bl	8000ac8 <__aeabi_dcmpeq>
 80067f6:	b9c0      	cbnz	r0, 800682a <_printf_float+0x41a>
 80067f8:	4653      	mov	r3, sl
 80067fa:	f108 0201 	add.w	r2, r8, #1
 80067fe:	4631      	mov	r1, r6
 8006800:	4628      	mov	r0, r5
 8006802:	47b8      	blx	r7
 8006804:	3001      	adds	r0, #1
 8006806:	d10c      	bne.n	8006822 <_printf_float+0x412>
 8006808:	e65d      	b.n	80064c6 <_printf_float+0xb6>
 800680a:	2301      	movs	r3, #1
 800680c:	465a      	mov	r2, fp
 800680e:	4631      	mov	r1, r6
 8006810:	4628      	mov	r0, r5
 8006812:	47b8      	blx	r7
 8006814:	3001      	adds	r0, #1
 8006816:	f43f ae56 	beq.w	80064c6 <_printf_float+0xb6>
 800681a:	f108 0801 	add.w	r8, r8, #1
 800681e:	45d0      	cmp	r8, sl
 8006820:	dbf3      	blt.n	800680a <_printf_float+0x3fa>
 8006822:	464b      	mov	r3, r9
 8006824:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006828:	e6df      	b.n	80065ea <_printf_float+0x1da>
 800682a:	f04f 0800 	mov.w	r8, #0
 800682e:	f104 0b1a 	add.w	fp, r4, #26
 8006832:	e7f4      	b.n	800681e <_printf_float+0x40e>
 8006834:	2301      	movs	r3, #1
 8006836:	4642      	mov	r2, r8
 8006838:	e7e1      	b.n	80067fe <_printf_float+0x3ee>
 800683a:	2301      	movs	r3, #1
 800683c:	464a      	mov	r2, r9
 800683e:	4631      	mov	r1, r6
 8006840:	4628      	mov	r0, r5
 8006842:	47b8      	blx	r7
 8006844:	3001      	adds	r0, #1
 8006846:	f43f ae3e 	beq.w	80064c6 <_printf_float+0xb6>
 800684a:	f108 0801 	add.w	r8, r8, #1
 800684e:	68e3      	ldr	r3, [r4, #12]
 8006850:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006852:	1a5b      	subs	r3, r3, r1
 8006854:	4543      	cmp	r3, r8
 8006856:	dcf0      	bgt.n	800683a <_printf_float+0x42a>
 8006858:	e6fc      	b.n	8006654 <_printf_float+0x244>
 800685a:	f04f 0800 	mov.w	r8, #0
 800685e:	f104 0919 	add.w	r9, r4, #25
 8006862:	e7f4      	b.n	800684e <_printf_float+0x43e>

08006864 <_printf_common>:
 8006864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006868:	4616      	mov	r6, r2
 800686a:	4698      	mov	r8, r3
 800686c:	688a      	ldr	r2, [r1, #8]
 800686e:	690b      	ldr	r3, [r1, #16]
 8006870:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006874:	4293      	cmp	r3, r2
 8006876:	bfb8      	it	lt
 8006878:	4613      	movlt	r3, r2
 800687a:	6033      	str	r3, [r6, #0]
 800687c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006880:	4607      	mov	r7, r0
 8006882:	460c      	mov	r4, r1
 8006884:	b10a      	cbz	r2, 800688a <_printf_common+0x26>
 8006886:	3301      	adds	r3, #1
 8006888:	6033      	str	r3, [r6, #0]
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	0699      	lsls	r1, r3, #26
 800688e:	bf42      	ittt	mi
 8006890:	6833      	ldrmi	r3, [r6, #0]
 8006892:	3302      	addmi	r3, #2
 8006894:	6033      	strmi	r3, [r6, #0]
 8006896:	6825      	ldr	r5, [r4, #0]
 8006898:	f015 0506 	ands.w	r5, r5, #6
 800689c:	d106      	bne.n	80068ac <_printf_common+0x48>
 800689e:	f104 0a19 	add.w	sl, r4, #25
 80068a2:	68e3      	ldr	r3, [r4, #12]
 80068a4:	6832      	ldr	r2, [r6, #0]
 80068a6:	1a9b      	subs	r3, r3, r2
 80068a8:	42ab      	cmp	r3, r5
 80068aa:	dc26      	bgt.n	80068fa <_printf_common+0x96>
 80068ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068b0:	6822      	ldr	r2, [r4, #0]
 80068b2:	3b00      	subs	r3, #0
 80068b4:	bf18      	it	ne
 80068b6:	2301      	movne	r3, #1
 80068b8:	0692      	lsls	r2, r2, #26
 80068ba:	d42b      	bmi.n	8006914 <_printf_common+0xb0>
 80068bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068c0:	4641      	mov	r1, r8
 80068c2:	4638      	mov	r0, r7
 80068c4:	47c8      	blx	r9
 80068c6:	3001      	adds	r0, #1
 80068c8:	d01e      	beq.n	8006908 <_printf_common+0xa4>
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	6922      	ldr	r2, [r4, #16]
 80068ce:	f003 0306 	and.w	r3, r3, #6
 80068d2:	2b04      	cmp	r3, #4
 80068d4:	bf02      	ittt	eq
 80068d6:	68e5      	ldreq	r5, [r4, #12]
 80068d8:	6833      	ldreq	r3, [r6, #0]
 80068da:	1aed      	subeq	r5, r5, r3
 80068dc:	68a3      	ldr	r3, [r4, #8]
 80068de:	bf0c      	ite	eq
 80068e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068e4:	2500      	movne	r5, #0
 80068e6:	4293      	cmp	r3, r2
 80068e8:	bfc4      	itt	gt
 80068ea:	1a9b      	subgt	r3, r3, r2
 80068ec:	18ed      	addgt	r5, r5, r3
 80068ee:	2600      	movs	r6, #0
 80068f0:	341a      	adds	r4, #26
 80068f2:	42b5      	cmp	r5, r6
 80068f4:	d11a      	bne.n	800692c <_printf_common+0xc8>
 80068f6:	2000      	movs	r0, #0
 80068f8:	e008      	b.n	800690c <_printf_common+0xa8>
 80068fa:	2301      	movs	r3, #1
 80068fc:	4652      	mov	r2, sl
 80068fe:	4641      	mov	r1, r8
 8006900:	4638      	mov	r0, r7
 8006902:	47c8      	blx	r9
 8006904:	3001      	adds	r0, #1
 8006906:	d103      	bne.n	8006910 <_printf_common+0xac>
 8006908:	f04f 30ff 	mov.w	r0, #4294967295
 800690c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006910:	3501      	adds	r5, #1
 8006912:	e7c6      	b.n	80068a2 <_printf_common+0x3e>
 8006914:	18e1      	adds	r1, r4, r3
 8006916:	1c5a      	adds	r2, r3, #1
 8006918:	2030      	movs	r0, #48	@ 0x30
 800691a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800691e:	4422      	add	r2, r4
 8006920:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006924:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006928:	3302      	adds	r3, #2
 800692a:	e7c7      	b.n	80068bc <_printf_common+0x58>
 800692c:	2301      	movs	r3, #1
 800692e:	4622      	mov	r2, r4
 8006930:	4641      	mov	r1, r8
 8006932:	4638      	mov	r0, r7
 8006934:	47c8      	blx	r9
 8006936:	3001      	adds	r0, #1
 8006938:	d0e6      	beq.n	8006908 <_printf_common+0xa4>
 800693a:	3601      	adds	r6, #1
 800693c:	e7d9      	b.n	80068f2 <_printf_common+0x8e>
	...

08006940 <_printf_i>:
 8006940:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006944:	7e0f      	ldrb	r7, [r1, #24]
 8006946:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006948:	2f78      	cmp	r7, #120	@ 0x78
 800694a:	4691      	mov	r9, r2
 800694c:	4680      	mov	r8, r0
 800694e:	460c      	mov	r4, r1
 8006950:	469a      	mov	sl, r3
 8006952:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006956:	d807      	bhi.n	8006968 <_printf_i+0x28>
 8006958:	2f62      	cmp	r7, #98	@ 0x62
 800695a:	d80a      	bhi.n	8006972 <_printf_i+0x32>
 800695c:	2f00      	cmp	r7, #0
 800695e:	f000 80d2 	beq.w	8006b06 <_printf_i+0x1c6>
 8006962:	2f58      	cmp	r7, #88	@ 0x58
 8006964:	f000 80b9 	beq.w	8006ada <_printf_i+0x19a>
 8006968:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800696c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006970:	e03a      	b.n	80069e8 <_printf_i+0xa8>
 8006972:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006976:	2b15      	cmp	r3, #21
 8006978:	d8f6      	bhi.n	8006968 <_printf_i+0x28>
 800697a:	a101      	add	r1, pc, #4	@ (adr r1, 8006980 <_printf_i+0x40>)
 800697c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006980:	080069d9 	.word	0x080069d9
 8006984:	080069ed 	.word	0x080069ed
 8006988:	08006969 	.word	0x08006969
 800698c:	08006969 	.word	0x08006969
 8006990:	08006969 	.word	0x08006969
 8006994:	08006969 	.word	0x08006969
 8006998:	080069ed 	.word	0x080069ed
 800699c:	08006969 	.word	0x08006969
 80069a0:	08006969 	.word	0x08006969
 80069a4:	08006969 	.word	0x08006969
 80069a8:	08006969 	.word	0x08006969
 80069ac:	08006aed 	.word	0x08006aed
 80069b0:	08006a17 	.word	0x08006a17
 80069b4:	08006aa7 	.word	0x08006aa7
 80069b8:	08006969 	.word	0x08006969
 80069bc:	08006969 	.word	0x08006969
 80069c0:	08006b0f 	.word	0x08006b0f
 80069c4:	08006969 	.word	0x08006969
 80069c8:	08006a17 	.word	0x08006a17
 80069cc:	08006969 	.word	0x08006969
 80069d0:	08006969 	.word	0x08006969
 80069d4:	08006aaf 	.word	0x08006aaf
 80069d8:	6833      	ldr	r3, [r6, #0]
 80069da:	1d1a      	adds	r2, r3, #4
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6032      	str	r2, [r6, #0]
 80069e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80069e8:	2301      	movs	r3, #1
 80069ea:	e09d      	b.n	8006b28 <_printf_i+0x1e8>
 80069ec:	6833      	ldr	r3, [r6, #0]
 80069ee:	6820      	ldr	r0, [r4, #0]
 80069f0:	1d19      	adds	r1, r3, #4
 80069f2:	6031      	str	r1, [r6, #0]
 80069f4:	0606      	lsls	r6, r0, #24
 80069f6:	d501      	bpl.n	80069fc <_printf_i+0xbc>
 80069f8:	681d      	ldr	r5, [r3, #0]
 80069fa:	e003      	b.n	8006a04 <_printf_i+0xc4>
 80069fc:	0645      	lsls	r5, r0, #25
 80069fe:	d5fb      	bpl.n	80069f8 <_printf_i+0xb8>
 8006a00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a04:	2d00      	cmp	r5, #0
 8006a06:	da03      	bge.n	8006a10 <_printf_i+0xd0>
 8006a08:	232d      	movs	r3, #45	@ 0x2d
 8006a0a:	426d      	negs	r5, r5
 8006a0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a10:	4859      	ldr	r0, [pc, #356]	@ (8006b78 <_printf_i+0x238>)
 8006a12:	230a      	movs	r3, #10
 8006a14:	e011      	b.n	8006a3a <_printf_i+0xfa>
 8006a16:	6821      	ldr	r1, [r4, #0]
 8006a18:	6833      	ldr	r3, [r6, #0]
 8006a1a:	0608      	lsls	r0, r1, #24
 8006a1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a20:	d402      	bmi.n	8006a28 <_printf_i+0xe8>
 8006a22:	0649      	lsls	r1, r1, #25
 8006a24:	bf48      	it	mi
 8006a26:	b2ad      	uxthmi	r5, r5
 8006a28:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a2a:	4853      	ldr	r0, [pc, #332]	@ (8006b78 <_printf_i+0x238>)
 8006a2c:	6033      	str	r3, [r6, #0]
 8006a2e:	bf14      	ite	ne
 8006a30:	230a      	movne	r3, #10
 8006a32:	2308      	moveq	r3, #8
 8006a34:	2100      	movs	r1, #0
 8006a36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a3a:	6866      	ldr	r6, [r4, #4]
 8006a3c:	60a6      	str	r6, [r4, #8]
 8006a3e:	2e00      	cmp	r6, #0
 8006a40:	bfa2      	ittt	ge
 8006a42:	6821      	ldrge	r1, [r4, #0]
 8006a44:	f021 0104 	bicge.w	r1, r1, #4
 8006a48:	6021      	strge	r1, [r4, #0]
 8006a4a:	b90d      	cbnz	r5, 8006a50 <_printf_i+0x110>
 8006a4c:	2e00      	cmp	r6, #0
 8006a4e:	d04b      	beq.n	8006ae8 <_printf_i+0x1a8>
 8006a50:	4616      	mov	r6, r2
 8006a52:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a56:	fb03 5711 	mls	r7, r3, r1, r5
 8006a5a:	5dc7      	ldrb	r7, [r0, r7]
 8006a5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a60:	462f      	mov	r7, r5
 8006a62:	42bb      	cmp	r3, r7
 8006a64:	460d      	mov	r5, r1
 8006a66:	d9f4      	bls.n	8006a52 <_printf_i+0x112>
 8006a68:	2b08      	cmp	r3, #8
 8006a6a:	d10b      	bne.n	8006a84 <_printf_i+0x144>
 8006a6c:	6823      	ldr	r3, [r4, #0]
 8006a6e:	07df      	lsls	r7, r3, #31
 8006a70:	d508      	bpl.n	8006a84 <_printf_i+0x144>
 8006a72:	6923      	ldr	r3, [r4, #16]
 8006a74:	6861      	ldr	r1, [r4, #4]
 8006a76:	4299      	cmp	r1, r3
 8006a78:	bfde      	ittt	le
 8006a7a:	2330      	movle	r3, #48	@ 0x30
 8006a7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a84:	1b92      	subs	r2, r2, r6
 8006a86:	6122      	str	r2, [r4, #16]
 8006a88:	f8cd a000 	str.w	sl, [sp]
 8006a8c:	464b      	mov	r3, r9
 8006a8e:	aa03      	add	r2, sp, #12
 8006a90:	4621      	mov	r1, r4
 8006a92:	4640      	mov	r0, r8
 8006a94:	f7ff fee6 	bl	8006864 <_printf_common>
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d14a      	bne.n	8006b32 <_printf_i+0x1f2>
 8006a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa0:	b004      	add	sp, #16
 8006aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	f043 0320 	orr.w	r3, r3, #32
 8006aac:	6023      	str	r3, [r4, #0]
 8006aae:	4833      	ldr	r0, [pc, #204]	@ (8006b7c <_printf_i+0x23c>)
 8006ab0:	2778      	movs	r7, #120	@ 0x78
 8006ab2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	6831      	ldr	r1, [r6, #0]
 8006aba:	061f      	lsls	r7, r3, #24
 8006abc:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ac0:	d402      	bmi.n	8006ac8 <_printf_i+0x188>
 8006ac2:	065f      	lsls	r7, r3, #25
 8006ac4:	bf48      	it	mi
 8006ac6:	b2ad      	uxthmi	r5, r5
 8006ac8:	6031      	str	r1, [r6, #0]
 8006aca:	07d9      	lsls	r1, r3, #31
 8006acc:	bf44      	itt	mi
 8006ace:	f043 0320 	orrmi.w	r3, r3, #32
 8006ad2:	6023      	strmi	r3, [r4, #0]
 8006ad4:	b11d      	cbz	r5, 8006ade <_printf_i+0x19e>
 8006ad6:	2310      	movs	r3, #16
 8006ad8:	e7ac      	b.n	8006a34 <_printf_i+0xf4>
 8006ada:	4827      	ldr	r0, [pc, #156]	@ (8006b78 <_printf_i+0x238>)
 8006adc:	e7e9      	b.n	8006ab2 <_printf_i+0x172>
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	f023 0320 	bic.w	r3, r3, #32
 8006ae4:	6023      	str	r3, [r4, #0]
 8006ae6:	e7f6      	b.n	8006ad6 <_printf_i+0x196>
 8006ae8:	4616      	mov	r6, r2
 8006aea:	e7bd      	b.n	8006a68 <_printf_i+0x128>
 8006aec:	6833      	ldr	r3, [r6, #0]
 8006aee:	6825      	ldr	r5, [r4, #0]
 8006af0:	6961      	ldr	r1, [r4, #20]
 8006af2:	1d18      	adds	r0, r3, #4
 8006af4:	6030      	str	r0, [r6, #0]
 8006af6:	062e      	lsls	r6, r5, #24
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	d501      	bpl.n	8006b00 <_printf_i+0x1c0>
 8006afc:	6019      	str	r1, [r3, #0]
 8006afe:	e002      	b.n	8006b06 <_printf_i+0x1c6>
 8006b00:	0668      	lsls	r0, r5, #25
 8006b02:	d5fb      	bpl.n	8006afc <_printf_i+0x1bc>
 8006b04:	8019      	strh	r1, [r3, #0]
 8006b06:	2300      	movs	r3, #0
 8006b08:	6123      	str	r3, [r4, #16]
 8006b0a:	4616      	mov	r6, r2
 8006b0c:	e7bc      	b.n	8006a88 <_printf_i+0x148>
 8006b0e:	6833      	ldr	r3, [r6, #0]
 8006b10:	1d1a      	adds	r2, r3, #4
 8006b12:	6032      	str	r2, [r6, #0]
 8006b14:	681e      	ldr	r6, [r3, #0]
 8006b16:	6862      	ldr	r2, [r4, #4]
 8006b18:	2100      	movs	r1, #0
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	f7f9 fb58 	bl	80001d0 <memchr>
 8006b20:	b108      	cbz	r0, 8006b26 <_printf_i+0x1e6>
 8006b22:	1b80      	subs	r0, r0, r6
 8006b24:	6060      	str	r0, [r4, #4]
 8006b26:	6863      	ldr	r3, [r4, #4]
 8006b28:	6123      	str	r3, [r4, #16]
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b30:	e7aa      	b.n	8006a88 <_printf_i+0x148>
 8006b32:	6923      	ldr	r3, [r4, #16]
 8006b34:	4632      	mov	r2, r6
 8006b36:	4649      	mov	r1, r9
 8006b38:	4640      	mov	r0, r8
 8006b3a:	47d0      	blx	sl
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	d0ad      	beq.n	8006a9c <_printf_i+0x15c>
 8006b40:	6823      	ldr	r3, [r4, #0]
 8006b42:	079b      	lsls	r3, r3, #30
 8006b44:	d413      	bmi.n	8006b6e <_printf_i+0x22e>
 8006b46:	68e0      	ldr	r0, [r4, #12]
 8006b48:	9b03      	ldr	r3, [sp, #12]
 8006b4a:	4298      	cmp	r0, r3
 8006b4c:	bfb8      	it	lt
 8006b4e:	4618      	movlt	r0, r3
 8006b50:	e7a6      	b.n	8006aa0 <_printf_i+0x160>
 8006b52:	2301      	movs	r3, #1
 8006b54:	4632      	mov	r2, r6
 8006b56:	4649      	mov	r1, r9
 8006b58:	4640      	mov	r0, r8
 8006b5a:	47d0      	blx	sl
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	d09d      	beq.n	8006a9c <_printf_i+0x15c>
 8006b60:	3501      	adds	r5, #1
 8006b62:	68e3      	ldr	r3, [r4, #12]
 8006b64:	9903      	ldr	r1, [sp, #12]
 8006b66:	1a5b      	subs	r3, r3, r1
 8006b68:	42ab      	cmp	r3, r5
 8006b6a:	dcf2      	bgt.n	8006b52 <_printf_i+0x212>
 8006b6c:	e7eb      	b.n	8006b46 <_printf_i+0x206>
 8006b6e:	2500      	movs	r5, #0
 8006b70:	f104 0619 	add.w	r6, r4, #25
 8006b74:	e7f5      	b.n	8006b62 <_printf_i+0x222>
 8006b76:	bf00      	nop
 8006b78:	08009b0e 	.word	0x08009b0e
 8006b7c:	08009b1f 	.word	0x08009b1f

08006b80 <std>:
 8006b80:	2300      	movs	r3, #0
 8006b82:	b510      	push	{r4, lr}
 8006b84:	4604      	mov	r4, r0
 8006b86:	e9c0 3300 	strd	r3, r3, [r0]
 8006b8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b8e:	6083      	str	r3, [r0, #8]
 8006b90:	8181      	strh	r1, [r0, #12]
 8006b92:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b94:	81c2      	strh	r2, [r0, #14]
 8006b96:	6183      	str	r3, [r0, #24]
 8006b98:	4619      	mov	r1, r3
 8006b9a:	2208      	movs	r2, #8
 8006b9c:	305c      	adds	r0, #92	@ 0x5c
 8006b9e:	f000 f928 	bl	8006df2 <memset>
 8006ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8006bd8 <std+0x58>)
 8006ba4:	6263      	str	r3, [r4, #36]	@ 0x24
 8006ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8006bdc <std+0x5c>)
 8006ba8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006baa:	4b0d      	ldr	r3, [pc, #52]	@ (8006be0 <std+0x60>)
 8006bac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006bae:	4b0d      	ldr	r3, [pc, #52]	@ (8006be4 <std+0x64>)
 8006bb0:	6323      	str	r3, [r4, #48]	@ 0x30
 8006bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006be8 <std+0x68>)
 8006bb4:	6224      	str	r4, [r4, #32]
 8006bb6:	429c      	cmp	r4, r3
 8006bb8:	d006      	beq.n	8006bc8 <std+0x48>
 8006bba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006bbe:	4294      	cmp	r4, r2
 8006bc0:	d002      	beq.n	8006bc8 <std+0x48>
 8006bc2:	33d0      	adds	r3, #208	@ 0xd0
 8006bc4:	429c      	cmp	r4, r3
 8006bc6:	d105      	bne.n	8006bd4 <std+0x54>
 8006bc8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bd0:	f000 b98c 	b.w	8006eec <__retarget_lock_init_recursive>
 8006bd4:	bd10      	pop	{r4, pc}
 8006bd6:	bf00      	nop
 8006bd8:	08006d6d 	.word	0x08006d6d
 8006bdc:	08006d8f 	.word	0x08006d8f
 8006be0:	08006dc7 	.word	0x08006dc7
 8006be4:	08006deb 	.word	0x08006deb
 8006be8:	200007a4 	.word	0x200007a4

08006bec <stdio_exit_handler>:
 8006bec:	4a02      	ldr	r2, [pc, #8]	@ (8006bf8 <stdio_exit_handler+0xc>)
 8006bee:	4903      	ldr	r1, [pc, #12]	@ (8006bfc <stdio_exit_handler+0x10>)
 8006bf0:	4803      	ldr	r0, [pc, #12]	@ (8006c00 <stdio_exit_handler+0x14>)
 8006bf2:	f000 b869 	b.w	8006cc8 <_fwalk_sglue>
 8006bf6:	bf00      	nop
 8006bf8:	2000040c 	.word	0x2000040c
 8006bfc:	0800884d 	.word	0x0800884d
 8006c00:	2000041c 	.word	0x2000041c

08006c04 <cleanup_stdio>:
 8006c04:	6841      	ldr	r1, [r0, #4]
 8006c06:	4b0c      	ldr	r3, [pc, #48]	@ (8006c38 <cleanup_stdio+0x34>)
 8006c08:	4299      	cmp	r1, r3
 8006c0a:	b510      	push	{r4, lr}
 8006c0c:	4604      	mov	r4, r0
 8006c0e:	d001      	beq.n	8006c14 <cleanup_stdio+0x10>
 8006c10:	f001 fe1c 	bl	800884c <_fflush_r>
 8006c14:	68a1      	ldr	r1, [r4, #8]
 8006c16:	4b09      	ldr	r3, [pc, #36]	@ (8006c3c <cleanup_stdio+0x38>)
 8006c18:	4299      	cmp	r1, r3
 8006c1a:	d002      	beq.n	8006c22 <cleanup_stdio+0x1e>
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	f001 fe15 	bl	800884c <_fflush_r>
 8006c22:	68e1      	ldr	r1, [r4, #12]
 8006c24:	4b06      	ldr	r3, [pc, #24]	@ (8006c40 <cleanup_stdio+0x3c>)
 8006c26:	4299      	cmp	r1, r3
 8006c28:	d004      	beq.n	8006c34 <cleanup_stdio+0x30>
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c30:	f001 be0c 	b.w	800884c <_fflush_r>
 8006c34:	bd10      	pop	{r4, pc}
 8006c36:	bf00      	nop
 8006c38:	200007a4 	.word	0x200007a4
 8006c3c:	2000080c 	.word	0x2000080c
 8006c40:	20000874 	.word	0x20000874

08006c44 <global_stdio_init.part.0>:
 8006c44:	b510      	push	{r4, lr}
 8006c46:	4b0b      	ldr	r3, [pc, #44]	@ (8006c74 <global_stdio_init.part.0+0x30>)
 8006c48:	4c0b      	ldr	r4, [pc, #44]	@ (8006c78 <global_stdio_init.part.0+0x34>)
 8006c4a:	4a0c      	ldr	r2, [pc, #48]	@ (8006c7c <global_stdio_init.part.0+0x38>)
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	4620      	mov	r0, r4
 8006c50:	2200      	movs	r2, #0
 8006c52:	2104      	movs	r1, #4
 8006c54:	f7ff ff94 	bl	8006b80 <std>
 8006c58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	2109      	movs	r1, #9
 8006c60:	f7ff ff8e 	bl	8006b80 <std>
 8006c64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c68:	2202      	movs	r2, #2
 8006c6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c6e:	2112      	movs	r1, #18
 8006c70:	f7ff bf86 	b.w	8006b80 <std>
 8006c74:	200008dc 	.word	0x200008dc
 8006c78:	200007a4 	.word	0x200007a4
 8006c7c:	08006bed 	.word	0x08006bed

08006c80 <__sfp_lock_acquire>:
 8006c80:	4801      	ldr	r0, [pc, #4]	@ (8006c88 <__sfp_lock_acquire+0x8>)
 8006c82:	f000 b934 	b.w	8006eee <__retarget_lock_acquire_recursive>
 8006c86:	bf00      	nop
 8006c88:	200008e5 	.word	0x200008e5

08006c8c <__sfp_lock_release>:
 8006c8c:	4801      	ldr	r0, [pc, #4]	@ (8006c94 <__sfp_lock_release+0x8>)
 8006c8e:	f000 b92f 	b.w	8006ef0 <__retarget_lock_release_recursive>
 8006c92:	bf00      	nop
 8006c94:	200008e5 	.word	0x200008e5

08006c98 <__sinit>:
 8006c98:	b510      	push	{r4, lr}
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	f7ff fff0 	bl	8006c80 <__sfp_lock_acquire>
 8006ca0:	6a23      	ldr	r3, [r4, #32]
 8006ca2:	b11b      	cbz	r3, 8006cac <__sinit+0x14>
 8006ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ca8:	f7ff bff0 	b.w	8006c8c <__sfp_lock_release>
 8006cac:	4b04      	ldr	r3, [pc, #16]	@ (8006cc0 <__sinit+0x28>)
 8006cae:	6223      	str	r3, [r4, #32]
 8006cb0:	4b04      	ldr	r3, [pc, #16]	@ (8006cc4 <__sinit+0x2c>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1f5      	bne.n	8006ca4 <__sinit+0xc>
 8006cb8:	f7ff ffc4 	bl	8006c44 <global_stdio_init.part.0>
 8006cbc:	e7f2      	b.n	8006ca4 <__sinit+0xc>
 8006cbe:	bf00      	nop
 8006cc0:	08006c05 	.word	0x08006c05
 8006cc4:	200008dc 	.word	0x200008dc

08006cc8 <_fwalk_sglue>:
 8006cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ccc:	4607      	mov	r7, r0
 8006cce:	4688      	mov	r8, r1
 8006cd0:	4614      	mov	r4, r2
 8006cd2:	2600      	movs	r6, #0
 8006cd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cd8:	f1b9 0901 	subs.w	r9, r9, #1
 8006cdc:	d505      	bpl.n	8006cea <_fwalk_sglue+0x22>
 8006cde:	6824      	ldr	r4, [r4, #0]
 8006ce0:	2c00      	cmp	r4, #0
 8006ce2:	d1f7      	bne.n	8006cd4 <_fwalk_sglue+0xc>
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cea:	89ab      	ldrh	r3, [r5, #12]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d907      	bls.n	8006d00 <_fwalk_sglue+0x38>
 8006cf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	d003      	beq.n	8006d00 <_fwalk_sglue+0x38>
 8006cf8:	4629      	mov	r1, r5
 8006cfa:	4638      	mov	r0, r7
 8006cfc:	47c0      	blx	r8
 8006cfe:	4306      	orrs	r6, r0
 8006d00:	3568      	adds	r5, #104	@ 0x68
 8006d02:	e7e9      	b.n	8006cd8 <_fwalk_sglue+0x10>

08006d04 <sniprintf>:
 8006d04:	b40c      	push	{r2, r3}
 8006d06:	b530      	push	{r4, r5, lr}
 8006d08:	4b17      	ldr	r3, [pc, #92]	@ (8006d68 <sniprintf+0x64>)
 8006d0a:	1e0c      	subs	r4, r1, #0
 8006d0c:	681d      	ldr	r5, [r3, #0]
 8006d0e:	b09d      	sub	sp, #116	@ 0x74
 8006d10:	da08      	bge.n	8006d24 <sniprintf+0x20>
 8006d12:	238b      	movs	r3, #139	@ 0x8b
 8006d14:	602b      	str	r3, [r5, #0]
 8006d16:	f04f 30ff 	mov.w	r0, #4294967295
 8006d1a:	b01d      	add	sp, #116	@ 0x74
 8006d1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d20:	b002      	add	sp, #8
 8006d22:	4770      	bx	lr
 8006d24:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006d28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006d2c:	bf14      	ite	ne
 8006d2e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006d32:	4623      	moveq	r3, r4
 8006d34:	9304      	str	r3, [sp, #16]
 8006d36:	9307      	str	r3, [sp, #28]
 8006d38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006d3c:	9002      	str	r0, [sp, #8]
 8006d3e:	9006      	str	r0, [sp, #24]
 8006d40:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006d44:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006d46:	ab21      	add	r3, sp, #132	@ 0x84
 8006d48:	a902      	add	r1, sp, #8
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	9301      	str	r3, [sp, #4]
 8006d4e:	f001 fbfd 	bl	800854c <_svfiprintf_r>
 8006d52:	1c43      	adds	r3, r0, #1
 8006d54:	bfbc      	itt	lt
 8006d56:	238b      	movlt	r3, #139	@ 0x8b
 8006d58:	602b      	strlt	r3, [r5, #0]
 8006d5a:	2c00      	cmp	r4, #0
 8006d5c:	d0dd      	beq.n	8006d1a <sniprintf+0x16>
 8006d5e:	9b02      	ldr	r3, [sp, #8]
 8006d60:	2200      	movs	r2, #0
 8006d62:	701a      	strb	r2, [r3, #0]
 8006d64:	e7d9      	b.n	8006d1a <sniprintf+0x16>
 8006d66:	bf00      	nop
 8006d68:	20000418 	.word	0x20000418

08006d6c <__sread>:
 8006d6c:	b510      	push	{r4, lr}
 8006d6e:	460c      	mov	r4, r1
 8006d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d74:	f000 f86c 	bl	8006e50 <_read_r>
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	bfab      	itete	ge
 8006d7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d7e:	89a3      	ldrhlt	r3, [r4, #12]
 8006d80:	181b      	addge	r3, r3, r0
 8006d82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d86:	bfac      	ite	ge
 8006d88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d8a:	81a3      	strhlt	r3, [r4, #12]
 8006d8c:	bd10      	pop	{r4, pc}

08006d8e <__swrite>:
 8006d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d92:	461f      	mov	r7, r3
 8006d94:	898b      	ldrh	r3, [r1, #12]
 8006d96:	05db      	lsls	r3, r3, #23
 8006d98:	4605      	mov	r5, r0
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	4616      	mov	r6, r2
 8006d9e:	d505      	bpl.n	8006dac <__swrite+0x1e>
 8006da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da4:	2302      	movs	r3, #2
 8006da6:	2200      	movs	r2, #0
 8006da8:	f000 f840 	bl	8006e2c <_lseek_r>
 8006dac:	89a3      	ldrh	r3, [r4, #12]
 8006dae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006db2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006db6:	81a3      	strh	r3, [r4, #12]
 8006db8:	4632      	mov	r2, r6
 8006dba:	463b      	mov	r3, r7
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc2:	f000 b857 	b.w	8006e74 <_write_r>

08006dc6 <__sseek>:
 8006dc6:	b510      	push	{r4, lr}
 8006dc8:	460c      	mov	r4, r1
 8006dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dce:	f000 f82d 	bl	8006e2c <_lseek_r>
 8006dd2:	1c43      	adds	r3, r0, #1
 8006dd4:	89a3      	ldrh	r3, [r4, #12]
 8006dd6:	bf15      	itete	ne
 8006dd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006dda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006dde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006de2:	81a3      	strheq	r3, [r4, #12]
 8006de4:	bf18      	it	ne
 8006de6:	81a3      	strhne	r3, [r4, #12]
 8006de8:	bd10      	pop	{r4, pc}

08006dea <__sclose>:
 8006dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dee:	f000 b80d 	b.w	8006e0c <_close_r>

08006df2 <memset>:
 8006df2:	4402      	add	r2, r0
 8006df4:	4603      	mov	r3, r0
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d100      	bne.n	8006dfc <memset+0xa>
 8006dfa:	4770      	bx	lr
 8006dfc:	f803 1b01 	strb.w	r1, [r3], #1
 8006e00:	e7f9      	b.n	8006df6 <memset+0x4>
	...

08006e04 <_localeconv_r>:
 8006e04:	4800      	ldr	r0, [pc, #0]	@ (8006e08 <_localeconv_r+0x4>)
 8006e06:	4770      	bx	lr
 8006e08:	20000558 	.word	0x20000558

08006e0c <_close_r>:
 8006e0c:	b538      	push	{r3, r4, r5, lr}
 8006e0e:	4d06      	ldr	r5, [pc, #24]	@ (8006e28 <_close_r+0x1c>)
 8006e10:	2300      	movs	r3, #0
 8006e12:	4604      	mov	r4, r0
 8006e14:	4608      	mov	r0, r1
 8006e16:	602b      	str	r3, [r5, #0]
 8006e18:	f7fa fca2 	bl	8001760 <_close>
 8006e1c:	1c43      	adds	r3, r0, #1
 8006e1e:	d102      	bne.n	8006e26 <_close_r+0x1a>
 8006e20:	682b      	ldr	r3, [r5, #0]
 8006e22:	b103      	cbz	r3, 8006e26 <_close_r+0x1a>
 8006e24:	6023      	str	r3, [r4, #0]
 8006e26:	bd38      	pop	{r3, r4, r5, pc}
 8006e28:	200008e0 	.word	0x200008e0

08006e2c <_lseek_r>:
 8006e2c:	b538      	push	{r3, r4, r5, lr}
 8006e2e:	4d07      	ldr	r5, [pc, #28]	@ (8006e4c <_lseek_r+0x20>)
 8006e30:	4604      	mov	r4, r0
 8006e32:	4608      	mov	r0, r1
 8006e34:	4611      	mov	r1, r2
 8006e36:	2200      	movs	r2, #0
 8006e38:	602a      	str	r2, [r5, #0]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	f7fa fcb7 	bl	80017ae <_lseek>
 8006e40:	1c43      	adds	r3, r0, #1
 8006e42:	d102      	bne.n	8006e4a <_lseek_r+0x1e>
 8006e44:	682b      	ldr	r3, [r5, #0]
 8006e46:	b103      	cbz	r3, 8006e4a <_lseek_r+0x1e>
 8006e48:	6023      	str	r3, [r4, #0]
 8006e4a:	bd38      	pop	{r3, r4, r5, pc}
 8006e4c:	200008e0 	.word	0x200008e0

08006e50 <_read_r>:
 8006e50:	b538      	push	{r3, r4, r5, lr}
 8006e52:	4d07      	ldr	r5, [pc, #28]	@ (8006e70 <_read_r+0x20>)
 8006e54:	4604      	mov	r4, r0
 8006e56:	4608      	mov	r0, r1
 8006e58:	4611      	mov	r1, r2
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	602a      	str	r2, [r5, #0]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	f7fa fc45 	bl	80016ee <_read>
 8006e64:	1c43      	adds	r3, r0, #1
 8006e66:	d102      	bne.n	8006e6e <_read_r+0x1e>
 8006e68:	682b      	ldr	r3, [r5, #0]
 8006e6a:	b103      	cbz	r3, 8006e6e <_read_r+0x1e>
 8006e6c:	6023      	str	r3, [r4, #0]
 8006e6e:	bd38      	pop	{r3, r4, r5, pc}
 8006e70:	200008e0 	.word	0x200008e0

08006e74 <_write_r>:
 8006e74:	b538      	push	{r3, r4, r5, lr}
 8006e76:	4d07      	ldr	r5, [pc, #28]	@ (8006e94 <_write_r+0x20>)
 8006e78:	4604      	mov	r4, r0
 8006e7a:	4608      	mov	r0, r1
 8006e7c:	4611      	mov	r1, r2
 8006e7e:	2200      	movs	r2, #0
 8006e80:	602a      	str	r2, [r5, #0]
 8006e82:	461a      	mov	r2, r3
 8006e84:	f7fa fc50 	bl	8001728 <_write>
 8006e88:	1c43      	adds	r3, r0, #1
 8006e8a:	d102      	bne.n	8006e92 <_write_r+0x1e>
 8006e8c:	682b      	ldr	r3, [r5, #0]
 8006e8e:	b103      	cbz	r3, 8006e92 <_write_r+0x1e>
 8006e90:	6023      	str	r3, [r4, #0]
 8006e92:	bd38      	pop	{r3, r4, r5, pc}
 8006e94:	200008e0 	.word	0x200008e0

08006e98 <__errno>:
 8006e98:	4b01      	ldr	r3, [pc, #4]	@ (8006ea0 <__errno+0x8>)
 8006e9a:	6818      	ldr	r0, [r3, #0]
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	20000418 	.word	0x20000418

08006ea4 <__libc_init_array>:
 8006ea4:	b570      	push	{r4, r5, r6, lr}
 8006ea6:	4d0d      	ldr	r5, [pc, #52]	@ (8006edc <__libc_init_array+0x38>)
 8006ea8:	4c0d      	ldr	r4, [pc, #52]	@ (8006ee0 <__libc_init_array+0x3c>)
 8006eaa:	1b64      	subs	r4, r4, r5
 8006eac:	10a4      	asrs	r4, r4, #2
 8006eae:	2600      	movs	r6, #0
 8006eb0:	42a6      	cmp	r6, r4
 8006eb2:	d109      	bne.n	8006ec8 <__libc_init_array+0x24>
 8006eb4:	4d0b      	ldr	r5, [pc, #44]	@ (8006ee4 <__libc_init_array+0x40>)
 8006eb6:	4c0c      	ldr	r4, [pc, #48]	@ (8006ee8 <__libc_init_array+0x44>)
 8006eb8:	f002 fdd2 	bl	8009a60 <_init>
 8006ebc:	1b64      	subs	r4, r4, r5
 8006ebe:	10a4      	asrs	r4, r4, #2
 8006ec0:	2600      	movs	r6, #0
 8006ec2:	42a6      	cmp	r6, r4
 8006ec4:	d105      	bne.n	8006ed2 <__libc_init_array+0x2e>
 8006ec6:	bd70      	pop	{r4, r5, r6, pc}
 8006ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ecc:	4798      	blx	r3
 8006ece:	3601      	adds	r6, #1
 8006ed0:	e7ee      	b.n	8006eb0 <__libc_init_array+0xc>
 8006ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ed6:	4798      	blx	r3
 8006ed8:	3601      	adds	r6, #1
 8006eda:	e7f2      	b.n	8006ec2 <__libc_init_array+0x1e>
 8006edc:	08009e90 	.word	0x08009e90
 8006ee0:	08009e90 	.word	0x08009e90
 8006ee4:	08009e90 	.word	0x08009e90
 8006ee8:	08009e94 	.word	0x08009e94

08006eec <__retarget_lock_init_recursive>:
 8006eec:	4770      	bx	lr

08006eee <__retarget_lock_acquire_recursive>:
 8006eee:	4770      	bx	lr

08006ef0 <__retarget_lock_release_recursive>:
 8006ef0:	4770      	bx	lr

08006ef2 <quorem>:
 8006ef2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef6:	6903      	ldr	r3, [r0, #16]
 8006ef8:	690c      	ldr	r4, [r1, #16]
 8006efa:	42a3      	cmp	r3, r4
 8006efc:	4607      	mov	r7, r0
 8006efe:	db7e      	blt.n	8006ffe <quorem+0x10c>
 8006f00:	3c01      	subs	r4, #1
 8006f02:	f101 0814 	add.w	r8, r1, #20
 8006f06:	00a3      	lsls	r3, r4, #2
 8006f08:	f100 0514 	add.w	r5, r0, #20
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f12:	9301      	str	r3, [sp, #4]
 8006f14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f24:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f28:	d32e      	bcc.n	8006f88 <quorem+0x96>
 8006f2a:	f04f 0a00 	mov.w	sl, #0
 8006f2e:	46c4      	mov	ip, r8
 8006f30:	46ae      	mov	lr, r5
 8006f32:	46d3      	mov	fp, sl
 8006f34:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f38:	b298      	uxth	r0, r3
 8006f3a:	fb06 a000 	mla	r0, r6, r0, sl
 8006f3e:	0c02      	lsrs	r2, r0, #16
 8006f40:	0c1b      	lsrs	r3, r3, #16
 8006f42:	fb06 2303 	mla	r3, r6, r3, r2
 8006f46:	f8de 2000 	ldr.w	r2, [lr]
 8006f4a:	b280      	uxth	r0, r0
 8006f4c:	b292      	uxth	r2, r2
 8006f4e:	1a12      	subs	r2, r2, r0
 8006f50:	445a      	add	r2, fp
 8006f52:	f8de 0000 	ldr.w	r0, [lr]
 8006f56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006f60:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006f64:	b292      	uxth	r2, r2
 8006f66:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006f6a:	45e1      	cmp	r9, ip
 8006f6c:	f84e 2b04 	str.w	r2, [lr], #4
 8006f70:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006f74:	d2de      	bcs.n	8006f34 <quorem+0x42>
 8006f76:	9b00      	ldr	r3, [sp, #0]
 8006f78:	58eb      	ldr	r3, [r5, r3]
 8006f7a:	b92b      	cbnz	r3, 8006f88 <quorem+0x96>
 8006f7c:	9b01      	ldr	r3, [sp, #4]
 8006f7e:	3b04      	subs	r3, #4
 8006f80:	429d      	cmp	r5, r3
 8006f82:	461a      	mov	r2, r3
 8006f84:	d32f      	bcc.n	8006fe6 <quorem+0xf4>
 8006f86:	613c      	str	r4, [r7, #16]
 8006f88:	4638      	mov	r0, r7
 8006f8a:	f001 f97b 	bl	8008284 <__mcmp>
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	db25      	blt.n	8006fde <quorem+0xec>
 8006f92:	4629      	mov	r1, r5
 8006f94:	2000      	movs	r0, #0
 8006f96:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f9a:	f8d1 c000 	ldr.w	ip, [r1]
 8006f9e:	fa1f fe82 	uxth.w	lr, r2
 8006fa2:	fa1f f38c 	uxth.w	r3, ip
 8006fa6:	eba3 030e 	sub.w	r3, r3, lr
 8006faa:	4403      	add	r3, r0
 8006fac:	0c12      	lsrs	r2, r2, #16
 8006fae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006fb2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fbc:	45c1      	cmp	r9, r8
 8006fbe:	f841 3b04 	str.w	r3, [r1], #4
 8006fc2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006fc6:	d2e6      	bcs.n	8006f96 <quorem+0xa4>
 8006fc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fcc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fd0:	b922      	cbnz	r2, 8006fdc <quorem+0xea>
 8006fd2:	3b04      	subs	r3, #4
 8006fd4:	429d      	cmp	r5, r3
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	d30b      	bcc.n	8006ff2 <quorem+0x100>
 8006fda:	613c      	str	r4, [r7, #16]
 8006fdc:	3601      	adds	r6, #1
 8006fde:	4630      	mov	r0, r6
 8006fe0:	b003      	add	sp, #12
 8006fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe6:	6812      	ldr	r2, [r2, #0]
 8006fe8:	3b04      	subs	r3, #4
 8006fea:	2a00      	cmp	r2, #0
 8006fec:	d1cb      	bne.n	8006f86 <quorem+0x94>
 8006fee:	3c01      	subs	r4, #1
 8006ff0:	e7c6      	b.n	8006f80 <quorem+0x8e>
 8006ff2:	6812      	ldr	r2, [r2, #0]
 8006ff4:	3b04      	subs	r3, #4
 8006ff6:	2a00      	cmp	r2, #0
 8006ff8:	d1ef      	bne.n	8006fda <quorem+0xe8>
 8006ffa:	3c01      	subs	r4, #1
 8006ffc:	e7ea      	b.n	8006fd4 <quorem+0xe2>
 8006ffe:	2000      	movs	r0, #0
 8007000:	e7ee      	b.n	8006fe0 <quorem+0xee>
 8007002:	0000      	movs	r0, r0
 8007004:	0000      	movs	r0, r0
	...

08007008 <_dtoa_r>:
 8007008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800700c:	69c7      	ldr	r7, [r0, #28]
 800700e:	b099      	sub	sp, #100	@ 0x64
 8007010:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007014:	ec55 4b10 	vmov	r4, r5, d0
 8007018:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800701a:	9109      	str	r1, [sp, #36]	@ 0x24
 800701c:	4683      	mov	fp, r0
 800701e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007020:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007022:	b97f      	cbnz	r7, 8007044 <_dtoa_r+0x3c>
 8007024:	2010      	movs	r0, #16
 8007026:	f000 fdfd 	bl	8007c24 <malloc>
 800702a:	4602      	mov	r2, r0
 800702c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007030:	b920      	cbnz	r0, 800703c <_dtoa_r+0x34>
 8007032:	4ba7      	ldr	r3, [pc, #668]	@ (80072d0 <_dtoa_r+0x2c8>)
 8007034:	21ef      	movs	r1, #239	@ 0xef
 8007036:	48a7      	ldr	r0, [pc, #668]	@ (80072d4 <_dtoa_r+0x2cc>)
 8007038:	f001 fc68 	bl	800890c <__assert_func>
 800703c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007040:	6007      	str	r7, [r0, #0]
 8007042:	60c7      	str	r7, [r0, #12]
 8007044:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007048:	6819      	ldr	r1, [r3, #0]
 800704a:	b159      	cbz	r1, 8007064 <_dtoa_r+0x5c>
 800704c:	685a      	ldr	r2, [r3, #4]
 800704e:	604a      	str	r2, [r1, #4]
 8007050:	2301      	movs	r3, #1
 8007052:	4093      	lsls	r3, r2
 8007054:	608b      	str	r3, [r1, #8]
 8007056:	4658      	mov	r0, fp
 8007058:	f000 feda 	bl	8007e10 <_Bfree>
 800705c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007060:	2200      	movs	r2, #0
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	1e2b      	subs	r3, r5, #0
 8007066:	bfb9      	ittee	lt
 8007068:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800706c:	9303      	strlt	r3, [sp, #12]
 800706e:	2300      	movge	r3, #0
 8007070:	6033      	strge	r3, [r6, #0]
 8007072:	9f03      	ldr	r7, [sp, #12]
 8007074:	4b98      	ldr	r3, [pc, #608]	@ (80072d8 <_dtoa_r+0x2d0>)
 8007076:	bfbc      	itt	lt
 8007078:	2201      	movlt	r2, #1
 800707a:	6032      	strlt	r2, [r6, #0]
 800707c:	43bb      	bics	r3, r7
 800707e:	d112      	bne.n	80070a6 <_dtoa_r+0x9e>
 8007080:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007082:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007086:	6013      	str	r3, [r2, #0]
 8007088:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800708c:	4323      	orrs	r3, r4
 800708e:	f000 854d 	beq.w	8007b2c <_dtoa_r+0xb24>
 8007092:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007094:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80072ec <_dtoa_r+0x2e4>
 8007098:	2b00      	cmp	r3, #0
 800709a:	f000 854f 	beq.w	8007b3c <_dtoa_r+0xb34>
 800709e:	f10a 0303 	add.w	r3, sl, #3
 80070a2:	f000 bd49 	b.w	8007b38 <_dtoa_r+0xb30>
 80070a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80070aa:	2200      	movs	r2, #0
 80070ac:	ec51 0b17 	vmov	r0, r1, d7
 80070b0:	2300      	movs	r3, #0
 80070b2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80070b6:	f7f9 fd07 	bl	8000ac8 <__aeabi_dcmpeq>
 80070ba:	4680      	mov	r8, r0
 80070bc:	b158      	cbz	r0, 80070d6 <_dtoa_r+0xce>
 80070be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80070c0:	2301      	movs	r3, #1
 80070c2:	6013      	str	r3, [r2, #0]
 80070c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80070c6:	b113      	cbz	r3, 80070ce <_dtoa_r+0xc6>
 80070c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80070ca:	4b84      	ldr	r3, [pc, #528]	@ (80072dc <_dtoa_r+0x2d4>)
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80072f0 <_dtoa_r+0x2e8>
 80070d2:	f000 bd33 	b.w	8007b3c <_dtoa_r+0xb34>
 80070d6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80070da:	aa16      	add	r2, sp, #88	@ 0x58
 80070dc:	a917      	add	r1, sp, #92	@ 0x5c
 80070de:	4658      	mov	r0, fp
 80070e0:	f001 f980 	bl	80083e4 <__d2b>
 80070e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80070e8:	4681      	mov	r9, r0
 80070ea:	2e00      	cmp	r6, #0
 80070ec:	d077      	beq.n	80071de <_dtoa_r+0x1d6>
 80070ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070f0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80070f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007100:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007104:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007108:	4619      	mov	r1, r3
 800710a:	2200      	movs	r2, #0
 800710c:	4b74      	ldr	r3, [pc, #464]	@ (80072e0 <_dtoa_r+0x2d8>)
 800710e:	f7f9 f8bb 	bl	8000288 <__aeabi_dsub>
 8007112:	a369      	add	r3, pc, #420	@ (adr r3, 80072b8 <_dtoa_r+0x2b0>)
 8007114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007118:	f7f9 fa6e 	bl	80005f8 <__aeabi_dmul>
 800711c:	a368      	add	r3, pc, #416	@ (adr r3, 80072c0 <_dtoa_r+0x2b8>)
 800711e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007122:	f7f9 f8b3 	bl	800028c <__adddf3>
 8007126:	4604      	mov	r4, r0
 8007128:	4630      	mov	r0, r6
 800712a:	460d      	mov	r5, r1
 800712c:	f7f9 f9fa 	bl	8000524 <__aeabi_i2d>
 8007130:	a365      	add	r3, pc, #404	@ (adr r3, 80072c8 <_dtoa_r+0x2c0>)
 8007132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007136:	f7f9 fa5f 	bl	80005f8 <__aeabi_dmul>
 800713a:	4602      	mov	r2, r0
 800713c:	460b      	mov	r3, r1
 800713e:	4620      	mov	r0, r4
 8007140:	4629      	mov	r1, r5
 8007142:	f7f9 f8a3 	bl	800028c <__adddf3>
 8007146:	4604      	mov	r4, r0
 8007148:	460d      	mov	r5, r1
 800714a:	f7f9 fd05 	bl	8000b58 <__aeabi_d2iz>
 800714e:	2200      	movs	r2, #0
 8007150:	4607      	mov	r7, r0
 8007152:	2300      	movs	r3, #0
 8007154:	4620      	mov	r0, r4
 8007156:	4629      	mov	r1, r5
 8007158:	f7f9 fcc0 	bl	8000adc <__aeabi_dcmplt>
 800715c:	b140      	cbz	r0, 8007170 <_dtoa_r+0x168>
 800715e:	4638      	mov	r0, r7
 8007160:	f7f9 f9e0 	bl	8000524 <__aeabi_i2d>
 8007164:	4622      	mov	r2, r4
 8007166:	462b      	mov	r3, r5
 8007168:	f7f9 fcae 	bl	8000ac8 <__aeabi_dcmpeq>
 800716c:	b900      	cbnz	r0, 8007170 <_dtoa_r+0x168>
 800716e:	3f01      	subs	r7, #1
 8007170:	2f16      	cmp	r7, #22
 8007172:	d851      	bhi.n	8007218 <_dtoa_r+0x210>
 8007174:	4b5b      	ldr	r3, [pc, #364]	@ (80072e4 <_dtoa_r+0x2dc>)
 8007176:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800717a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007182:	f7f9 fcab 	bl	8000adc <__aeabi_dcmplt>
 8007186:	2800      	cmp	r0, #0
 8007188:	d048      	beq.n	800721c <_dtoa_r+0x214>
 800718a:	3f01      	subs	r7, #1
 800718c:	2300      	movs	r3, #0
 800718e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007190:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007192:	1b9b      	subs	r3, r3, r6
 8007194:	1e5a      	subs	r2, r3, #1
 8007196:	bf44      	itt	mi
 8007198:	f1c3 0801 	rsbmi	r8, r3, #1
 800719c:	2300      	movmi	r3, #0
 800719e:	9208      	str	r2, [sp, #32]
 80071a0:	bf54      	ite	pl
 80071a2:	f04f 0800 	movpl.w	r8, #0
 80071a6:	9308      	strmi	r3, [sp, #32]
 80071a8:	2f00      	cmp	r7, #0
 80071aa:	db39      	blt.n	8007220 <_dtoa_r+0x218>
 80071ac:	9b08      	ldr	r3, [sp, #32]
 80071ae:	970f      	str	r7, [sp, #60]	@ 0x3c
 80071b0:	443b      	add	r3, r7
 80071b2:	9308      	str	r3, [sp, #32]
 80071b4:	2300      	movs	r3, #0
 80071b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80071b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071ba:	2b09      	cmp	r3, #9
 80071bc:	d864      	bhi.n	8007288 <_dtoa_r+0x280>
 80071be:	2b05      	cmp	r3, #5
 80071c0:	bfc4      	itt	gt
 80071c2:	3b04      	subgt	r3, #4
 80071c4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80071c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071c8:	f1a3 0302 	sub.w	r3, r3, #2
 80071cc:	bfcc      	ite	gt
 80071ce:	2400      	movgt	r4, #0
 80071d0:	2401      	movle	r4, #1
 80071d2:	2b03      	cmp	r3, #3
 80071d4:	d863      	bhi.n	800729e <_dtoa_r+0x296>
 80071d6:	e8df f003 	tbb	[pc, r3]
 80071da:	372a      	.short	0x372a
 80071dc:	5535      	.short	0x5535
 80071de:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80071e2:	441e      	add	r6, r3
 80071e4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80071e8:	2b20      	cmp	r3, #32
 80071ea:	bfc1      	itttt	gt
 80071ec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80071f0:	409f      	lslgt	r7, r3
 80071f2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80071f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80071fa:	bfd6      	itet	le
 80071fc:	f1c3 0320 	rsble	r3, r3, #32
 8007200:	ea47 0003 	orrgt.w	r0, r7, r3
 8007204:	fa04 f003 	lslle.w	r0, r4, r3
 8007208:	f7f9 f97c 	bl	8000504 <__aeabi_ui2d>
 800720c:	2201      	movs	r2, #1
 800720e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007212:	3e01      	subs	r6, #1
 8007214:	9214      	str	r2, [sp, #80]	@ 0x50
 8007216:	e777      	b.n	8007108 <_dtoa_r+0x100>
 8007218:	2301      	movs	r3, #1
 800721a:	e7b8      	b.n	800718e <_dtoa_r+0x186>
 800721c:	9012      	str	r0, [sp, #72]	@ 0x48
 800721e:	e7b7      	b.n	8007190 <_dtoa_r+0x188>
 8007220:	427b      	negs	r3, r7
 8007222:	930a      	str	r3, [sp, #40]	@ 0x28
 8007224:	2300      	movs	r3, #0
 8007226:	eba8 0807 	sub.w	r8, r8, r7
 800722a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800722c:	e7c4      	b.n	80071b8 <_dtoa_r+0x1b0>
 800722e:	2300      	movs	r3, #0
 8007230:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007232:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007234:	2b00      	cmp	r3, #0
 8007236:	dc35      	bgt.n	80072a4 <_dtoa_r+0x29c>
 8007238:	2301      	movs	r3, #1
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	9307      	str	r3, [sp, #28]
 800723e:	461a      	mov	r2, r3
 8007240:	920e      	str	r2, [sp, #56]	@ 0x38
 8007242:	e00b      	b.n	800725c <_dtoa_r+0x254>
 8007244:	2301      	movs	r3, #1
 8007246:	e7f3      	b.n	8007230 <_dtoa_r+0x228>
 8007248:	2300      	movs	r3, #0
 800724a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800724c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800724e:	18fb      	adds	r3, r7, r3
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	3301      	adds	r3, #1
 8007254:	2b01      	cmp	r3, #1
 8007256:	9307      	str	r3, [sp, #28]
 8007258:	bfb8      	it	lt
 800725a:	2301      	movlt	r3, #1
 800725c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007260:	2100      	movs	r1, #0
 8007262:	2204      	movs	r2, #4
 8007264:	f102 0514 	add.w	r5, r2, #20
 8007268:	429d      	cmp	r5, r3
 800726a:	d91f      	bls.n	80072ac <_dtoa_r+0x2a4>
 800726c:	6041      	str	r1, [r0, #4]
 800726e:	4658      	mov	r0, fp
 8007270:	f000 fd8e 	bl	8007d90 <_Balloc>
 8007274:	4682      	mov	sl, r0
 8007276:	2800      	cmp	r0, #0
 8007278:	d13c      	bne.n	80072f4 <_dtoa_r+0x2ec>
 800727a:	4b1b      	ldr	r3, [pc, #108]	@ (80072e8 <_dtoa_r+0x2e0>)
 800727c:	4602      	mov	r2, r0
 800727e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007282:	e6d8      	b.n	8007036 <_dtoa_r+0x2e>
 8007284:	2301      	movs	r3, #1
 8007286:	e7e0      	b.n	800724a <_dtoa_r+0x242>
 8007288:	2401      	movs	r4, #1
 800728a:	2300      	movs	r3, #0
 800728c:	9309      	str	r3, [sp, #36]	@ 0x24
 800728e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007290:	f04f 33ff 	mov.w	r3, #4294967295
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	9307      	str	r3, [sp, #28]
 8007298:	2200      	movs	r2, #0
 800729a:	2312      	movs	r3, #18
 800729c:	e7d0      	b.n	8007240 <_dtoa_r+0x238>
 800729e:	2301      	movs	r3, #1
 80072a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072a2:	e7f5      	b.n	8007290 <_dtoa_r+0x288>
 80072a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	9307      	str	r3, [sp, #28]
 80072aa:	e7d7      	b.n	800725c <_dtoa_r+0x254>
 80072ac:	3101      	adds	r1, #1
 80072ae:	0052      	lsls	r2, r2, #1
 80072b0:	e7d8      	b.n	8007264 <_dtoa_r+0x25c>
 80072b2:	bf00      	nop
 80072b4:	f3af 8000 	nop.w
 80072b8:	636f4361 	.word	0x636f4361
 80072bc:	3fd287a7 	.word	0x3fd287a7
 80072c0:	8b60c8b3 	.word	0x8b60c8b3
 80072c4:	3fc68a28 	.word	0x3fc68a28
 80072c8:	509f79fb 	.word	0x509f79fb
 80072cc:	3fd34413 	.word	0x3fd34413
 80072d0:	08009b3d 	.word	0x08009b3d
 80072d4:	08009b54 	.word	0x08009b54
 80072d8:	7ff00000 	.word	0x7ff00000
 80072dc:	08009b0d 	.word	0x08009b0d
 80072e0:	3ff80000 	.word	0x3ff80000
 80072e4:	08009c50 	.word	0x08009c50
 80072e8:	08009bac 	.word	0x08009bac
 80072ec:	08009b39 	.word	0x08009b39
 80072f0:	08009b0c 	.word	0x08009b0c
 80072f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072f8:	6018      	str	r0, [r3, #0]
 80072fa:	9b07      	ldr	r3, [sp, #28]
 80072fc:	2b0e      	cmp	r3, #14
 80072fe:	f200 80a4 	bhi.w	800744a <_dtoa_r+0x442>
 8007302:	2c00      	cmp	r4, #0
 8007304:	f000 80a1 	beq.w	800744a <_dtoa_r+0x442>
 8007308:	2f00      	cmp	r7, #0
 800730a:	dd33      	ble.n	8007374 <_dtoa_r+0x36c>
 800730c:	4bad      	ldr	r3, [pc, #692]	@ (80075c4 <_dtoa_r+0x5bc>)
 800730e:	f007 020f 	and.w	r2, r7, #15
 8007312:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007316:	ed93 7b00 	vldr	d7, [r3]
 800731a:	05f8      	lsls	r0, r7, #23
 800731c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007320:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007324:	d516      	bpl.n	8007354 <_dtoa_r+0x34c>
 8007326:	4ba8      	ldr	r3, [pc, #672]	@ (80075c8 <_dtoa_r+0x5c0>)
 8007328:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800732c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007330:	f7f9 fa8c 	bl	800084c <__aeabi_ddiv>
 8007334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007338:	f004 040f 	and.w	r4, r4, #15
 800733c:	2603      	movs	r6, #3
 800733e:	4da2      	ldr	r5, [pc, #648]	@ (80075c8 <_dtoa_r+0x5c0>)
 8007340:	b954      	cbnz	r4, 8007358 <_dtoa_r+0x350>
 8007342:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007346:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800734a:	f7f9 fa7f 	bl	800084c <__aeabi_ddiv>
 800734e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007352:	e028      	b.n	80073a6 <_dtoa_r+0x39e>
 8007354:	2602      	movs	r6, #2
 8007356:	e7f2      	b.n	800733e <_dtoa_r+0x336>
 8007358:	07e1      	lsls	r1, r4, #31
 800735a:	d508      	bpl.n	800736e <_dtoa_r+0x366>
 800735c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007360:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007364:	f7f9 f948 	bl	80005f8 <__aeabi_dmul>
 8007368:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800736c:	3601      	adds	r6, #1
 800736e:	1064      	asrs	r4, r4, #1
 8007370:	3508      	adds	r5, #8
 8007372:	e7e5      	b.n	8007340 <_dtoa_r+0x338>
 8007374:	f000 80d2 	beq.w	800751c <_dtoa_r+0x514>
 8007378:	427c      	negs	r4, r7
 800737a:	4b92      	ldr	r3, [pc, #584]	@ (80075c4 <_dtoa_r+0x5bc>)
 800737c:	4d92      	ldr	r5, [pc, #584]	@ (80075c8 <_dtoa_r+0x5c0>)
 800737e:	f004 020f 	and.w	r2, r4, #15
 8007382:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800738e:	f7f9 f933 	bl	80005f8 <__aeabi_dmul>
 8007392:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007396:	1124      	asrs	r4, r4, #4
 8007398:	2300      	movs	r3, #0
 800739a:	2602      	movs	r6, #2
 800739c:	2c00      	cmp	r4, #0
 800739e:	f040 80b2 	bne.w	8007506 <_dtoa_r+0x4fe>
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1d3      	bne.n	800734e <_dtoa_r+0x346>
 80073a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80073a8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 80b7 	beq.w	8007520 <_dtoa_r+0x518>
 80073b2:	4b86      	ldr	r3, [pc, #536]	@ (80075cc <_dtoa_r+0x5c4>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	4620      	mov	r0, r4
 80073b8:	4629      	mov	r1, r5
 80073ba:	f7f9 fb8f 	bl	8000adc <__aeabi_dcmplt>
 80073be:	2800      	cmp	r0, #0
 80073c0:	f000 80ae 	beq.w	8007520 <_dtoa_r+0x518>
 80073c4:	9b07      	ldr	r3, [sp, #28]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f000 80aa 	beq.w	8007520 <_dtoa_r+0x518>
 80073cc:	9b00      	ldr	r3, [sp, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	dd37      	ble.n	8007442 <_dtoa_r+0x43a>
 80073d2:	1e7b      	subs	r3, r7, #1
 80073d4:	9304      	str	r3, [sp, #16]
 80073d6:	4620      	mov	r0, r4
 80073d8:	4b7d      	ldr	r3, [pc, #500]	@ (80075d0 <_dtoa_r+0x5c8>)
 80073da:	2200      	movs	r2, #0
 80073dc:	4629      	mov	r1, r5
 80073de:	f7f9 f90b 	bl	80005f8 <__aeabi_dmul>
 80073e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073e6:	9c00      	ldr	r4, [sp, #0]
 80073e8:	3601      	adds	r6, #1
 80073ea:	4630      	mov	r0, r6
 80073ec:	f7f9 f89a 	bl	8000524 <__aeabi_i2d>
 80073f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073f4:	f7f9 f900 	bl	80005f8 <__aeabi_dmul>
 80073f8:	4b76      	ldr	r3, [pc, #472]	@ (80075d4 <_dtoa_r+0x5cc>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	f7f8 ff46 	bl	800028c <__adddf3>
 8007400:	4605      	mov	r5, r0
 8007402:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007406:	2c00      	cmp	r4, #0
 8007408:	f040 808d 	bne.w	8007526 <_dtoa_r+0x51e>
 800740c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007410:	4b71      	ldr	r3, [pc, #452]	@ (80075d8 <_dtoa_r+0x5d0>)
 8007412:	2200      	movs	r2, #0
 8007414:	f7f8 ff38 	bl	8000288 <__aeabi_dsub>
 8007418:	4602      	mov	r2, r0
 800741a:	460b      	mov	r3, r1
 800741c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007420:	462a      	mov	r2, r5
 8007422:	4633      	mov	r3, r6
 8007424:	f7f9 fb78 	bl	8000b18 <__aeabi_dcmpgt>
 8007428:	2800      	cmp	r0, #0
 800742a:	f040 828b 	bne.w	8007944 <_dtoa_r+0x93c>
 800742e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007432:	462a      	mov	r2, r5
 8007434:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007438:	f7f9 fb50 	bl	8000adc <__aeabi_dcmplt>
 800743c:	2800      	cmp	r0, #0
 800743e:	f040 8128 	bne.w	8007692 <_dtoa_r+0x68a>
 8007442:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007446:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800744a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800744c:	2b00      	cmp	r3, #0
 800744e:	f2c0 815a 	blt.w	8007706 <_dtoa_r+0x6fe>
 8007452:	2f0e      	cmp	r7, #14
 8007454:	f300 8157 	bgt.w	8007706 <_dtoa_r+0x6fe>
 8007458:	4b5a      	ldr	r3, [pc, #360]	@ (80075c4 <_dtoa_r+0x5bc>)
 800745a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800745e:	ed93 7b00 	vldr	d7, [r3]
 8007462:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007464:	2b00      	cmp	r3, #0
 8007466:	ed8d 7b00 	vstr	d7, [sp]
 800746a:	da03      	bge.n	8007474 <_dtoa_r+0x46c>
 800746c:	9b07      	ldr	r3, [sp, #28]
 800746e:	2b00      	cmp	r3, #0
 8007470:	f340 8101 	ble.w	8007676 <_dtoa_r+0x66e>
 8007474:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007478:	4656      	mov	r6, sl
 800747a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800747e:	4620      	mov	r0, r4
 8007480:	4629      	mov	r1, r5
 8007482:	f7f9 f9e3 	bl	800084c <__aeabi_ddiv>
 8007486:	f7f9 fb67 	bl	8000b58 <__aeabi_d2iz>
 800748a:	4680      	mov	r8, r0
 800748c:	f7f9 f84a 	bl	8000524 <__aeabi_i2d>
 8007490:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007494:	f7f9 f8b0 	bl	80005f8 <__aeabi_dmul>
 8007498:	4602      	mov	r2, r0
 800749a:	460b      	mov	r3, r1
 800749c:	4620      	mov	r0, r4
 800749e:	4629      	mov	r1, r5
 80074a0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80074a4:	f7f8 fef0 	bl	8000288 <__aeabi_dsub>
 80074a8:	f806 4b01 	strb.w	r4, [r6], #1
 80074ac:	9d07      	ldr	r5, [sp, #28]
 80074ae:	eba6 040a 	sub.w	r4, r6, sl
 80074b2:	42a5      	cmp	r5, r4
 80074b4:	4602      	mov	r2, r0
 80074b6:	460b      	mov	r3, r1
 80074b8:	f040 8117 	bne.w	80076ea <_dtoa_r+0x6e2>
 80074bc:	f7f8 fee6 	bl	800028c <__adddf3>
 80074c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074c4:	4604      	mov	r4, r0
 80074c6:	460d      	mov	r5, r1
 80074c8:	f7f9 fb26 	bl	8000b18 <__aeabi_dcmpgt>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	f040 80f9 	bne.w	80076c4 <_dtoa_r+0x6bc>
 80074d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074d6:	4620      	mov	r0, r4
 80074d8:	4629      	mov	r1, r5
 80074da:	f7f9 faf5 	bl	8000ac8 <__aeabi_dcmpeq>
 80074de:	b118      	cbz	r0, 80074e8 <_dtoa_r+0x4e0>
 80074e0:	f018 0f01 	tst.w	r8, #1
 80074e4:	f040 80ee 	bne.w	80076c4 <_dtoa_r+0x6bc>
 80074e8:	4649      	mov	r1, r9
 80074ea:	4658      	mov	r0, fp
 80074ec:	f000 fc90 	bl	8007e10 <_Bfree>
 80074f0:	2300      	movs	r3, #0
 80074f2:	7033      	strb	r3, [r6, #0]
 80074f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80074f6:	3701      	adds	r7, #1
 80074f8:	601f      	str	r7, [r3, #0]
 80074fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 831d 	beq.w	8007b3c <_dtoa_r+0xb34>
 8007502:	601e      	str	r6, [r3, #0]
 8007504:	e31a      	b.n	8007b3c <_dtoa_r+0xb34>
 8007506:	07e2      	lsls	r2, r4, #31
 8007508:	d505      	bpl.n	8007516 <_dtoa_r+0x50e>
 800750a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800750e:	f7f9 f873 	bl	80005f8 <__aeabi_dmul>
 8007512:	3601      	adds	r6, #1
 8007514:	2301      	movs	r3, #1
 8007516:	1064      	asrs	r4, r4, #1
 8007518:	3508      	adds	r5, #8
 800751a:	e73f      	b.n	800739c <_dtoa_r+0x394>
 800751c:	2602      	movs	r6, #2
 800751e:	e742      	b.n	80073a6 <_dtoa_r+0x39e>
 8007520:	9c07      	ldr	r4, [sp, #28]
 8007522:	9704      	str	r7, [sp, #16]
 8007524:	e761      	b.n	80073ea <_dtoa_r+0x3e2>
 8007526:	4b27      	ldr	r3, [pc, #156]	@ (80075c4 <_dtoa_r+0x5bc>)
 8007528:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800752a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800752e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007532:	4454      	add	r4, sl
 8007534:	2900      	cmp	r1, #0
 8007536:	d053      	beq.n	80075e0 <_dtoa_r+0x5d8>
 8007538:	4928      	ldr	r1, [pc, #160]	@ (80075dc <_dtoa_r+0x5d4>)
 800753a:	2000      	movs	r0, #0
 800753c:	f7f9 f986 	bl	800084c <__aeabi_ddiv>
 8007540:	4633      	mov	r3, r6
 8007542:	462a      	mov	r2, r5
 8007544:	f7f8 fea0 	bl	8000288 <__aeabi_dsub>
 8007548:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800754c:	4656      	mov	r6, sl
 800754e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007552:	f7f9 fb01 	bl	8000b58 <__aeabi_d2iz>
 8007556:	4605      	mov	r5, r0
 8007558:	f7f8 ffe4 	bl	8000524 <__aeabi_i2d>
 800755c:	4602      	mov	r2, r0
 800755e:	460b      	mov	r3, r1
 8007560:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007564:	f7f8 fe90 	bl	8000288 <__aeabi_dsub>
 8007568:	3530      	adds	r5, #48	@ 0x30
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007572:	f806 5b01 	strb.w	r5, [r6], #1
 8007576:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800757a:	f7f9 faaf 	bl	8000adc <__aeabi_dcmplt>
 800757e:	2800      	cmp	r0, #0
 8007580:	d171      	bne.n	8007666 <_dtoa_r+0x65e>
 8007582:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007586:	4911      	ldr	r1, [pc, #68]	@ (80075cc <_dtoa_r+0x5c4>)
 8007588:	2000      	movs	r0, #0
 800758a:	f7f8 fe7d 	bl	8000288 <__aeabi_dsub>
 800758e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007592:	f7f9 faa3 	bl	8000adc <__aeabi_dcmplt>
 8007596:	2800      	cmp	r0, #0
 8007598:	f040 8095 	bne.w	80076c6 <_dtoa_r+0x6be>
 800759c:	42a6      	cmp	r6, r4
 800759e:	f43f af50 	beq.w	8007442 <_dtoa_r+0x43a>
 80075a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80075a6:	4b0a      	ldr	r3, [pc, #40]	@ (80075d0 <_dtoa_r+0x5c8>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	f7f9 f825 	bl	80005f8 <__aeabi_dmul>
 80075ae:	4b08      	ldr	r3, [pc, #32]	@ (80075d0 <_dtoa_r+0x5c8>)
 80075b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80075b4:	2200      	movs	r2, #0
 80075b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075ba:	f7f9 f81d 	bl	80005f8 <__aeabi_dmul>
 80075be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075c2:	e7c4      	b.n	800754e <_dtoa_r+0x546>
 80075c4:	08009c50 	.word	0x08009c50
 80075c8:	08009c28 	.word	0x08009c28
 80075cc:	3ff00000 	.word	0x3ff00000
 80075d0:	40240000 	.word	0x40240000
 80075d4:	401c0000 	.word	0x401c0000
 80075d8:	40140000 	.word	0x40140000
 80075dc:	3fe00000 	.word	0x3fe00000
 80075e0:	4631      	mov	r1, r6
 80075e2:	4628      	mov	r0, r5
 80075e4:	f7f9 f808 	bl	80005f8 <__aeabi_dmul>
 80075e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80075ec:	9415      	str	r4, [sp, #84]	@ 0x54
 80075ee:	4656      	mov	r6, sl
 80075f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075f4:	f7f9 fab0 	bl	8000b58 <__aeabi_d2iz>
 80075f8:	4605      	mov	r5, r0
 80075fa:	f7f8 ff93 	bl	8000524 <__aeabi_i2d>
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007606:	f7f8 fe3f 	bl	8000288 <__aeabi_dsub>
 800760a:	3530      	adds	r5, #48	@ 0x30
 800760c:	f806 5b01 	strb.w	r5, [r6], #1
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	42a6      	cmp	r6, r4
 8007616:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800761a:	f04f 0200 	mov.w	r2, #0
 800761e:	d124      	bne.n	800766a <_dtoa_r+0x662>
 8007620:	4bac      	ldr	r3, [pc, #688]	@ (80078d4 <_dtoa_r+0x8cc>)
 8007622:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007626:	f7f8 fe31 	bl	800028c <__adddf3>
 800762a:	4602      	mov	r2, r0
 800762c:	460b      	mov	r3, r1
 800762e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007632:	f7f9 fa71 	bl	8000b18 <__aeabi_dcmpgt>
 8007636:	2800      	cmp	r0, #0
 8007638:	d145      	bne.n	80076c6 <_dtoa_r+0x6be>
 800763a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800763e:	49a5      	ldr	r1, [pc, #660]	@ (80078d4 <_dtoa_r+0x8cc>)
 8007640:	2000      	movs	r0, #0
 8007642:	f7f8 fe21 	bl	8000288 <__aeabi_dsub>
 8007646:	4602      	mov	r2, r0
 8007648:	460b      	mov	r3, r1
 800764a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800764e:	f7f9 fa45 	bl	8000adc <__aeabi_dcmplt>
 8007652:	2800      	cmp	r0, #0
 8007654:	f43f aef5 	beq.w	8007442 <_dtoa_r+0x43a>
 8007658:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800765a:	1e73      	subs	r3, r6, #1
 800765c:	9315      	str	r3, [sp, #84]	@ 0x54
 800765e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007662:	2b30      	cmp	r3, #48	@ 0x30
 8007664:	d0f8      	beq.n	8007658 <_dtoa_r+0x650>
 8007666:	9f04      	ldr	r7, [sp, #16]
 8007668:	e73e      	b.n	80074e8 <_dtoa_r+0x4e0>
 800766a:	4b9b      	ldr	r3, [pc, #620]	@ (80078d8 <_dtoa_r+0x8d0>)
 800766c:	f7f8 ffc4 	bl	80005f8 <__aeabi_dmul>
 8007670:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007674:	e7bc      	b.n	80075f0 <_dtoa_r+0x5e8>
 8007676:	d10c      	bne.n	8007692 <_dtoa_r+0x68a>
 8007678:	4b98      	ldr	r3, [pc, #608]	@ (80078dc <_dtoa_r+0x8d4>)
 800767a:	2200      	movs	r2, #0
 800767c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007680:	f7f8 ffba 	bl	80005f8 <__aeabi_dmul>
 8007684:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007688:	f7f9 fa3c 	bl	8000b04 <__aeabi_dcmpge>
 800768c:	2800      	cmp	r0, #0
 800768e:	f000 8157 	beq.w	8007940 <_dtoa_r+0x938>
 8007692:	2400      	movs	r4, #0
 8007694:	4625      	mov	r5, r4
 8007696:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007698:	43db      	mvns	r3, r3
 800769a:	9304      	str	r3, [sp, #16]
 800769c:	4656      	mov	r6, sl
 800769e:	2700      	movs	r7, #0
 80076a0:	4621      	mov	r1, r4
 80076a2:	4658      	mov	r0, fp
 80076a4:	f000 fbb4 	bl	8007e10 <_Bfree>
 80076a8:	2d00      	cmp	r5, #0
 80076aa:	d0dc      	beq.n	8007666 <_dtoa_r+0x65e>
 80076ac:	b12f      	cbz	r7, 80076ba <_dtoa_r+0x6b2>
 80076ae:	42af      	cmp	r7, r5
 80076b0:	d003      	beq.n	80076ba <_dtoa_r+0x6b2>
 80076b2:	4639      	mov	r1, r7
 80076b4:	4658      	mov	r0, fp
 80076b6:	f000 fbab 	bl	8007e10 <_Bfree>
 80076ba:	4629      	mov	r1, r5
 80076bc:	4658      	mov	r0, fp
 80076be:	f000 fba7 	bl	8007e10 <_Bfree>
 80076c2:	e7d0      	b.n	8007666 <_dtoa_r+0x65e>
 80076c4:	9704      	str	r7, [sp, #16]
 80076c6:	4633      	mov	r3, r6
 80076c8:	461e      	mov	r6, r3
 80076ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076ce:	2a39      	cmp	r2, #57	@ 0x39
 80076d0:	d107      	bne.n	80076e2 <_dtoa_r+0x6da>
 80076d2:	459a      	cmp	sl, r3
 80076d4:	d1f8      	bne.n	80076c8 <_dtoa_r+0x6c0>
 80076d6:	9a04      	ldr	r2, [sp, #16]
 80076d8:	3201      	adds	r2, #1
 80076da:	9204      	str	r2, [sp, #16]
 80076dc:	2230      	movs	r2, #48	@ 0x30
 80076de:	f88a 2000 	strb.w	r2, [sl]
 80076e2:	781a      	ldrb	r2, [r3, #0]
 80076e4:	3201      	adds	r2, #1
 80076e6:	701a      	strb	r2, [r3, #0]
 80076e8:	e7bd      	b.n	8007666 <_dtoa_r+0x65e>
 80076ea:	4b7b      	ldr	r3, [pc, #492]	@ (80078d8 <_dtoa_r+0x8d0>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	f7f8 ff83 	bl	80005f8 <__aeabi_dmul>
 80076f2:	2200      	movs	r2, #0
 80076f4:	2300      	movs	r3, #0
 80076f6:	4604      	mov	r4, r0
 80076f8:	460d      	mov	r5, r1
 80076fa:	f7f9 f9e5 	bl	8000ac8 <__aeabi_dcmpeq>
 80076fe:	2800      	cmp	r0, #0
 8007700:	f43f aebb 	beq.w	800747a <_dtoa_r+0x472>
 8007704:	e6f0      	b.n	80074e8 <_dtoa_r+0x4e0>
 8007706:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007708:	2a00      	cmp	r2, #0
 800770a:	f000 80db 	beq.w	80078c4 <_dtoa_r+0x8bc>
 800770e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007710:	2a01      	cmp	r2, #1
 8007712:	f300 80bf 	bgt.w	8007894 <_dtoa_r+0x88c>
 8007716:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007718:	2a00      	cmp	r2, #0
 800771a:	f000 80b7 	beq.w	800788c <_dtoa_r+0x884>
 800771e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007722:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007724:	4646      	mov	r6, r8
 8007726:	9a08      	ldr	r2, [sp, #32]
 8007728:	2101      	movs	r1, #1
 800772a:	441a      	add	r2, r3
 800772c:	4658      	mov	r0, fp
 800772e:	4498      	add	r8, r3
 8007730:	9208      	str	r2, [sp, #32]
 8007732:	f000 fc21 	bl	8007f78 <__i2b>
 8007736:	4605      	mov	r5, r0
 8007738:	b15e      	cbz	r6, 8007752 <_dtoa_r+0x74a>
 800773a:	9b08      	ldr	r3, [sp, #32]
 800773c:	2b00      	cmp	r3, #0
 800773e:	dd08      	ble.n	8007752 <_dtoa_r+0x74a>
 8007740:	42b3      	cmp	r3, r6
 8007742:	9a08      	ldr	r2, [sp, #32]
 8007744:	bfa8      	it	ge
 8007746:	4633      	movge	r3, r6
 8007748:	eba8 0803 	sub.w	r8, r8, r3
 800774c:	1af6      	subs	r6, r6, r3
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	9308      	str	r3, [sp, #32]
 8007752:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007754:	b1f3      	cbz	r3, 8007794 <_dtoa_r+0x78c>
 8007756:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 80b7 	beq.w	80078cc <_dtoa_r+0x8c4>
 800775e:	b18c      	cbz	r4, 8007784 <_dtoa_r+0x77c>
 8007760:	4629      	mov	r1, r5
 8007762:	4622      	mov	r2, r4
 8007764:	4658      	mov	r0, fp
 8007766:	f000 fcc7 	bl	80080f8 <__pow5mult>
 800776a:	464a      	mov	r2, r9
 800776c:	4601      	mov	r1, r0
 800776e:	4605      	mov	r5, r0
 8007770:	4658      	mov	r0, fp
 8007772:	f000 fc17 	bl	8007fa4 <__multiply>
 8007776:	4649      	mov	r1, r9
 8007778:	9004      	str	r0, [sp, #16]
 800777a:	4658      	mov	r0, fp
 800777c:	f000 fb48 	bl	8007e10 <_Bfree>
 8007780:	9b04      	ldr	r3, [sp, #16]
 8007782:	4699      	mov	r9, r3
 8007784:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007786:	1b1a      	subs	r2, r3, r4
 8007788:	d004      	beq.n	8007794 <_dtoa_r+0x78c>
 800778a:	4649      	mov	r1, r9
 800778c:	4658      	mov	r0, fp
 800778e:	f000 fcb3 	bl	80080f8 <__pow5mult>
 8007792:	4681      	mov	r9, r0
 8007794:	2101      	movs	r1, #1
 8007796:	4658      	mov	r0, fp
 8007798:	f000 fbee 	bl	8007f78 <__i2b>
 800779c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800779e:	4604      	mov	r4, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f000 81cf 	beq.w	8007b44 <_dtoa_r+0xb3c>
 80077a6:	461a      	mov	r2, r3
 80077a8:	4601      	mov	r1, r0
 80077aa:	4658      	mov	r0, fp
 80077ac:	f000 fca4 	bl	80080f8 <__pow5mult>
 80077b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	4604      	mov	r4, r0
 80077b6:	f300 8095 	bgt.w	80078e4 <_dtoa_r+0x8dc>
 80077ba:	9b02      	ldr	r3, [sp, #8]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f040 8087 	bne.w	80078d0 <_dtoa_r+0x8c8>
 80077c2:	9b03      	ldr	r3, [sp, #12]
 80077c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f040 8089 	bne.w	80078e0 <_dtoa_r+0x8d8>
 80077ce:	9b03      	ldr	r3, [sp, #12]
 80077d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077d4:	0d1b      	lsrs	r3, r3, #20
 80077d6:	051b      	lsls	r3, r3, #20
 80077d8:	b12b      	cbz	r3, 80077e6 <_dtoa_r+0x7de>
 80077da:	9b08      	ldr	r3, [sp, #32]
 80077dc:	3301      	adds	r3, #1
 80077de:	9308      	str	r3, [sp, #32]
 80077e0:	f108 0801 	add.w	r8, r8, #1
 80077e4:	2301      	movs	r3, #1
 80077e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80077e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 81b0 	beq.w	8007b50 <_dtoa_r+0xb48>
 80077f0:	6923      	ldr	r3, [r4, #16]
 80077f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80077f6:	6918      	ldr	r0, [r3, #16]
 80077f8:	f000 fb72 	bl	8007ee0 <__hi0bits>
 80077fc:	f1c0 0020 	rsb	r0, r0, #32
 8007800:	9b08      	ldr	r3, [sp, #32]
 8007802:	4418      	add	r0, r3
 8007804:	f010 001f 	ands.w	r0, r0, #31
 8007808:	d077      	beq.n	80078fa <_dtoa_r+0x8f2>
 800780a:	f1c0 0320 	rsb	r3, r0, #32
 800780e:	2b04      	cmp	r3, #4
 8007810:	dd6b      	ble.n	80078ea <_dtoa_r+0x8e2>
 8007812:	9b08      	ldr	r3, [sp, #32]
 8007814:	f1c0 001c 	rsb	r0, r0, #28
 8007818:	4403      	add	r3, r0
 800781a:	4480      	add	r8, r0
 800781c:	4406      	add	r6, r0
 800781e:	9308      	str	r3, [sp, #32]
 8007820:	f1b8 0f00 	cmp.w	r8, #0
 8007824:	dd05      	ble.n	8007832 <_dtoa_r+0x82a>
 8007826:	4649      	mov	r1, r9
 8007828:	4642      	mov	r2, r8
 800782a:	4658      	mov	r0, fp
 800782c:	f000 fcbe 	bl	80081ac <__lshift>
 8007830:	4681      	mov	r9, r0
 8007832:	9b08      	ldr	r3, [sp, #32]
 8007834:	2b00      	cmp	r3, #0
 8007836:	dd05      	ble.n	8007844 <_dtoa_r+0x83c>
 8007838:	4621      	mov	r1, r4
 800783a:	461a      	mov	r2, r3
 800783c:	4658      	mov	r0, fp
 800783e:	f000 fcb5 	bl	80081ac <__lshift>
 8007842:	4604      	mov	r4, r0
 8007844:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007846:	2b00      	cmp	r3, #0
 8007848:	d059      	beq.n	80078fe <_dtoa_r+0x8f6>
 800784a:	4621      	mov	r1, r4
 800784c:	4648      	mov	r0, r9
 800784e:	f000 fd19 	bl	8008284 <__mcmp>
 8007852:	2800      	cmp	r0, #0
 8007854:	da53      	bge.n	80078fe <_dtoa_r+0x8f6>
 8007856:	1e7b      	subs	r3, r7, #1
 8007858:	9304      	str	r3, [sp, #16]
 800785a:	4649      	mov	r1, r9
 800785c:	2300      	movs	r3, #0
 800785e:	220a      	movs	r2, #10
 8007860:	4658      	mov	r0, fp
 8007862:	f000 faf7 	bl	8007e54 <__multadd>
 8007866:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007868:	4681      	mov	r9, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 8172 	beq.w	8007b54 <_dtoa_r+0xb4c>
 8007870:	2300      	movs	r3, #0
 8007872:	4629      	mov	r1, r5
 8007874:	220a      	movs	r2, #10
 8007876:	4658      	mov	r0, fp
 8007878:	f000 faec 	bl	8007e54 <__multadd>
 800787c:	9b00      	ldr	r3, [sp, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	4605      	mov	r5, r0
 8007882:	dc67      	bgt.n	8007954 <_dtoa_r+0x94c>
 8007884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007886:	2b02      	cmp	r3, #2
 8007888:	dc41      	bgt.n	800790e <_dtoa_r+0x906>
 800788a:	e063      	b.n	8007954 <_dtoa_r+0x94c>
 800788c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800788e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007892:	e746      	b.n	8007722 <_dtoa_r+0x71a>
 8007894:	9b07      	ldr	r3, [sp, #28]
 8007896:	1e5c      	subs	r4, r3, #1
 8007898:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800789a:	42a3      	cmp	r3, r4
 800789c:	bfbf      	itttt	lt
 800789e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80078a0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80078a2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80078a4:	1ae3      	sublt	r3, r4, r3
 80078a6:	bfb4      	ite	lt
 80078a8:	18d2      	addlt	r2, r2, r3
 80078aa:	1b1c      	subge	r4, r3, r4
 80078ac:	9b07      	ldr	r3, [sp, #28]
 80078ae:	bfbc      	itt	lt
 80078b0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80078b2:	2400      	movlt	r4, #0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	bfb5      	itete	lt
 80078b8:	eba8 0603 	sublt.w	r6, r8, r3
 80078bc:	9b07      	ldrge	r3, [sp, #28]
 80078be:	2300      	movlt	r3, #0
 80078c0:	4646      	movge	r6, r8
 80078c2:	e730      	b.n	8007726 <_dtoa_r+0x71e>
 80078c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80078c6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80078c8:	4646      	mov	r6, r8
 80078ca:	e735      	b.n	8007738 <_dtoa_r+0x730>
 80078cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80078ce:	e75c      	b.n	800778a <_dtoa_r+0x782>
 80078d0:	2300      	movs	r3, #0
 80078d2:	e788      	b.n	80077e6 <_dtoa_r+0x7de>
 80078d4:	3fe00000 	.word	0x3fe00000
 80078d8:	40240000 	.word	0x40240000
 80078dc:	40140000 	.word	0x40140000
 80078e0:	9b02      	ldr	r3, [sp, #8]
 80078e2:	e780      	b.n	80077e6 <_dtoa_r+0x7de>
 80078e4:	2300      	movs	r3, #0
 80078e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80078e8:	e782      	b.n	80077f0 <_dtoa_r+0x7e8>
 80078ea:	d099      	beq.n	8007820 <_dtoa_r+0x818>
 80078ec:	9a08      	ldr	r2, [sp, #32]
 80078ee:	331c      	adds	r3, #28
 80078f0:	441a      	add	r2, r3
 80078f2:	4498      	add	r8, r3
 80078f4:	441e      	add	r6, r3
 80078f6:	9208      	str	r2, [sp, #32]
 80078f8:	e792      	b.n	8007820 <_dtoa_r+0x818>
 80078fa:	4603      	mov	r3, r0
 80078fc:	e7f6      	b.n	80078ec <_dtoa_r+0x8e4>
 80078fe:	9b07      	ldr	r3, [sp, #28]
 8007900:	9704      	str	r7, [sp, #16]
 8007902:	2b00      	cmp	r3, #0
 8007904:	dc20      	bgt.n	8007948 <_dtoa_r+0x940>
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800790a:	2b02      	cmp	r3, #2
 800790c:	dd1e      	ble.n	800794c <_dtoa_r+0x944>
 800790e:	9b00      	ldr	r3, [sp, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	f47f aec0 	bne.w	8007696 <_dtoa_r+0x68e>
 8007916:	4621      	mov	r1, r4
 8007918:	2205      	movs	r2, #5
 800791a:	4658      	mov	r0, fp
 800791c:	f000 fa9a 	bl	8007e54 <__multadd>
 8007920:	4601      	mov	r1, r0
 8007922:	4604      	mov	r4, r0
 8007924:	4648      	mov	r0, r9
 8007926:	f000 fcad 	bl	8008284 <__mcmp>
 800792a:	2800      	cmp	r0, #0
 800792c:	f77f aeb3 	ble.w	8007696 <_dtoa_r+0x68e>
 8007930:	4656      	mov	r6, sl
 8007932:	2331      	movs	r3, #49	@ 0x31
 8007934:	f806 3b01 	strb.w	r3, [r6], #1
 8007938:	9b04      	ldr	r3, [sp, #16]
 800793a:	3301      	adds	r3, #1
 800793c:	9304      	str	r3, [sp, #16]
 800793e:	e6ae      	b.n	800769e <_dtoa_r+0x696>
 8007940:	9c07      	ldr	r4, [sp, #28]
 8007942:	9704      	str	r7, [sp, #16]
 8007944:	4625      	mov	r5, r4
 8007946:	e7f3      	b.n	8007930 <_dtoa_r+0x928>
 8007948:	9b07      	ldr	r3, [sp, #28]
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800794e:	2b00      	cmp	r3, #0
 8007950:	f000 8104 	beq.w	8007b5c <_dtoa_r+0xb54>
 8007954:	2e00      	cmp	r6, #0
 8007956:	dd05      	ble.n	8007964 <_dtoa_r+0x95c>
 8007958:	4629      	mov	r1, r5
 800795a:	4632      	mov	r2, r6
 800795c:	4658      	mov	r0, fp
 800795e:	f000 fc25 	bl	80081ac <__lshift>
 8007962:	4605      	mov	r5, r0
 8007964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007966:	2b00      	cmp	r3, #0
 8007968:	d05a      	beq.n	8007a20 <_dtoa_r+0xa18>
 800796a:	6869      	ldr	r1, [r5, #4]
 800796c:	4658      	mov	r0, fp
 800796e:	f000 fa0f 	bl	8007d90 <_Balloc>
 8007972:	4606      	mov	r6, r0
 8007974:	b928      	cbnz	r0, 8007982 <_dtoa_r+0x97a>
 8007976:	4b84      	ldr	r3, [pc, #528]	@ (8007b88 <_dtoa_r+0xb80>)
 8007978:	4602      	mov	r2, r0
 800797a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800797e:	f7ff bb5a 	b.w	8007036 <_dtoa_r+0x2e>
 8007982:	692a      	ldr	r2, [r5, #16]
 8007984:	3202      	adds	r2, #2
 8007986:	0092      	lsls	r2, r2, #2
 8007988:	f105 010c 	add.w	r1, r5, #12
 800798c:	300c      	adds	r0, #12
 800798e:	f000 ffaf 	bl	80088f0 <memcpy>
 8007992:	2201      	movs	r2, #1
 8007994:	4631      	mov	r1, r6
 8007996:	4658      	mov	r0, fp
 8007998:	f000 fc08 	bl	80081ac <__lshift>
 800799c:	f10a 0301 	add.w	r3, sl, #1
 80079a0:	9307      	str	r3, [sp, #28]
 80079a2:	9b00      	ldr	r3, [sp, #0]
 80079a4:	4453      	add	r3, sl
 80079a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079a8:	9b02      	ldr	r3, [sp, #8]
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	462f      	mov	r7, r5
 80079b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80079b2:	4605      	mov	r5, r0
 80079b4:	9b07      	ldr	r3, [sp, #28]
 80079b6:	4621      	mov	r1, r4
 80079b8:	3b01      	subs	r3, #1
 80079ba:	4648      	mov	r0, r9
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	f7ff fa98 	bl	8006ef2 <quorem>
 80079c2:	4639      	mov	r1, r7
 80079c4:	9002      	str	r0, [sp, #8]
 80079c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80079ca:	4648      	mov	r0, r9
 80079cc:	f000 fc5a 	bl	8008284 <__mcmp>
 80079d0:	462a      	mov	r2, r5
 80079d2:	9008      	str	r0, [sp, #32]
 80079d4:	4621      	mov	r1, r4
 80079d6:	4658      	mov	r0, fp
 80079d8:	f000 fc70 	bl	80082bc <__mdiff>
 80079dc:	68c2      	ldr	r2, [r0, #12]
 80079de:	4606      	mov	r6, r0
 80079e0:	bb02      	cbnz	r2, 8007a24 <_dtoa_r+0xa1c>
 80079e2:	4601      	mov	r1, r0
 80079e4:	4648      	mov	r0, r9
 80079e6:	f000 fc4d 	bl	8008284 <__mcmp>
 80079ea:	4602      	mov	r2, r0
 80079ec:	4631      	mov	r1, r6
 80079ee:	4658      	mov	r0, fp
 80079f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80079f2:	f000 fa0d 	bl	8007e10 <_Bfree>
 80079f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079fa:	9e07      	ldr	r6, [sp, #28]
 80079fc:	ea43 0102 	orr.w	r1, r3, r2
 8007a00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a02:	4319      	orrs	r1, r3
 8007a04:	d110      	bne.n	8007a28 <_dtoa_r+0xa20>
 8007a06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a0a:	d029      	beq.n	8007a60 <_dtoa_r+0xa58>
 8007a0c:	9b08      	ldr	r3, [sp, #32]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	dd02      	ble.n	8007a18 <_dtoa_r+0xa10>
 8007a12:	9b02      	ldr	r3, [sp, #8]
 8007a14:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007a18:	9b00      	ldr	r3, [sp, #0]
 8007a1a:	f883 8000 	strb.w	r8, [r3]
 8007a1e:	e63f      	b.n	80076a0 <_dtoa_r+0x698>
 8007a20:	4628      	mov	r0, r5
 8007a22:	e7bb      	b.n	800799c <_dtoa_r+0x994>
 8007a24:	2201      	movs	r2, #1
 8007a26:	e7e1      	b.n	80079ec <_dtoa_r+0x9e4>
 8007a28:	9b08      	ldr	r3, [sp, #32]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	db04      	blt.n	8007a38 <_dtoa_r+0xa30>
 8007a2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a30:	430b      	orrs	r3, r1
 8007a32:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a34:	430b      	orrs	r3, r1
 8007a36:	d120      	bne.n	8007a7a <_dtoa_r+0xa72>
 8007a38:	2a00      	cmp	r2, #0
 8007a3a:	dded      	ble.n	8007a18 <_dtoa_r+0xa10>
 8007a3c:	4649      	mov	r1, r9
 8007a3e:	2201      	movs	r2, #1
 8007a40:	4658      	mov	r0, fp
 8007a42:	f000 fbb3 	bl	80081ac <__lshift>
 8007a46:	4621      	mov	r1, r4
 8007a48:	4681      	mov	r9, r0
 8007a4a:	f000 fc1b 	bl	8008284 <__mcmp>
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	dc03      	bgt.n	8007a5a <_dtoa_r+0xa52>
 8007a52:	d1e1      	bne.n	8007a18 <_dtoa_r+0xa10>
 8007a54:	f018 0f01 	tst.w	r8, #1
 8007a58:	d0de      	beq.n	8007a18 <_dtoa_r+0xa10>
 8007a5a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a5e:	d1d8      	bne.n	8007a12 <_dtoa_r+0xa0a>
 8007a60:	9a00      	ldr	r2, [sp, #0]
 8007a62:	2339      	movs	r3, #57	@ 0x39
 8007a64:	7013      	strb	r3, [r2, #0]
 8007a66:	4633      	mov	r3, r6
 8007a68:	461e      	mov	r6, r3
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007a70:	2a39      	cmp	r2, #57	@ 0x39
 8007a72:	d052      	beq.n	8007b1a <_dtoa_r+0xb12>
 8007a74:	3201      	adds	r2, #1
 8007a76:	701a      	strb	r2, [r3, #0]
 8007a78:	e612      	b.n	80076a0 <_dtoa_r+0x698>
 8007a7a:	2a00      	cmp	r2, #0
 8007a7c:	dd07      	ble.n	8007a8e <_dtoa_r+0xa86>
 8007a7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a82:	d0ed      	beq.n	8007a60 <_dtoa_r+0xa58>
 8007a84:	9a00      	ldr	r2, [sp, #0]
 8007a86:	f108 0301 	add.w	r3, r8, #1
 8007a8a:	7013      	strb	r3, [r2, #0]
 8007a8c:	e608      	b.n	80076a0 <_dtoa_r+0x698>
 8007a8e:	9b07      	ldr	r3, [sp, #28]
 8007a90:	9a07      	ldr	r2, [sp, #28]
 8007a92:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007a96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d028      	beq.n	8007aee <_dtoa_r+0xae6>
 8007a9c:	4649      	mov	r1, r9
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	220a      	movs	r2, #10
 8007aa2:	4658      	mov	r0, fp
 8007aa4:	f000 f9d6 	bl	8007e54 <__multadd>
 8007aa8:	42af      	cmp	r7, r5
 8007aaa:	4681      	mov	r9, r0
 8007aac:	f04f 0300 	mov.w	r3, #0
 8007ab0:	f04f 020a 	mov.w	r2, #10
 8007ab4:	4639      	mov	r1, r7
 8007ab6:	4658      	mov	r0, fp
 8007ab8:	d107      	bne.n	8007aca <_dtoa_r+0xac2>
 8007aba:	f000 f9cb 	bl	8007e54 <__multadd>
 8007abe:	4607      	mov	r7, r0
 8007ac0:	4605      	mov	r5, r0
 8007ac2:	9b07      	ldr	r3, [sp, #28]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	9307      	str	r3, [sp, #28]
 8007ac8:	e774      	b.n	80079b4 <_dtoa_r+0x9ac>
 8007aca:	f000 f9c3 	bl	8007e54 <__multadd>
 8007ace:	4629      	mov	r1, r5
 8007ad0:	4607      	mov	r7, r0
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	220a      	movs	r2, #10
 8007ad6:	4658      	mov	r0, fp
 8007ad8:	f000 f9bc 	bl	8007e54 <__multadd>
 8007adc:	4605      	mov	r5, r0
 8007ade:	e7f0      	b.n	8007ac2 <_dtoa_r+0xaba>
 8007ae0:	9b00      	ldr	r3, [sp, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	bfcc      	ite	gt
 8007ae6:	461e      	movgt	r6, r3
 8007ae8:	2601      	movle	r6, #1
 8007aea:	4456      	add	r6, sl
 8007aec:	2700      	movs	r7, #0
 8007aee:	4649      	mov	r1, r9
 8007af0:	2201      	movs	r2, #1
 8007af2:	4658      	mov	r0, fp
 8007af4:	f000 fb5a 	bl	80081ac <__lshift>
 8007af8:	4621      	mov	r1, r4
 8007afa:	4681      	mov	r9, r0
 8007afc:	f000 fbc2 	bl	8008284 <__mcmp>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	dcb0      	bgt.n	8007a66 <_dtoa_r+0xa5e>
 8007b04:	d102      	bne.n	8007b0c <_dtoa_r+0xb04>
 8007b06:	f018 0f01 	tst.w	r8, #1
 8007b0a:	d1ac      	bne.n	8007a66 <_dtoa_r+0xa5e>
 8007b0c:	4633      	mov	r3, r6
 8007b0e:	461e      	mov	r6, r3
 8007b10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b14:	2a30      	cmp	r2, #48	@ 0x30
 8007b16:	d0fa      	beq.n	8007b0e <_dtoa_r+0xb06>
 8007b18:	e5c2      	b.n	80076a0 <_dtoa_r+0x698>
 8007b1a:	459a      	cmp	sl, r3
 8007b1c:	d1a4      	bne.n	8007a68 <_dtoa_r+0xa60>
 8007b1e:	9b04      	ldr	r3, [sp, #16]
 8007b20:	3301      	adds	r3, #1
 8007b22:	9304      	str	r3, [sp, #16]
 8007b24:	2331      	movs	r3, #49	@ 0x31
 8007b26:	f88a 3000 	strb.w	r3, [sl]
 8007b2a:	e5b9      	b.n	80076a0 <_dtoa_r+0x698>
 8007b2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b2e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007b8c <_dtoa_r+0xb84>
 8007b32:	b11b      	cbz	r3, 8007b3c <_dtoa_r+0xb34>
 8007b34:	f10a 0308 	add.w	r3, sl, #8
 8007b38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007b3a:	6013      	str	r3, [r2, #0]
 8007b3c:	4650      	mov	r0, sl
 8007b3e:	b019      	add	sp, #100	@ 0x64
 8007b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	f77f ae37 	ble.w	80077ba <_dtoa_r+0x7b2>
 8007b4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b50:	2001      	movs	r0, #1
 8007b52:	e655      	b.n	8007800 <_dtoa_r+0x7f8>
 8007b54:	9b00      	ldr	r3, [sp, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f77f aed6 	ble.w	8007908 <_dtoa_r+0x900>
 8007b5c:	4656      	mov	r6, sl
 8007b5e:	4621      	mov	r1, r4
 8007b60:	4648      	mov	r0, r9
 8007b62:	f7ff f9c6 	bl	8006ef2 <quorem>
 8007b66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007b6a:	f806 8b01 	strb.w	r8, [r6], #1
 8007b6e:	9b00      	ldr	r3, [sp, #0]
 8007b70:	eba6 020a 	sub.w	r2, r6, sl
 8007b74:	4293      	cmp	r3, r2
 8007b76:	ddb3      	ble.n	8007ae0 <_dtoa_r+0xad8>
 8007b78:	4649      	mov	r1, r9
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	220a      	movs	r2, #10
 8007b7e:	4658      	mov	r0, fp
 8007b80:	f000 f968 	bl	8007e54 <__multadd>
 8007b84:	4681      	mov	r9, r0
 8007b86:	e7ea      	b.n	8007b5e <_dtoa_r+0xb56>
 8007b88:	08009bac 	.word	0x08009bac
 8007b8c:	08009b30 	.word	0x08009b30

08007b90 <_free_r>:
 8007b90:	b538      	push	{r3, r4, r5, lr}
 8007b92:	4605      	mov	r5, r0
 8007b94:	2900      	cmp	r1, #0
 8007b96:	d041      	beq.n	8007c1c <_free_r+0x8c>
 8007b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b9c:	1f0c      	subs	r4, r1, #4
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	bfb8      	it	lt
 8007ba2:	18e4      	addlt	r4, r4, r3
 8007ba4:	f000 f8e8 	bl	8007d78 <__malloc_lock>
 8007ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8007c20 <_free_r+0x90>)
 8007baa:	6813      	ldr	r3, [r2, #0]
 8007bac:	b933      	cbnz	r3, 8007bbc <_free_r+0x2c>
 8007bae:	6063      	str	r3, [r4, #4]
 8007bb0:	6014      	str	r4, [r2, #0]
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bb8:	f000 b8e4 	b.w	8007d84 <__malloc_unlock>
 8007bbc:	42a3      	cmp	r3, r4
 8007bbe:	d908      	bls.n	8007bd2 <_free_r+0x42>
 8007bc0:	6820      	ldr	r0, [r4, #0]
 8007bc2:	1821      	adds	r1, r4, r0
 8007bc4:	428b      	cmp	r3, r1
 8007bc6:	bf01      	itttt	eq
 8007bc8:	6819      	ldreq	r1, [r3, #0]
 8007bca:	685b      	ldreq	r3, [r3, #4]
 8007bcc:	1809      	addeq	r1, r1, r0
 8007bce:	6021      	streq	r1, [r4, #0]
 8007bd0:	e7ed      	b.n	8007bae <_free_r+0x1e>
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	b10b      	cbz	r3, 8007bdc <_free_r+0x4c>
 8007bd8:	42a3      	cmp	r3, r4
 8007bda:	d9fa      	bls.n	8007bd2 <_free_r+0x42>
 8007bdc:	6811      	ldr	r1, [r2, #0]
 8007bde:	1850      	adds	r0, r2, r1
 8007be0:	42a0      	cmp	r0, r4
 8007be2:	d10b      	bne.n	8007bfc <_free_r+0x6c>
 8007be4:	6820      	ldr	r0, [r4, #0]
 8007be6:	4401      	add	r1, r0
 8007be8:	1850      	adds	r0, r2, r1
 8007bea:	4283      	cmp	r3, r0
 8007bec:	6011      	str	r1, [r2, #0]
 8007bee:	d1e0      	bne.n	8007bb2 <_free_r+0x22>
 8007bf0:	6818      	ldr	r0, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	6053      	str	r3, [r2, #4]
 8007bf6:	4408      	add	r0, r1
 8007bf8:	6010      	str	r0, [r2, #0]
 8007bfa:	e7da      	b.n	8007bb2 <_free_r+0x22>
 8007bfc:	d902      	bls.n	8007c04 <_free_r+0x74>
 8007bfe:	230c      	movs	r3, #12
 8007c00:	602b      	str	r3, [r5, #0]
 8007c02:	e7d6      	b.n	8007bb2 <_free_r+0x22>
 8007c04:	6820      	ldr	r0, [r4, #0]
 8007c06:	1821      	adds	r1, r4, r0
 8007c08:	428b      	cmp	r3, r1
 8007c0a:	bf04      	itt	eq
 8007c0c:	6819      	ldreq	r1, [r3, #0]
 8007c0e:	685b      	ldreq	r3, [r3, #4]
 8007c10:	6063      	str	r3, [r4, #4]
 8007c12:	bf04      	itt	eq
 8007c14:	1809      	addeq	r1, r1, r0
 8007c16:	6021      	streq	r1, [r4, #0]
 8007c18:	6054      	str	r4, [r2, #4]
 8007c1a:	e7ca      	b.n	8007bb2 <_free_r+0x22>
 8007c1c:	bd38      	pop	{r3, r4, r5, pc}
 8007c1e:	bf00      	nop
 8007c20:	200008ec 	.word	0x200008ec

08007c24 <malloc>:
 8007c24:	4b02      	ldr	r3, [pc, #8]	@ (8007c30 <malloc+0xc>)
 8007c26:	4601      	mov	r1, r0
 8007c28:	6818      	ldr	r0, [r3, #0]
 8007c2a:	f000 b825 	b.w	8007c78 <_malloc_r>
 8007c2e:	bf00      	nop
 8007c30:	20000418 	.word	0x20000418

08007c34 <sbrk_aligned>:
 8007c34:	b570      	push	{r4, r5, r6, lr}
 8007c36:	4e0f      	ldr	r6, [pc, #60]	@ (8007c74 <sbrk_aligned+0x40>)
 8007c38:	460c      	mov	r4, r1
 8007c3a:	6831      	ldr	r1, [r6, #0]
 8007c3c:	4605      	mov	r5, r0
 8007c3e:	b911      	cbnz	r1, 8007c46 <sbrk_aligned+0x12>
 8007c40:	f000 fe46 	bl	80088d0 <_sbrk_r>
 8007c44:	6030      	str	r0, [r6, #0]
 8007c46:	4621      	mov	r1, r4
 8007c48:	4628      	mov	r0, r5
 8007c4a:	f000 fe41 	bl	80088d0 <_sbrk_r>
 8007c4e:	1c43      	adds	r3, r0, #1
 8007c50:	d103      	bne.n	8007c5a <sbrk_aligned+0x26>
 8007c52:	f04f 34ff 	mov.w	r4, #4294967295
 8007c56:	4620      	mov	r0, r4
 8007c58:	bd70      	pop	{r4, r5, r6, pc}
 8007c5a:	1cc4      	adds	r4, r0, #3
 8007c5c:	f024 0403 	bic.w	r4, r4, #3
 8007c60:	42a0      	cmp	r0, r4
 8007c62:	d0f8      	beq.n	8007c56 <sbrk_aligned+0x22>
 8007c64:	1a21      	subs	r1, r4, r0
 8007c66:	4628      	mov	r0, r5
 8007c68:	f000 fe32 	bl	80088d0 <_sbrk_r>
 8007c6c:	3001      	adds	r0, #1
 8007c6e:	d1f2      	bne.n	8007c56 <sbrk_aligned+0x22>
 8007c70:	e7ef      	b.n	8007c52 <sbrk_aligned+0x1e>
 8007c72:	bf00      	nop
 8007c74:	200008e8 	.word	0x200008e8

08007c78 <_malloc_r>:
 8007c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c7c:	1ccd      	adds	r5, r1, #3
 8007c7e:	f025 0503 	bic.w	r5, r5, #3
 8007c82:	3508      	adds	r5, #8
 8007c84:	2d0c      	cmp	r5, #12
 8007c86:	bf38      	it	cc
 8007c88:	250c      	movcc	r5, #12
 8007c8a:	2d00      	cmp	r5, #0
 8007c8c:	4606      	mov	r6, r0
 8007c8e:	db01      	blt.n	8007c94 <_malloc_r+0x1c>
 8007c90:	42a9      	cmp	r1, r5
 8007c92:	d904      	bls.n	8007c9e <_malloc_r+0x26>
 8007c94:	230c      	movs	r3, #12
 8007c96:	6033      	str	r3, [r6, #0]
 8007c98:	2000      	movs	r0, #0
 8007c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d74 <_malloc_r+0xfc>
 8007ca2:	f000 f869 	bl	8007d78 <__malloc_lock>
 8007ca6:	f8d8 3000 	ldr.w	r3, [r8]
 8007caa:	461c      	mov	r4, r3
 8007cac:	bb44      	cbnz	r4, 8007d00 <_malloc_r+0x88>
 8007cae:	4629      	mov	r1, r5
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	f7ff ffbf 	bl	8007c34 <sbrk_aligned>
 8007cb6:	1c43      	adds	r3, r0, #1
 8007cb8:	4604      	mov	r4, r0
 8007cba:	d158      	bne.n	8007d6e <_malloc_r+0xf6>
 8007cbc:	f8d8 4000 	ldr.w	r4, [r8]
 8007cc0:	4627      	mov	r7, r4
 8007cc2:	2f00      	cmp	r7, #0
 8007cc4:	d143      	bne.n	8007d4e <_malloc_r+0xd6>
 8007cc6:	2c00      	cmp	r4, #0
 8007cc8:	d04b      	beq.n	8007d62 <_malloc_r+0xea>
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	4639      	mov	r1, r7
 8007cce:	4630      	mov	r0, r6
 8007cd0:	eb04 0903 	add.w	r9, r4, r3
 8007cd4:	f000 fdfc 	bl	80088d0 <_sbrk_r>
 8007cd8:	4581      	cmp	r9, r0
 8007cda:	d142      	bne.n	8007d62 <_malloc_r+0xea>
 8007cdc:	6821      	ldr	r1, [r4, #0]
 8007cde:	1a6d      	subs	r5, r5, r1
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	f7ff ffa6 	bl	8007c34 <sbrk_aligned>
 8007ce8:	3001      	adds	r0, #1
 8007cea:	d03a      	beq.n	8007d62 <_malloc_r+0xea>
 8007cec:	6823      	ldr	r3, [r4, #0]
 8007cee:	442b      	add	r3, r5
 8007cf0:	6023      	str	r3, [r4, #0]
 8007cf2:	f8d8 3000 	ldr.w	r3, [r8]
 8007cf6:	685a      	ldr	r2, [r3, #4]
 8007cf8:	bb62      	cbnz	r2, 8007d54 <_malloc_r+0xdc>
 8007cfa:	f8c8 7000 	str.w	r7, [r8]
 8007cfe:	e00f      	b.n	8007d20 <_malloc_r+0xa8>
 8007d00:	6822      	ldr	r2, [r4, #0]
 8007d02:	1b52      	subs	r2, r2, r5
 8007d04:	d420      	bmi.n	8007d48 <_malloc_r+0xd0>
 8007d06:	2a0b      	cmp	r2, #11
 8007d08:	d917      	bls.n	8007d3a <_malloc_r+0xc2>
 8007d0a:	1961      	adds	r1, r4, r5
 8007d0c:	42a3      	cmp	r3, r4
 8007d0e:	6025      	str	r5, [r4, #0]
 8007d10:	bf18      	it	ne
 8007d12:	6059      	strne	r1, [r3, #4]
 8007d14:	6863      	ldr	r3, [r4, #4]
 8007d16:	bf08      	it	eq
 8007d18:	f8c8 1000 	streq.w	r1, [r8]
 8007d1c:	5162      	str	r2, [r4, r5]
 8007d1e:	604b      	str	r3, [r1, #4]
 8007d20:	4630      	mov	r0, r6
 8007d22:	f000 f82f 	bl	8007d84 <__malloc_unlock>
 8007d26:	f104 000b 	add.w	r0, r4, #11
 8007d2a:	1d23      	adds	r3, r4, #4
 8007d2c:	f020 0007 	bic.w	r0, r0, #7
 8007d30:	1ac2      	subs	r2, r0, r3
 8007d32:	bf1c      	itt	ne
 8007d34:	1a1b      	subne	r3, r3, r0
 8007d36:	50a3      	strne	r3, [r4, r2]
 8007d38:	e7af      	b.n	8007c9a <_malloc_r+0x22>
 8007d3a:	6862      	ldr	r2, [r4, #4]
 8007d3c:	42a3      	cmp	r3, r4
 8007d3e:	bf0c      	ite	eq
 8007d40:	f8c8 2000 	streq.w	r2, [r8]
 8007d44:	605a      	strne	r2, [r3, #4]
 8007d46:	e7eb      	b.n	8007d20 <_malloc_r+0xa8>
 8007d48:	4623      	mov	r3, r4
 8007d4a:	6864      	ldr	r4, [r4, #4]
 8007d4c:	e7ae      	b.n	8007cac <_malloc_r+0x34>
 8007d4e:	463c      	mov	r4, r7
 8007d50:	687f      	ldr	r7, [r7, #4]
 8007d52:	e7b6      	b.n	8007cc2 <_malloc_r+0x4a>
 8007d54:	461a      	mov	r2, r3
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	42a3      	cmp	r3, r4
 8007d5a:	d1fb      	bne.n	8007d54 <_malloc_r+0xdc>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	6053      	str	r3, [r2, #4]
 8007d60:	e7de      	b.n	8007d20 <_malloc_r+0xa8>
 8007d62:	230c      	movs	r3, #12
 8007d64:	6033      	str	r3, [r6, #0]
 8007d66:	4630      	mov	r0, r6
 8007d68:	f000 f80c 	bl	8007d84 <__malloc_unlock>
 8007d6c:	e794      	b.n	8007c98 <_malloc_r+0x20>
 8007d6e:	6005      	str	r5, [r0, #0]
 8007d70:	e7d6      	b.n	8007d20 <_malloc_r+0xa8>
 8007d72:	bf00      	nop
 8007d74:	200008ec 	.word	0x200008ec

08007d78 <__malloc_lock>:
 8007d78:	4801      	ldr	r0, [pc, #4]	@ (8007d80 <__malloc_lock+0x8>)
 8007d7a:	f7ff b8b8 	b.w	8006eee <__retarget_lock_acquire_recursive>
 8007d7e:	bf00      	nop
 8007d80:	200008e4 	.word	0x200008e4

08007d84 <__malloc_unlock>:
 8007d84:	4801      	ldr	r0, [pc, #4]	@ (8007d8c <__malloc_unlock+0x8>)
 8007d86:	f7ff b8b3 	b.w	8006ef0 <__retarget_lock_release_recursive>
 8007d8a:	bf00      	nop
 8007d8c:	200008e4 	.word	0x200008e4

08007d90 <_Balloc>:
 8007d90:	b570      	push	{r4, r5, r6, lr}
 8007d92:	69c6      	ldr	r6, [r0, #28]
 8007d94:	4604      	mov	r4, r0
 8007d96:	460d      	mov	r5, r1
 8007d98:	b976      	cbnz	r6, 8007db8 <_Balloc+0x28>
 8007d9a:	2010      	movs	r0, #16
 8007d9c:	f7ff ff42 	bl	8007c24 <malloc>
 8007da0:	4602      	mov	r2, r0
 8007da2:	61e0      	str	r0, [r4, #28]
 8007da4:	b920      	cbnz	r0, 8007db0 <_Balloc+0x20>
 8007da6:	4b18      	ldr	r3, [pc, #96]	@ (8007e08 <_Balloc+0x78>)
 8007da8:	4818      	ldr	r0, [pc, #96]	@ (8007e0c <_Balloc+0x7c>)
 8007daa:	216b      	movs	r1, #107	@ 0x6b
 8007dac:	f000 fdae 	bl	800890c <__assert_func>
 8007db0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007db4:	6006      	str	r6, [r0, #0]
 8007db6:	60c6      	str	r6, [r0, #12]
 8007db8:	69e6      	ldr	r6, [r4, #28]
 8007dba:	68f3      	ldr	r3, [r6, #12]
 8007dbc:	b183      	cbz	r3, 8007de0 <_Balloc+0x50>
 8007dbe:	69e3      	ldr	r3, [r4, #28]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007dc6:	b9b8      	cbnz	r0, 8007df8 <_Balloc+0x68>
 8007dc8:	2101      	movs	r1, #1
 8007dca:	fa01 f605 	lsl.w	r6, r1, r5
 8007dce:	1d72      	adds	r2, r6, #5
 8007dd0:	0092      	lsls	r2, r2, #2
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f000 fdb8 	bl	8008948 <_calloc_r>
 8007dd8:	b160      	cbz	r0, 8007df4 <_Balloc+0x64>
 8007dda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007dde:	e00e      	b.n	8007dfe <_Balloc+0x6e>
 8007de0:	2221      	movs	r2, #33	@ 0x21
 8007de2:	2104      	movs	r1, #4
 8007de4:	4620      	mov	r0, r4
 8007de6:	f000 fdaf 	bl	8008948 <_calloc_r>
 8007dea:	69e3      	ldr	r3, [r4, #28]
 8007dec:	60f0      	str	r0, [r6, #12]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d1e4      	bne.n	8007dbe <_Balloc+0x2e>
 8007df4:	2000      	movs	r0, #0
 8007df6:	bd70      	pop	{r4, r5, r6, pc}
 8007df8:	6802      	ldr	r2, [r0, #0]
 8007dfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007dfe:	2300      	movs	r3, #0
 8007e00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e04:	e7f7      	b.n	8007df6 <_Balloc+0x66>
 8007e06:	bf00      	nop
 8007e08:	08009b3d 	.word	0x08009b3d
 8007e0c:	08009bbd 	.word	0x08009bbd

08007e10 <_Bfree>:
 8007e10:	b570      	push	{r4, r5, r6, lr}
 8007e12:	69c6      	ldr	r6, [r0, #28]
 8007e14:	4605      	mov	r5, r0
 8007e16:	460c      	mov	r4, r1
 8007e18:	b976      	cbnz	r6, 8007e38 <_Bfree+0x28>
 8007e1a:	2010      	movs	r0, #16
 8007e1c:	f7ff ff02 	bl	8007c24 <malloc>
 8007e20:	4602      	mov	r2, r0
 8007e22:	61e8      	str	r0, [r5, #28]
 8007e24:	b920      	cbnz	r0, 8007e30 <_Bfree+0x20>
 8007e26:	4b09      	ldr	r3, [pc, #36]	@ (8007e4c <_Bfree+0x3c>)
 8007e28:	4809      	ldr	r0, [pc, #36]	@ (8007e50 <_Bfree+0x40>)
 8007e2a:	218f      	movs	r1, #143	@ 0x8f
 8007e2c:	f000 fd6e 	bl	800890c <__assert_func>
 8007e30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e34:	6006      	str	r6, [r0, #0]
 8007e36:	60c6      	str	r6, [r0, #12]
 8007e38:	b13c      	cbz	r4, 8007e4a <_Bfree+0x3a>
 8007e3a:	69eb      	ldr	r3, [r5, #28]
 8007e3c:	6862      	ldr	r2, [r4, #4]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e44:	6021      	str	r1, [r4, #0]
 8007e46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e4a:	bd70      	pop	{r4, r5, r6, pc}
 8007e4c:	08009b3d 	.word	0x08009b3d
 8007e50:	08009bbd 	.word	0x08009bbd

08007e54 <__multadd>:
 8007e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e58:	690d      	ldr	r5, [r1, #16]
 8007e5a:	4607      	mov	r7, r0
 8007e5c:	460c      	mov	r4, r1
 8007e5e:	461e      	mov	r6, r3
 8007e60:	f101 0c14 	add.w	ip, r1, #20
 8007e64:	2000      	movs	r0, #0
 8007e66:	f8dc 3000 	ldr.w	r3, [ip]
 8007e6a:	b299      	uxth	r1, r3
 8007e6c:	fb02 6101 	mla	r1, r2, r1, r6
 8007e70:	0c1e      	lsrs	r6, r3, #16
 8007e72:	0c0b      	lsrs	r3, r1, #16
 8007e74:	fb02 3306 	mla	r3, r2, r6, r3
 8007e78:	b289      	uxth	r1, r1
 8007e7a:	3001      	adds	r0, #1
 8007e7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007e80:	4285      	cmp	r5, r0
 8007e82:	f84c 1b04 	str.w	r1, [ip], #4
 8007e86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007e8a:	dcec      	bgt.n	8007e66 <__multadd+0x12>
 8007e8c:	b30e      	cbz	r6, 8007ed2 <__multadd+0x7e>
 8007e8e:	68a3      	ldr	r3, [r4, #8]
 8007e90:	42ab      	cmp	r3, r5
 8007e92:	dc19      	bgt.n	8007ec8 <__multadd+0x74>
 8007e94:	6861      	ldr	r1, [r4, #4]
 8007e96:	4638      	mov	r0, r7
 8007e98:	3101      	adds	r1, #1
 8007e9a:	f7ff ff79 	bl	8007d90 <_Balloc>
 8007e9e:	4680      	mov	r8, r0
 8007ea0:	b928      	cbnz	r0, 8007eae <__multadd+0x5a>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ed8 <__multadd+0x84>)
 8007ea6:	480d      	ldr	r0, [pc, #52]	@ (8007edc <__multadd+0x88>)
 8007ea8:	21ba      	movs	r1, #186	@ 0xba
 8007eaa:	f000 fd2f 	bl	800890c <__assert_func>
 8007eae:	6922      	ldr	r2, [r4, #16]
 8007eb0:	3202      	adds	r2, #2
 8007eb2:	f104 010c 	add.w	r1, r4, #12
 8007eb6:	0092      	lsls	r2, r2, #2
 8007eb8:	300c      	adds	r0, #12
 8007eba:	f000 fd19 	bl	80088f0 <memcpy>
 8007ebe:	4621      	mov	r1, r4
 8007ec0:	4638      	mov	r0, r7
 8007ec2:	f7ff ffa5 	bl	8007e10 <_Bfree>
 8007ec6:	4644      	mov	r4, r8
 8007ec8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ecc:	3501      	adds	r5, #1
 8007ece:	615e      	str	r6, [r3, #20]
 8007ed0:	6125      	str	r5, [r4, #16]
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ed8:	08009bac 	.word	0x08009bac
 8007edc:	08009bbd 	.word	0x08009bbd

08007ee0 <__hi0bits>:
 8007ee0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	bf36      	itet	cc
 8007ee8:	0403      	lslcc	r3, r0, #16
 8007eea:	2000      	movcs	r0, #0
 8007eec:	2010      	movcc	r0, #16
 8007eee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ef2:	bf3c      	itt	cc
 8007ef4:	021b      	lslcc	r3, r3, #8
 8007ef6:	3008      	addcc	r0, #8
 8007ef8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007efc:	bf3c      	itt	cc
 8007efe:	011b      	lslcc	r3, r3, #4
 8007f00:	3004      	addcc	r0, #4
 8007f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f06:	bf3c      	itt	cc
 8007f08:	009b      	lslcc	r3, r3, #2
 8007f0a:	3002      	addcc	r0, #2
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	db05      	blt.n	8007f1c <__hi0bits+0x3c>
 8007f10:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007f14:	f100 0001 	add.w	r0, r0, #1
 8007f18:	bf08      	it	eq
 8007f1a:	2020      	moveq	r0, #32
 8007f1c:	4770      	bx	lr

08007f1e <__lo0bits>:
 8007f1e:	6803      	ldr	r3, [r0, #0]
 8007f20:	4602      	mov	r2, r0
 8007f22:	f013 0007 	ands.w	r0, r3, #7
 8007f26:	d00b      	beq.n	8007f40 <__lo0bits+0x22>
 8007f28:	07d9      	lsls	r1, r3, #31
 8007f2a:	d421      	bmi.n	8007f70 <__lo0bits+0x52>
 8007f2c:	0798      	lsls	r0, r3, #30
 8007f2e:	bf49      	itett	mi
 8007f30:	085b      	lsrmi	r3, r3, #1
 8007f32:	089b      	lsrpl	r3, r3, #2
 8007f34:	2001      	movmi	r0, #1
 8007f36:	6013      	strmi	r3, [r2, #0]
 8007f38:	bf5c      	itt	pl
 8007f3a:	6013      	strpl	r3, [r2, #0]
 8007f3c:	2002      	movpl	r0, #2
 8007f3e:	4770      	bx	lr
 8007f40:	b299      	uxth	r1, r3
 8007f42:	b909      	cbnz	r1, 8007f48 <__lo0bits+0x2a>
 8007f44:	0c1b      	lsrs	r3, r3, #16
 8007f46:	2010      	movs	r0, #16
 8007f48:	b2d9      	uxtb	r1, r3
 8007f4a:	b909      	cbnz	r1, 8007f50 <__lo0bits+0x32>
 8007f4c:	3008      	adds	r0, #8
 8007f4e:	0a1b      	lsrs	r3, r3, #8
 8007f50:	0719      	lsls	r1, r3, #28
 8007f52:	bf04      	itt	eq
 8007f54:	091b      	lsreq	r3, r3, #4
 8007f56:	3004      	addeq	r0, #4
 8007f58:	0799      	lsls	r1, r3, #30
 8007f5a:	bf04      	itt	eq
 8007f5c:	089b      	lsreq	r3, r3, #2
 8007f5e:	3002      	addeq	r0, #2
 8007f60:	07d9      	lsls	r1, r3, #31
 8007f62:	d403      	bmi.n	8007f6c <__lo0bits+0x4e>
 8007f64:	085b      	lsrs	r3, r3, #1
 8007f66:	f100 0001 	add.w	r0, r0, #1
 8007f6a:	d003      	beq.n	8007f74 <__lo0bits+0x56>
 8007f6c:	6013      	str	r3, [r2, #0]
 8007f6e:	4770      	bx	lr
 8007f70:	2000      	movs	r0, #0
 8007f72:	4770      	bx	lr
 8007f74:	2020      	movs	r0, #32
 8007f76:	4770      	bx	lr

08007f78 <__i2b>:
 8007f78:	b510      	push	{r4, lr}
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	2101      	movs	r1, #1
 8007f7e:	f7ff ff07 	bl	8007d90 <_Balloc>
 8007f82:	4602      	mov	r2, r0
 8007f84:	b928      	cbnz	r0, 8007f92 <__i2b+0x1a>
 8007f86:	4b05      	ldr	r3, [pc, #20]	@ (8007f9c <__i2b+0x24>)
 8007f88:	4805      	ldr	r0, [pc, #20]	@ (8007fa0 <__i2b+0x28>)
 8007f8a:	f240 1145 	movw	r1, #325	@ 0x145
 8007f8e:	f000 fcbd 	bl	800890c <__assert_func>
 8007f92:	2301      	movs	r3, #1
 8007f94:	6144      	str	r4, [r0, #20]
 8007f96:	6103      	str	r3, [r0, #16]
 8007f98:	bd10      	pop	{r4, pc}
 8007f9a:	bf00      	nop
 8007f9c:	08009bac 	.word	0x08009bac
 8007fa0:	08009bbd 	.word	0x08009bbd

08007fa4 <__multiply>:
 8007fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa8:	4614      	mov	r4, r2
 8007faa:	690a      	ldr	r2, [r1, #16]
 8007fac:	6923      	ldr	r3, [r4, #16]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	bfa8      	it	ge
 8007fb2:	4623      	movge	r3, r4
 8007fb4:	460f      	mov	r7, r1
 8007fb6:	bfa4      	itt	ge
 8007fb8:	460c      	movge	r4, r1
 8007fba:	461f      	movge	r7, r3
 8007fbc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007fc0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007fc4:	68a3      	ldr	r3, [r4, #8]
 8007fc6:	6861      	ldr	r1, [r4, #4]
 8007fc8:	eb0a 0609 	add.w	r6, sl, r9
 8007fcc:	42b3      	cmp	r3, r6
 8007fce:	b085      	sub	sp, #20
 8007fd0:	bfb8      	it	lt
 8007fd2:	3101      	addlt	r1, #1
 8007fd4:	f7ff fedc 	bl	8007d90 <_Balloc>
 8007fd8:	b930      	cbnz	r0, 8007fe8 <__multiply+0x44>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	4b44      	ldr	r3, [pc, #272]	@ (80080f0 <__multiply+0x14c>)
 8007fde:	4845      	ldr	r0, [pc, #276]	@ (80080f4 <__multiply+0x150>)
 8007fe0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007fe4:	f000 fc92 	bl	800890c <__assert_func>
 8007fe8:	f100 0514 	add.w	r5, r0, #20
 8007fec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007ff0:	462b      	mov	r3, r5
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	4543      	cmp	r3, r8
 8007ff6:	d321      	bcc.n	800803c <__multiply+0x98>
 8007ff8:	f107 0114 	add.w	r1, r7, #20
 8007ffc:	f104 0214 	add.w	r2, r4, #20
 8008000:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008004:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008008:	9302      	str	r3, [sp, #8]
 800800a:	1b13      	subs	r3, r2, r4
 800800c:	3b15      	subs	r3, #21
 800800e:	f023 0303 	bic.w	r3, r3, #3
 8008012:	3304      	adds	r3, #4
 8008014:	f104 0715 	add.w	r7, r4, #21
 8008018:	42ba      	cmp	r2, r7
 800801a:	bf38      	it	cc
 800801c:	2304      	movcc	r3, #4
 800801e:	9301      	str	r3, [sp, #4]
 8008020:	9b02      	ldr	r3, [sp, #8]
 8008022:	9103      	str	r1, [sp, #12]
 8008024:	428b      	cmp	r3, r1
 8008026:	d80c      	bhi.n	8008042 <__multiply+0x9e>
 8008028:	2e00      	cmp	r6, #0
 800802a:	dd03      	ble.n	8008034 <__multiply+0x90>
 800802c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008030:	2b00      	cmp	r3, #0
 8008032:	d05b      	beq.n	80080ec <__multiply+0x148>
 8008034:	6106      	str	r6, [r0, #16]
 8008036:	b005      	add	sp, #20
 8008038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800803c:	f843 2b04 	str.w	r2, [r3], #4
 8008040:	e7d8      	b.n	8007ff4 <__multiply+0x50>
 8008042:	f8b1 a000 	ldrh.w	sl, [r1]
 8008046:	f1ba 0f00 	cmp.w	sl, #0
 800804a:	d024      	beq.n	8008096 <__multiply+0xf2>
 800804c:	f104 0e14 	add.w	lr, r4, #20
 8008050:	46a9      	mov	r9, r5
 8008052:	f04f 0c00 	mov.w	ip, #0
 8008056:	f85e 7b04 	ldr.w	r7, [lr], #4
 800805a:	f8d9 3000 	ldr.w	r3, [r9]
 800805e:	fa1f fb87 	uxth.w	fp, r7
 8008062:	b29b      	uxth	r3, r3
 8008064:	fb0a 330b 	mla	r3, sl, fp, r3
 8008068:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800806c:	f8d9 7000 	ldr.w	r7, [r9]
 8008070:	4463      	add	r3, ip
 8008072:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008076:	fb0a c70b 	mla	r7, sl, fp, ip
 800807a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800807e:	b29b      	uxth	r3, r3
 8008080:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008084:	4572      	cmp	r2, lr
 8008086:	f849 3b04 	str.w	r3, [r9], #4
 800808a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800808e:	d8e2      	bhi.n	8008056 <__multiply+0xb2>
 8008090:	9b01      	ldr	r3, [sp, #4]
 8008092:	f845 c003 	str.w	ip, [r5, r3]
 8008096:	9b03      	ldr	r3, [sp, #12]
 8008098:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800809c:	3104      	adds	r1, #4
 800809e:	f1b9 0f00 	cmp.w	r9, #0
 80080a2:	d021      	beq.n	80080e8 <__multiply+0x144>
 80080a4:	682b      	ldr	r3, [r5, #0]
 80080a6:	f104 0c14 	add.w	ip, r4, #20
 80080aa:	46ae      	mov	lr, r5
 80080ac:	f04f 0a00 	mov.w	sl, #0
 80080b0:	f8bc b000 	ldrh.w	fp, [ip]
 80080b4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80080b8:	fb09 770b 	mla	r7, r9, fp, r7
 80080bc:	4457      	add	r7, sl
 80080be:	b29b      	uxth	r3, r3
 80080c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80080c4:	f84e 3b04 	str.w	r3, [lr], #4
 80080c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80080cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080d0:	f8be 3000 	ldrh.w	r3, [lr]
 80080d4:	fb09 330a 	mla	r3, r9, sl, r3
 80080d8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80080dc:	4562      	cmp	r2, ip
 80080de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080e2:	d8e5      	bhi.n	80080b0 <__multiply+0x10c>
 80080e4:	9f01      	ldr	r7, [sp, #4]
 80080e6:	51eb      	str	r3, [r5, r7]
 80080e8:	3504      	adds	r5, #4
 80080ea:	e799      	b.n	8008020 <__multiply+0x7c>
 80080ec:	3e01      	subs	r6, #1
 80080ee:	e79b      	b.n	8008028 <__multiply+0x84>
 80080f0:	08009bac 	.word	0x08009bac
 80080f4:	08009bbd 	.word	0x08009bbd

080080f8 <__pow5mult>:
 80080f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080fc:	4615      	mov	r5, r2
 80080fe:	f012 0203 	ands.w	r2, r2, #3
 8008102:	4607      	mov	r7, r0
 8008104:	460e      	mov	r6, r1
 8008106:	d007      	beq.n	8008118 <__pow5mult+0x20>
 8008108:	4c25      	ldr	r4, [pc, #148]	@ (80081a0 <__pow5mult+0xa8>)
 800810a:	3a01      	subs	r2, #1
 800810c:	2300      	movs	r3, #0
 800810e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008112:	f7ff fe9f 	bl	8007e54 <__multadd>
 8008116:	4606      	mov	r6, r0
 8008118:	10ad      	asrs	r5, r5, #2
 800811a:	d03d      	beq.n	8008198 <__pow5mult+0xa0>
 800811c:	69fc      	ldr	r4, [r7, #28]
 800811e:	b97c      	cbnz	r4, 8008140 <__pow5mult+0x48>
 8008120:	2010      	movs	r0, #16
 8008122:	f7ff fd7f 	bl	8007c24 <malloc>
 8008126:	4602      	mov	r2, r0
 8008128:	61f8      	str	r0, [r7, #28]
 800812a:	b928      	cbnz	r0, 8008138 <__pow5mult+0x40>
 800812c:	4b1d      	ldr	r3, [pc, #116]	@ (80081a4 <__pow5mult+0xac>)
 800812e:	481e      	ldr	r0, [pc, #120]	@ (80081a8 <__pow5mult+0xb0>)
 8008130:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008134:	f000 fbea 	bl	800890c <__assert_func>
 8008138:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800813c:	6004      	str	r4, [r0, #0]
 800813e:	60c4      	str	r4, [r0, #12]
 8008140:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008144:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008148:	b94c      	cbnz	r4, 800815e <__pow5mult+0x66>
 800814a:	f240 2171 	movw	r1, #625	@ 0x271
 800814e:	4638      	mov	r0, r7
 8008150:	f7ff ff12 	bl	8007f78 <__i2b>
 8008154:	2300      	movs	r3, #0
 8008156:	f8c8 0008 	str.w	r0, [r8, #8]
 800815a:	4604      	mov	r4, r0
 800815c:	6003      	str	r3, [r0, #0]
 800815e:	f04f 0900 	mov.w	r9, #0
 8008162:	07eb      	lsls	r3, r5, #31
 8008164:	d50a      	bpl.n	800817c <__pow5mult+0x84>
 8008166:	4631      	mov	r1, r6
 8008168:	4622      	mov	r2, r4
 800816a:	4638      	mov	r0, r7
 800816c:	f7ff ff1a 	bl	8007fa4 <__multiply>
 8008170:	4631      	mov	r1, r6
 8008172:	4680      	mov	r8, r0
 8008174:	4638      	mov	r0, r7
 8008176:	f7ff fe4b 	bl	8007e10 <_Bfree>
 800817a:	4646      	mov	r6, r8
 800817c:	106d      	asrs	r5, r5, #1
 800817e:	d00b      	beq.n	8008198 <__pow5mult+0xa0>
 8008180:	6820      	ldr	r0, [r4, #0]
 8008182:	b938      	cbnz	r0, 8008194 <__pow5mult+0x9c>
 8008184:	4622      	mov	r2, r4
 8008186:	4621      	mov	r1, r4
 8008188:	4638      	mov	r0, r7
 800818a:	f7ff ff0b 	bl	8007fa4 <__multiply>
 800818e:	6020      	str	r0, [r4, #0]
 8008190:	f8c0 9000 	str.w	r9, [r0]
 8008194:	4604      	mov	r4, r0
 8008196:	e7e4      	b.n	8008162 <__pow5mult+0x6a>
 8008198:	4630      	mov	r0, r6
 800819a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800819e:	bf00      	nop
 80081a0:	08009c18 	.word	0x08009c18
 80081a4:	08009b3d 	.word	0x08009b3d
 80081a8:	08009bbd 	.word	0x08009bbd

080081ac <__lshift>:
 80081ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081b0:	460c      	mov	r4, r1
 80081b2:	6849      	ldr	r1, [r1, #4]
 80081b4:	6923      	ldr	r3, [r4, #16]
 80081b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80081ba:	68a3      	ldr	r3, [r4, #8]
 80081bc:	4607      	mov	r7, r0
 80081be:	4691      	mov	r9, r2
 80081c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80081c4:	f108 0601 	add.w	r6, r8, #1
 80081c8:	42b3      	cmp	r3, r6
 80081ca:	db0b      	blt.n	80081e4 <__lshift+0x38>
 80081cc:	4638      	mov	r0, r7
 80081ce:	f7ff fddf 	bl	8007d90 <_Balloc>
 80081d2:	4605      	mov	r5, r0
 80081d4:	b948      	cbnz	r0, 80081ea <__lshift+0x3e>
 80081d6:	4602      	mov	r2, r0
 80081d8:	4b28      	ldr	r3, [pc, #160]	@ (800827c <__lshift+0xd0>)
 80081da:	4829      	ldr	r0, [pc, #164]	@ (8008280 <__lshift+0xd4>)
 80081dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80081e0:	f000 fb94 	bl	800890c <__assert_func>
 80081e4:	3101      	adds	r1, #1
 80081e6:	005b      	lsls	r3, r3, #1
 80081e8:	e7ee      	b.n	80081c8 <__lshift+0x1c>
 80081ea:	2300      	movs	r3, #0
 80081ec:	f100 0114 	add.w	r1, r0, #20
 80081f0:	f100 0210 	add.w	r2, r0, #16
 80081f4:	4618      	mov	r0, r3
 80081f6:	4553      	cmp	r3, sl
 80081f8:	db33      	blt.n	8008262 <__lshift+0xb6>
 80081fa:	6920      	ldr	r0, [r4, #16]
 80081fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008200:	f104 0314 	add.w	r3, r4, #20
 8008204:	f019 091f 	ands.w	r9, r9, #31
 8008208:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800820c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008210:	d02b      	beq.n	800826a <__lshift+0xbe>
 8008212:	f1c9 0e20 	rsb	lr, r9, #32
 8008216:	468a      	mov	sl, r1
 8008218:	2200      	movs	r2, #0
 800821a:	6818      	ldr	r0, [r3, #0]
 800821c:	fa00 f009 	lsl.w	r0, r0, r9
 8008220:	4310      	orrs	r0, r2
 8008222:	f84a 0b04 	str.w	r0, [sl], #4
 8008226:	f853 2b04 	ldr.w	r2, [r3], #4
 800822a:	459c      	cmp	ip, r3
 800822c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008230:	d8f3      	bhi.n	800821a <__lshift+0x6e>
 8008232:	ebac 0304 	sub.w	r3, ip, r4
 8008236:	3b15      	subs	r3, #21
 8008238:	f023 0303 	bic.w	r3, r3, #3
 800823c:	3304      	adds	r3, #4
 800823e:	f104 0015 	add.w	r0, r4, #21
 8008242:	4584      	cmp	ip, r0
 8008244:	bf38      	it	cc
 8008246:	2304      	movcc	r3, #4
 8008248:	50ca      	str	r2, [r1, r3]
 800824a:	b10a      	cbz	r2, 8008250 <__lshift+0xa4>
 800824c:	f108 0602 	add.w	r6, r8, #2
 8008250:	3e01      	subs	r6, #1
 8008252:	4638      	mov	r0, r7
 8008254:	612e      	str	r6, [r5, #16]
 8008256:	4621      	mov	r1, r4
 8008258:	f7ff fdda 	bl	8007e10 <_Bfree>
 800825c:	4628      	mov	r0, r5
 800825e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008262:	f842 0f04 	str.w	r0, [r2, #4]!
 8008266:	3301      	adds	r3, #1
 8008268:	e7c5      	b.n	80081f6 <__lshift+0x4a>
 800826a:	3904      	subs	r1, #4
 800826c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008270:	f841 2f04 	str.w	r2, [r1, #4]!
 8008274:	459c      	cmp	ip, r3
 8008276:	d8f9      	bhi.n	800826c <__lshift+0xc0>
 8008278:	e7ea      	b.n	8008250 <__lshift+0xa4>
 800827a:	bf00      	nop
 800827c:	08009bac 	.word	0x08009bac
 8008280:	08009bbd 	.word	0x08009bbd

08008284 <__mcmp>:
 8008284:	690a      	ldr	r2, [r1, #16]
 8008286:	4603      	mov	r3, r0
 8008288:	6900      	ldr	r0, [r0, #16]
 800828a:	1a80      	subs	r0, r0, r2
 800828c:	b530      	push	{r4, r5, lr}
 800828e:	d10e      	bne.n	80082ae <__mcmp+0x2a>
 8008290:	3314      	adds	r3, #20
 8008292:	3114      	adds	r1, #20
 8008294:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008298:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800829c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80082a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80082a4:	4295      	cmp	r5, r2
 80082a6:	d003      	beq.n	80082b0 <__mcmp+0x2c>
 80082a8:	d205      	bcs.n	80082b6 <__mcmp+0x32>
 80082aa:	f04f 30ff 	mov.w	r0, #4294967295
 80082ae:	bd30      	pop	{r4, r5, pc}
 80082b0:	42a3      	cmp	r3, r4
 80082b2:	d3f3      	bcc.n	800829c <__mcmp+0x18>
 80082b4:	e7fb      	b.n	80082ae <__mcmp+0x2a>
 80082b6:	2001      	movs	r0, #1
 80082b8:	e7f9      	b.n	80082ae <__mcmp+0x2a>
	...

080082bc <__mdiff>:
 80082bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c0:	4689      	mov	r9, r1
 80082c2:	4606      	mov	r6, r0
 80082c4:	4611      	mov	r1, r2
 80082c6:	4648      	mov	r0, r9
 80082c8:	4614      	mov	r4, r2
 80082ca:	f7ff ffdb 	bl	8008284 <__mcmp>
 80082ce:	1e05      	subs	r5, r0, #0
 80082d0:	d112      	bne.n	80082f8 <__mdiff+0x3c>
 80082d2:	4629      	mov	r1, r5
 80082d4:	4630      	mov	r0, r6
 80082d6:	f7ff fd5b 	bl	8007d90 <_Balloc>
 80082da:	4602      	mov	r2, r0
 80082dc:	b928      	cbnz	r0, 80082ea <__mdiff+0x2e>
 80082de:	4b3f      	ldr	r3, [pc, #252]	@ (80083dc <__mdiff+0x120>)
 80082e0:	f240 2137 	movw	r1, #567	@ 0x237
 80082e4:	483e      	ldr	r0, [pc, #248]	@ (80083e0 <__mdiff+0x124>)
 80082e6:	f000 fb11 	bl	800890c <__assert_func>
 80082ea:	2301      	movs	r3, #1
 80082ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80082f0:	4610      	mov	r0, r2
 80082f2:	b003      	add	sp, #12
 80082f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f8:	bfbc      	itt	lt
 80082fa:	464b      	movlt	r3, r9
 80082fc:	46a1      	movlt	r9, r4
 80082fe:	4630      	mov	r0, r6
 8008300:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008304:	bfba      	itte	lt
 8008306:	461c      	movlt	r4, r3
 8008308:	2501      	movlt	r5, #1
 800830a:	2500      	movge	r5, #0
 800830c:	f7ff fd40 	bl	8007d90 <_Balloc>
 8008310:	4602      	mov	r2, r0
 8008312:	b918      	cbnz	r0, 800831c <__mdiff+0x60>
 8008314:	4b31      	ldr	r3, [pc, #196]	@ (80083dc <__mdiff+0x120>)
 8008316:	f240 2145 	movw	r1, #581	@ 0x245
 800831a:	e7e3      	b.n	80082e4 <__mdiff+0x28>
 800831c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008320:	6926      	ldr	r6, [r4, #16]
 8008322:	60c5      	str	r5, [r0, #12]
 8008324:	f109 0310 	add.w	r3, r9, #16
 8008328:	f109 0514 	add.w	r5, r9, #20
 800832c:	f104 0e14 	add.w	lr, r4, #20
 8008330:	f100 0b14 	add.w	fp, r0, #20
 8008334:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008338:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800833c:	9301      	str	r3, [sp, #4]
 800833e:	46d9      	mov	r9, fp
 8008340:	f04f 0c00 	mov.w	ip, #0
 8008344:	9b01      	ldr	r3, [sp, #4]
 8008346:	f85e 0b04 	ldr.w	r0, [lr], #4
 800834a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800834e:	9301      	str	r3, [sp, #4]
 8008350:	fa1f f38a 	uxth.w	r3, sl
 8008354:	4619      	mov	r1, r3
 8008356:	b283      	uxth	r3, r0
 8008358:	1acb      	subs	r3, r1, r3
 800835a:	0c00      	lsrs	r0, r0, #16
 800835c:	4463      	add	r3, ip
 800835e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008362:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008366:	b29b      	uxth	r3, r3
 8008368:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800836c:	4576      	cmp	r6, lr
 800836e:	f849 3b04 	str.w	r3, [r9], #4
 8008372:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008376:	d8e5      	bhi.n	8008344 <__mdiff+0x88>
 8008378:	1b33      	subs	r3, r6, r4
 800837a:	3b15      	subs	r3, #21
 800837c:	f023 0303 	bic.w	r3, r3, #3
 8008380:	3415      	adds	r4, #21
 8008382:	3304      	adds	r3, #4
 8008384:	42a6      	cmp	r6, r4
 8008386:	bf38      	it	cc
 8008388:	2304      	movcc	r3, #4
 800838a:	441d      	add	r5, r3
 800838c:	445b      	add	r3, fp
 800838e:	461e      	mov	r6, r3
 8008390:	462c      	mov	r4, r5
 8008392:	4544      	cmp	r4, r8
 8008394:	d30e      	bcc.n	80083b4 <__mdiff+0xf8>
 8008396:	f108 0103 	add.w	r1, r8, #3
 800839a:	1b49      	subs	r1, r1, r5
 800839c:	f021 0103 	bic.w	r1, r1, #3
 80083a0:	3d03      	subs	r5, #3
 80083a2:	45a8      	cmp	r8, r5
 80083a4:	bf38      	it	cc
 80083a6:	2100      	movcc	r1, #0
 80083a8:	440b      	add	r3, r1
 80083aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80083ae:	b191      	cbz	r1, 80083d6 <__mdiff+0x11a>
 80083b0:	6117      	str	r7, [r2, #16]
 80083b2:	e79d      	b.n	80082f0 <__mdiff+0x34>
 80083b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80083b8:	46e6      	mov	lr, ip
 80083ba:	0c08      	lsrs	r0, r1, #16
 80083bc:	fa1c fc81 	uxtah	ip, ip, r1
 80083c0:	4471      	add	r1, lr
 80083c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80083c6:	b289      	uxth	r1, r1
 80083c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80083cc:	f846 1b04 	str.w	r1, [r6], #4
 80083d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80083d4:	e7dd      	b.n	8008392 <__mdiff+0xd6>
 80083d6:	3f01      	subs	r7, #1
 80083d8:	e7e7      	b.n	80083aa <__mdiff+0xee>
 80083da:	bf00      	nop
 80083dc:	08009bac 	.word	0x08009bac
 80083e0:	08009bbd 	.word	0x08009bbd

080083e4 <__d2b>:
 80083e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80083e8:	460f      	mov	r7, r1
 80083ea:	2101      	movs	r1, #1
 80083ec:	ec59 8b10 	vmov	r8, r9, d0
 80083f0:	4616      	mov	r6, r2
 80083f2:	f7ff fccd 	bl	8007d90 <_Balloc>
 80083f6:	4604      	mov	r4, r0
 80083f8:	b930      	cbnz	r0, 8008408 <__d2b+0x24>
 80083fa:	4602      	mov	r2, r0
 80083fc:	4b23      	ldr	r3, [pc, #140]	@ (800848c <__d2b+0xa8>)
 80083fe:	4824      	ldr	r0, [pc, #144]	@ (8008490 <__d2b+0xac>)
 8008400:	f240 310f 	movw	r1, #783	@ 0x30f
 8008404:	f000 fa82 	bl	800890c <__assert_func>
 8008408:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800840c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008410:	b10d      	cbz	r5, 8008416 <__d2b+0x32>
 8008412:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008416:	9301      	str	r3, [sp, #4]
 8008418:	f1b8 0300 	subs.w	r3, r8, #0
 800841c:	d023      	beq.n	8008466 <__d2b+0x82>
 800841e:	4668      	mov	r0, sp
 8008420:	9300      	str	r3, [sp, #0]
 8008422:	f7ff fd7c 	bl	8007f1e <__lo0bits>
 8008426:	e9dd 1200 	ldrd	r1, r2, [sp]
 800842a:	b1d0      	cbz	r0, 8008462 <__d2b+0x7e>
 800842c:	f1c0 0320 	rsb	r3, r0, #32
 8008430:	fa02 f303 	lsl.w	r3, r2, r3
 8008434:	430b      	orrs	r3, r1
 8008436:	40c2      	lsrs	r2, r0
 8008438:	6163      	str	r3, [r4, #20]
 800843a:	9201      	str	r2, [sp, #4]
 800843c:	9b01      	ldr	r3, [sp, #4]
 800843e:	61a3      	str	r3, [r4, #24]
 8008440:	2b00      	cmp	r3, #0
 8008442:	bf0c      	ite	eq
 8008444:	2201      	moveq	r2, #1
 8008446:	2202      	movne	r2, #2
 8008448:	6122      	str	r2, [r4, #16]
 800844a:	b1a5      	cbz	r5, 8008476 <__d2b+0x92>
 800844c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008450:	4405      	add	r5, r0
 8008452:	603d      	str	r5, [r7, #0]
 8008454:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008458:	6030      	str	r0, [r6, #0]
 800845a:	4620      	mov	r0, r4
 800845c:	b003      	add	sp, #12
 800845e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008462:	6161      	str	r1, [r4, #20]
 8008464:	e7ea      	b.n	800843c <__d2b+0x58>
 8008466:	a801      	add	r0, sp, #4
 8008468:	f7ff fd59 	bl	8007f1e <__lo0bits>
 800846c:	9b01      	ldr	r3, [sp, #4]
 800846e:	6163      	str	r3, [r4, #20]
 8008470:	3020      	adds	r0, #32
 8008472:	2201      	movs	r2, #1
 8008474:	e7e8      	b.n	8008448 <__d2b+0x64>
 8008476:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800847a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800847e:	6038      	str	r0, [r7, #0]
 8008480:	6918      	ldr	r0, [r3, #16]
 8008482:	f7ff fd2d 	bl	8007ee0 <__hi0bits>
 8008486:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800848a:	e7e5      	b.n	8008458 <__d2b+0x74>
 800848c:	08009bac 	.word	0x08009bac
 8008490:	08009bbd 	.word	0x08009bbd

08008494 <__ssputs_r>:
 8008494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008498:	688e      	ldr	r6, [r1, #8]
 800849a:	461f      	mov	r7, r3
 800849c:	42be      	cmp	r6, r7
 800849e:	680b      	ldr	r3, [r1, #0]
 80084a0:	4682      	mov	sl, r0
 80084a2:	460c      	mov	r4, r1
 80084a4:	4690      	mov	r8, r2
 80084a6:	d82d      	bhi.n	8008504 <__ssputs_r+0x70>
 80084a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80084b0:	d026      	beq.n	8008500 <__ssputs_r+0x6c>
 80084b2:	6965      	ldr	r5, [r4, #20]
 80084b4:	6909      	ldr	r1, [r1, #16]
 80084b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084ba:	eba3 0901 	sub.w	r9, r3, r1
 80084be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084c2:	1c7b      	adds	r3, r7, #1
 80084c4:	444b      	add	r3, r9
 80084c6:	106d      	asrs	r5, r5, #1
 80084c8:	429d      	cmp	r5, r3
 80084ca:	bf38      	it	cc
 80084cc:	461d      	movcc	r5, r3
 80084ce:	0553      	lsls	r3, r2, #21
 80084d0:	d527      	bpl.n	8008522 <__ssputs_r+0x8e>
 80084d2:	4629      	mov	r1, r5
 80084d4:	f7ff fbd0 	bl	8007c78 <_malloc_r>
 80084d8:	4606      	mov	r6, r0
 80084da:	b360      	cbz	r0, 8008536 <__ssputs_r+0xa2>
 80084dc:	6921      	ldr	r1, [r4, #16]
 80084de:	464a      	mov	r2, r9
 80084e0:	f000 fa06 	bl	80088f0 <memcpy>
 80084e4:	89a3      	ldrh	r3, [r4, #12]
 80084e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80084ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084ee:	81a3      	strh	r3, [r4, #12]
 80084f0:	6126      	str	r6, [r4, #16]
 80084f2:	6165      	str	r5, [r4, #20]
 80084f4:	444e      	add	r6, r9
 80084f6:	eba5 0509 	sub.w	r5, r5, r9
 80084fa:	6026      	str	r6, [r4, #0]
 80084fc:	60a5      	str	r5, [r4, #8]
 80084fe:	463e      	mov	r6, r7
 8008500:	42be      	cmp	r6, r7
 8008502:	d900      	bls.n	8008506 <__ssputs_r+0x72>
 8008504:	463e      	mov	r6, r7
 8008506:	6820      	ldr	r0, [r4, #0]
 8008508:	4632      	mov	r2, r6
 800850a:	4641      	mov	r1, r8
 800850c:	f000 f9c6 	bl	800889c <memmove>
 8008510:	68a3      	ldr	r3, [r4, #8]
 8008512:	1b9b      	subs	r3, r3, r6
 8008514:	60a3      	str	r3, [r4, #8]
 8008516:	6823      	ldr	r3, [r4, #0]
 8008518:	4433      	add	r3, r6
 800851a:	6023      	str	r3, [r4, #0]
 800851c:	2000      	movs	r0, #0
 800851e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008522:	462a      	mov	r2, r5
 8008524:	f000 fa36 	bl	8008994 <_realloc_r>
 8008528:	4606      	mov	r6, r0
 800852a:	2800      	cmp	r0, #0
 800852c:	d1e0      	bne.n	80084f0 <__ssputs_r+0x5c>
 800852e:	6921      	ldr	r1, [r4, #16]
 8008530:	4650      	mov	r0, sl
 8008532:	f7ff fb2d 	bl	8007b90 <_free_r>
 8008536:	230c      	movs	r3, #12
 8008538:	f8ca 3000 	str.w	r3, [sl]
 800853c:	89a3      	ldrh	r3, [r4, #12]
 800853e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008542:	81a3      	strh	r3, [r4, #12]
 8008544:	f04f 30ff 	mov.w	r0, #4294967295
 8008548:	e7e9      	b.n	800851e <__ssputs_r+0x8a>
	...

0800854c <_svfiprintf_r>:
 800854c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008550:	4698      	mov	r8, r3
 8008552:	898b      	ldrh	r3, [r1, #12]
 8008554:	061b      	lsls	r3, r3, #24
 8008556:	b09d      	sub	sp, #116	@ 0x74
 8008558:	4607      	mov	r7, r0
 800855a:	460d      	mov	r5, r1
 800855c:	4614      	mov	r4, r2
 800855e:	d510      	bpl.n	8008582 <_svfiprintf_r+0x36>
 8008560:	690b      	ldr	r3, [r1, #16]
 8008562:	b973      	cbnz	r3, 8008582 <_svfiprintf_r+0x36>
 8008564:	2140      	movs	r1, #64	@ 0x40
 8008566:	f7ff fb87 	bl	8007c78 <_malloc_r>
 800856a:	6028      	str	r0, [r5, #0]
 800856c:	6128      	str	r0, [r5, #16]
 800856e:	b930      	cbnz	r0, 800857e <_svfiprintf_r+0x32>
 8008570:	230c      	movs	r3, #12
 8008572:	603b      	str	r3, [r7, #0]
 8008574:	f04f 30ff 	mov.w	r0, #4294967295
 8008578:	b01d      	add	sp, #116	@ 0x74
 800857a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800857e:	2340      	movs	r3, #64	@ 0x40
 8008580:	616b      	str	r3, [r5, #20]
 8008582:	2300      	movs	r3, #0
 8008584:	9309      	str	r3, [sp, #36]	@ 0x24
 8008586:	2320      	movs	r3, #32
 8008588:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800858c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008590:	2330      	movs	r3, #48	@ 0x30
 8008592:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008730 <_svfiprintf_r+0x1e4>
 8008596:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800859a:	f04f 0901 	mov.w	r9, #1
 800859e:	4623      	mov	r3, r4
 80085a0:	469a      	mov	sl, r3
 80085a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085a6:	b10a      	cbz	r2, 80085ac <_svfiprintf_r+0x60>
 80085a8:	2a25      	cmp	r2, #37	@ 0x25
 80085aa:	d1f9      	bne.n	80085a0 <_svfiprintf_r+0x54>
 80085ac:	ebba 0b04 	subs.w	fp, sl, r4
 80085b0:	d00b      	beq.n	80085ca <_svfiprintf_r+0x7e>
 80085b2:	465b      	mov	r3, fp
 80085b4:	4622      	mov	r2, r4
 80085b6:	4629      	mov	r1, r5
 80085b8:	4638      	mov	r0, r7
 80085ba:	f7ff ff6b 	bl	8008494 <__ssputs_r>
 80085be:	3001      	adds	r0, #1
 80085c0:	f000 80a7 	beq.w	8008712 <_svfiprintf_r+0x1c6>
 80085c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085c6:	445a      	add	r2, fp
 80085c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80085ca:	f89a 3000 	ldrb.w	r3, [sl]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f000 809f 	beq.w	8008712 <_svfiprintf_r+0x1c6>
 80085d4:	2300      	movs	r3, #0
 80085d6:	f04f 32ff 	mov.w	r2, #4294967295
 80085da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085de:	f10a 0a01 	add.w	sl, sl, #1
 80085e2:	9304      	str	r3, [sp, #16]
 80085e4:	9307      	str	r3, [sp, #28]
 80085e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80085ec:	4654      	mov	r4, sl
 80085ee:	2205      	movs	r2, #5
 80085f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085f4:	484e      	ldr	r0, [pc, #312]	@ (8008730 <_svfiprintf_r+0x1e4>)
 80085f6:	f7f7 fdeb 	bl	80001d0 <memchr>
 80085fa:	9a04      	ldr	r2, [sp, #16]
 80085fc:	b9d8      	cbnz	r0, 8008636 <_svfiprintf_r+0xea>
 80085fe:	06d0      	lsls	r0, r2, #27
 8008600:	bf44      	itt	mi
 8008602:	2320      	movmi	r3, #32
 8008604:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008608:	0711      	lsls	r1, r2, #28
 800860a:	bf44      	itt	mi
 800860c:	232b      	movmi	r3, #43	@ 0x2b
 800860e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008612:	f89a 3000 	ldrb.w	r3, [sl]
 8008616:	2b2a      	cmp	r3, #42	@ 0x2a
 8008618:	d015      	beq.n	8008646 <_svfiprintf_r+0xfa>
 800861a:	9a07      	ldr	r2, [sp, #28]
 800861c:	4654      	mov	r4, sl
 800861e:	2000      	movs	r0, #0
 8008620:	f04f 0c0a 	mov.w	ip, #10
 8008624:	4621      	mov	r1, r4
 8008626:	f811 3b01 	ldrb.w	r3, [r1], #1
 800862a:	3b30      	subs	r3, #48	@ 0x30
 800862c:	2b09      	cmp	r3, #9
 800862e:	d94b      	bls.n	80086c8 <_svfiprintf_r+0x17c>
 8008630:	b1b0      	cbz	r0, 8008660 <_svfiprintf_r+0x114>
 8008632:	9207      	str	r2, [sp, #28]
 8008634:	e014      	b.n	8008660 <_svfiprintf_r+0x114>
 8008636:	eba0 0308 	sub.w	r3, r0, r8
 800863a:	fa09 f303 	lsl.w	r3, r9, r3
 800863e:	4313      	orrs	r3, r2
 8008640:	9304      	str	r3, [sp, #16]
 8008642:	46a2      	mov	sl, r4
 8008644:	e7d2      	b.n	80085ec <_svfiprintf_r+0xa0>
 8008646:	9b03      	ldr	r3, [sp, #12]
 8008648:	1d19      	adds	r1, r3, #4
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	9103      	str	r1, [sp, #12]
 800864e:	2b00      	cmp	r3, #0
 8008650:	bfbb      	ittet	lt
 8008652:	425b      	neglt	r3, r3
 8008654:	f042 0202 	orrlt.w	r2, r2, #2
 8008658:	9307      	strge	r3, [sp, #28]
 800865a:	9307      	strlt	r3, [sp, #28]
 800865c:	bfb8      	it	lt
 800865e:	9204      	strlt	r2, [sp, #16]
 8008660:	7823      	ldrb	r3, [r4, #0]
 8008662:	2b2e      	cmp	r3, #46	@ 0x2e
 8008664:	d10a      	bne.n	800867c <_svfiprintf_r+0x130>
 8008666:	7863      	ldrb	r3, [r4, #1]
 8008668:	2b2a      	cmp	r3, #42	@ 0x2a
 800866a:	d132      	bne.n	80086d2 <_svfiprintf_r+0x186>
 800866c:	9b03      	ldr	r3, [sp, #12]
 800866e:	1d1a      	adds	r2, r3, #4
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	9203      	str	r2, [sp, #12]
 8008674:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008678:	3402      	adds	r4, #2
 800867a:	9305      	str	r3, [sp, #20]
 800867c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008740 <_svfiprintf_r+0x1f4>
 8008680:	7821      	ldrb	r1, [r4, #0]
 8008682:	2203      	movs	r2, #3
 8008684:	4650      	mov	r0, sl
 8008686:	f7f7 fda3 	bl	80001d0 <memchr>
 800868a:	b138      	cbz	r0, 800869c <_svfiprintf_r+0x150>
 800868c:	9b04      	ldr	r3, [sp, #16]
 800868e:	eba0 000a 	sub.w	r0, r0, sl
 8008692:	2240      	movs	r2, #64	@ 0x40
 8008694:	4082      	lsls	r2, r0
 8008696:	4313      	orrs	r3, r2
 8008698:	3401      	adds	r4, #1
 800869a:	9304      	str	r3, [sp, #16]
 800869c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086a0:	4824      	ldr	r0, [pc, #144]	@ (8008734 <_svfiprintf_r+0x1e8>)
 80086a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086a6:	2206      	movs	r2, #6
 80086a8:	f7f7 fd92 	bl	80001d0 <memchr>
 80086ac:	2800      	cmp	r0, #0
 80086ae:	d036      	beq.n	800871e <_svfiprintf_r+0x1d2>
 80086b0:	4b21      	ldr	r3, [pc, #132]	@ (8008738 <_svfiprintf_r+0x1ec>)
 80086b2:	bb1b      	cbnz	r3, 80086fc <_svfiprintf_r+0x1b0>
 80086b4:	9b03      	ldr	r3, [sp, #12]
 80086b6:	3307      	adds	r3, #7
 80086b8:	f023 0307 	bic.w	r3, r3, #7
 80086bc:	3308      	adds	r3, #8
 80086be:	9303      	str	r3, [sp, #12]
 80086c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086c2:	4433      	add	r3, r6
 80086c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80086c6:	e76a      	b.n	800859e <_svfiprintf_r+0x52>
 80086c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80086cc:	460c      	mov	r4, r1
 80086ce:	2001      	movs	r0, #1
 80086d0:	e7a8      	b.n	8008624 <_svfiprintf_r+0xd8>
 80086d2:	2300      	movs	r3, #0
 80086d4:	3401      	adds	r4, #1
 80086d6:	9305      	str	r3, [sp, #20]
 80086d8:	4619      	mov	r1, r3
 80086da:	f04f 0c0a 	mov.w	ip, #10
 80086de:	4620      	mov	r0, r4
 80086e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086e4:	3a30      	subs	r2, #48	@ 0x30
 80086e6:	2a09      	cmp	r2, #9
 80086e8:	d903      	bls.n	80086f2 <_svfiprintf_r+0x1a6>
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d0c6      	beq.n	800867c <_svfiprintf_r+0x130>
 80086ee:	9105      	str	r1, [sp, #20]
 80086f0:	e7c4      	b.n	800867c <_svfiprintf_r+0x130>
 80086f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80086f6:	4604      	mov	r4, r0
 80086f8:	2301      	movs	r3, #1
 80086fa:	e7f0      	b.n	80086de <_svfiprintf_r+0x192>
 80086fc:	ab03      	add	r3, sp, #12
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	462a      	mov	r2, r5
 8008702:	4b0e      	ldr	r3, [pc, #56]	@ (800873c <_svfiprintf_r+0x1f0>)
 8008704:	a904      	add	r1, sp, #16
 8008706:	4638      	mov	r0, r7
 8008708:	f7fd fe82 	bl	8006410 <_printf_float>
 800870c:	1c42      	adds	r2, r0, #1
 800870e:	4606      	mov	r6, r0
 8008710:	d1d6      	bne.n	80086c0 <_svfiprintf_r+0x174>
 8008712:	89ab      	ldrh	r3, [r5, #12]
 8008714:	065b      	lsls	r3, r3, #25
 8008716:	f53f af2d 	bmi.w	8008574 <_svfiprintf_r+0x28>
 800871a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800871c:	e72c      	b.n	8008578 <_svfiprintf_r+0x2c>
 800871e:	ab03      	add	r3, sp, #12
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	462a      	mov	r2, r5
 8008724:	4b05      	ldr	r3, [pc, #20]	@ (800873c <_svfiprintf_r+0x1f0>)
 8008726:	a904      	add	r1, sp, #16
 8008728:	4638      	mov	r0, r7
 800872a:	f7fe f909 	bl	8006940 <_printf_i>
 800872e:	e7ed      	b.n	800870c <_svfiprintf_r+0x1c0>
 8008730:	08009d18 	.word	0x08009d18
 8008734:	08009d22 	.word	0x08009d22
 8008738:	08006411 	.word	0x08006411
 800873c:	08008495 	.word	0x08008495
 8008740:	08009d1e 	.word	0x08009d1e

08008744 <__sflush_r>:
 8008744:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800874c:	0716      	lsls	r6, r2, #28
 800874e:	4605      	mov	r5, r0
 8008750:	460c      	mov	r4, r1
 8008752:	d454      	bmi.n	80087fe <__sflush_r+0xba>
 8008754:	684b      	ldr	r3, [r1, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	dc02      	bgt.n	8008760 <__sflush_r+0x1c>
 800875a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800875c:	2b00      	cmp	r3, #0
 800875e:	dd48      	ble.n	80087f2 <__sflush_r+0xae>
 8008760:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008762:	2e00      	cmp	r6, #0
 8008764:	d045      	beq.n	80087f2 <__sflush_r+0xae>
 8008766:	2300      	movs	r3, #0
 8008768:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800876c:	682f      	ldr	r7, [r5, #0]
 800876e:	6a21      	ldr	r1, [r4, #32]
 8008770:	602b      	str	r3, [r5, #0]
 8008772:	d030      	beq.n	80087d6 <__sflush_r+0x92>
 8008774:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008776:	89a3      	ldrh	r3, [r4, #12]
 8008778:	0759      	lsls	r1, r3, #29
 800877a:	d505      	bpl.n	8008788 <__sflush_r+0x44>
 800877c:	6863      	ldr	r3, [r4, #4]
 800877e:	1ad2      	subs	r2, r2, r3
 8008780:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008782:	b10b      	cbz	r3, 8008788 <__sflush_r+0x44>
 8008784:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008786:	1ad2      	subs	r2, r2, r3
 8008788:	2300      	movs	r3, #0
 800878a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800878c:	6a21      	ldr	r1, [r4, #32]
 800878e:	4628      	mov	r0, r5
 8008790:	47b0      	blx	r6
 8008792:	1c43      	adds	r3, r0, #1
 8008794:	89a3      	ldrh	r3, [r4, #12]
 8008796:	d106      	bne.n	80087a6 <__sflush_r+0x62>
 8008798:	6829      	ldr	r1, [r5, #0]
 800879a:	291d      	cmp	r1, #29
 800879c:	d82b      	bhi.n	80087f6 <__sflush_r+0xb2>
 800879e:	4a2a      	ldr	r2, [pc, #168]	@ (8008848 <__sflush_r+0x104>)
 80087a0:	410a      	asrs	r2, r1
 80087a2:	07d6      	lsls	r6, r2, #31
 80087a4:	d427      	bmi.n	80087f6 <__sflush_r+0xb2>
 80087a6:	2200      	movs	r2, #0
 80087a8:	6062      	str	r2, [r4, #4]
 80087aa:	04d9      	lsls	r1, r3, #19
 80087ac:	6922      	ldr	r2, [r4, #16]
 80087ae:	6022      	str	r2, [r4, #0]
 80087b0:	d504      	bpl.n	80087bc <__sflush_r+0x78>
 80087b2:	1c42      	adds	r2, r0, #1
 80087b4:	d101      	bne.n	80087ba <__sflush_r+0x76>
 80087b6:	682b      	ldr	r3, [r5, #0]
 80087b8:	b903      	cbnz	r3, 80087bc <__sflush_r+0x78>
 80087ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80087bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087be:	602f      	str	r7, [r5, #0]
 80087c0:	b1b9      	cbz	r1, 80087f2 <__sflush_r+0xae>
 80087c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087c6:	4299      	cmp	r1, r3
 80087c8:	d002      	beq.n	80087d0 <__sflush_r+0x8c>
 80087ca:	4628      	mov	r0, r5
 80087cc:	f7ff f9e0 	bl	8007b90 <_free_r>
 80087d0:	2300      	movs	r3, #0
 80087d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80087d4:	e00d      	b.n	80087f2 <__sflush_r+0xae>
 80087d6:	2301      	movs	r3, #1
 80087d8:	4628      	mov	r0, r5
 80087da:	47b0      	blx	r6
 80087dc:	4602      	mov	r2, r0
 80087de:	1c50      	adds	r0, r2, #1
 80087e0:	d1c9      	bne.n	8008776 <__sflush_r+0x32>
 80087e2:	682b      	ldr	r3, [r5, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d0c6      	beq.n	8008776 <__sflush_r+0x32>
 80087e8:	2b1d      	cmp	r3, #29
 80087ea:	d001      	beq.n	80087f0 <__sflush_r+0xac>
 80087ec:	2b16      	cmp	r3, #22
 80087ee:	d11e      	bne.n	800882e <__sflush_r+0xea>
 80087f0:	602f      	str	r7, [r5, #0]
 80087f2:	2000      	movs	r0, #0
 80087f4:	e022      	b.n	800883c <__sflush_r+0xf8>
 80087f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087fa:	b21b      	sxth	r3, r3
 80087fc:	e01b      	b.n	8008836 <__sflush_r+0xf2>
 80087fe:	690f      	ldr	r7, [r1, #16]
 8008800:	2f00      	cmp	r7, #0
 8008802:	d0f6      	beq.n	80087f2 <__sflush_r+0xae>
 8008804:	0793      	lsls	r3, r2, #30
 8008806:	680e      	ldr	r6, [r1, #0]
 8008808:	bf08      	it	eq
 800880a:	694b      	ldreq	r3, [r1, #20]
 800880c:	600f      	str	r7, [r1, #0]
 800880e:	bf18      	it	ne
 8008810:	2300      	movne	r3, #0
 8008812:	eba6 0807 	sub.w	r8, r6, r7
 8008816:	608b      	str	r3, [r1, #8]
 8008818:	f1b8 0f00 	cmp.w	r8, #0
 800881c:	dde9      	ble.n	80087f2 <__sflush_r+0xae>
 800881e:	6a21      	ldr	r1, [r4, #32]
 8008820:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008822:	4643      	mov	r3, r8
 8008824:	463a      	mov	r2, r7
 8008826:	4628      	mov	r0, r5
 8008828:	47b0      	blx	r6
 800882a:	2800      	cmp	r0, #0
 800882c:	dc08      	bgt.n	8008840 <__sflush_r+0xfc>
 800882e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008832:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008836:	81a3      	strh	r3, [r4, #12]
 8008838:	f04f 30ff 	mov.w	r0, #4294967295
 800883c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008840:	4407      	add	r7, r0
 8008842:	eba8 0800 	sub.w	r8, r8, r0
 8008846:	e7e7      	b.n	8008818 <__sflush_r+0xd4>
 8008848:	dfbffffe 	.word	0xdfbffffe

0800884c <_fflush_r>:
 800884c:	b538      	push	{r3, r4, r5, lr}
 800884e:	690b      	ldr	r3, [r1, #16]
 8008850:	4605      	mov	r5, r0
 8008852:	460c      	mov	r4, r1
 8008854:	b913      	cbnz	r3, 800885c <_fflush_r+0x10>
 8008856:	2500      	movs	r5, #0
 8008858:	4628      	mov	r0, r5
 800885a:	bd38      	pop	{r3, r4, r5, pc}
 800885c:	b118      	cbz	r0, 8008866 <_fflush_r+0x1a>
 800885e:	6a03      	ldr	r3, [r0, #32]
 8008860:	b90b      	cbnz	r3, 8008866 <_fflush_r+0x1a>
 8008862:	f7fe fa19 	bl	8006c98 <__sinit>
 8008866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d0f3      	beq.n	8008856 <_fflush_r+0xa>
 800886e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008870:	07d0      	lsls	r0, r2, #31
 8008872:	d404      	bmi.n	800887e <_fflush_r+0x32>
 8008874:	0599      	lsls	r1, r3, #22
 8008876:	d402      	bmi.n	800887e <_fflush_r+0x32>
 8008878:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800887a:	f7fe fb38 	bl	8006eee <__retarget_lock_acquire_recursive>
 800887e:	4628      	mov	r0, r5
 8008880:	4621      	mov	r1, r4
 8008882:	f7ff ff5f 	bl	8008744 <__sflush_r>
 8008886:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008888:	07da      	lsls	r2, r3, #31
 800888a:	4605      	mov	r5, r0
 800888c:	d4e4      	bmi.n	8008858 <_fflush_r+0xc>
 800888e:	89a3      	ldrh	r3, [r4, #12]
 8008890:	059b      	lsls	r3, r3, #22
 8008892:	d4e1      	bmi.n	8008858 <_fflush_r+0xc>
 8008894:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008896:	f7fe fb2b 	bl	8006ef0 <__retarget_lock_release_recursive>
 800889a:	e7dd      	b.n	8008858 <_fflush_r+0xc>

0800889c <memmove>:
 800889c:	4288      	cmp	r0, r1
 800889e:	b510      	push	{r4, lr}
 80088a0:	eb01 0402 	add.w	r4, r1, r2
 80088a4:	d902      	bls.n	80088ac <memmove+0x10>
 80088a6:	4284      	cmp	r4, r0
 80088a8:	4623      	mov	r3, r4
 80088aa:	d807      	bhi.n	80088bc <memmove+0x20>
 80088ac:	1e43      	subs	r3, r0, #1
 80088ae:	42a1      	cmp	r1, r4
 80088b0:	d008      	beq.n	80088c4 <memmove+0x28>
 80088b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088ba:	e7f8      	b.n	80088ae <memmove+0x12>
 80088bc:	4402      	add	r2, r0
 80088be:	4601      	mov	r1, r0
 80088c0:	428a      	cmp	r2, r1
 80088c2:	d100      	bne.n	80088c6 <memmove+0x2a>
 80088c4:	bd10      	pop	{r4, pc}
 80088c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088ce:	e7f7      	b.n	80088c0 <memmove+0x24>

080088d0 <_sbrk_r>:
 80088d0:	b538      	push	{r3, r4, r5, lr}
 80088d2:	4d06      	ldr	r5, [pc, #24]	@ (80088ec <_sbrk_r+0x1c>)
 80088d4:	2300      	movs	r3, #0
 80088d6:	4604      	mov	r4, r0
 80088d8:	4608      	mov	r0, r1
 80088da:	602b      	str	r3, [r5, #0]
 80088dc:	f7f8 ff74 	bl	80017c8 <_sbrk>
 80088e0:	1c43      	adds	r3, r0, #1
 80088e2:	d102      	bne.n	80088ea <_sbrk_r+0x1a>
 80088e4:	682b      	ldr	r3, [r5, #0]
 80088e6:	b103      	cbz	r3, 80088ea <_sbrk_r+0x1a>
 80088e8:	6023      	str	r3, [r4, #0]
 80088ea:	bd38      	pop	{r3, r4, r5, pc}
 80088ec:	200008e0 	.word	0x200008e0

080088f0 <memcpy>:
 80088f0:	440a      	add	r2, r1
 80088f2:	4291      	cmp	r1, r2
 80088f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80088f8:	d100      	bne.n	80088fc <memcpy+0xc>
 80088fa:	4770      	bx	lr
 80088fc:	b510      	push	{r4, lr}
 80088fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008902:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008906:	4291      	cmp	r1, r2
 8008908:	d1f9      	bne.n	80088fe <memcpy+0xe>
 800890a:	bd10      	pop	{r4, pc}

0800890c <__assert_func>:
 800890c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800890e:	4614      	mov	r4, r2
 8008910:	461a      	mov	r2, r3
 8008912:	4b09      	ldr	r3, [pc, #36]	@ (8008938 <__assert_func+0x2c>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4605      	mov	r5, r0
 8008918:	68d8      	ldr	r0, [r3, #12]
 800891a:	b954      	cbnz	r4, 8008932 <__assert_func+0x26>
 800891c:	4b07      	ldr	r3, [pc, #28]	@ (800893c <__assert_func+0x30>)
 800891e:	461c      	mov	r4, r3
 8008920:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008924:	9100      	str	r1, [sp, #0]
 8008926:	462b      	mov	r3, r5
 8008928:	4905      	ldr	r1, [pc, #20]	@ (8008940 <__assert_func+0x34>)
 800892a:	f000 f86f 	bl	8008a0c <fiprintf>
 800892e:	f000 f87f 	bl	8008a30 <abort>
 8008932:	4b04      	ldr	r3, [pc, #16]	@ (8008944 <__assert_func+0x38>)
 8008934:	e7f4      	b.n	8008920 <__assert_func+0x14>
 8008936:	bf00      	nop
 8008938:	20000418 	.word	0x20000418
 800893c:	08009d6e 	.word	0x08009d6e
 8008940:	08009d40 	.word	0x08009d40
 8008944:	08009d33 	.word	0x08009d33

08008948 <_calloc_r>:
 8008948:	b570      	push	{r4, r5, r6, lr}
 800894a:	fba1 5402 	umull	r5, r4, r1, r2
 800894e:	b93c      	cbnz	r4, 8008960 <_calloc_r+0x18>
 8008950:	4629      	mov	r1, r5
 8008952:	f7ff f991 	bl	8007c78 <_malloc_r>
 8008956:	4606      	mov	r6, r0
 8008958:	b928      	cbnz	r0, 8008966 <_calloc_r+0x1e>
 800895a:	2600      	movs	r6, #0
 800895c:	4630      	mov	r0, r6
 800895e:	bd70      	pop	{r4, r5, r6, pc}
 8008960:	220c      	movs	r2, #12
 8008962:	6002      	str	r2, [r0, #0]
 8008964:	e7f9      	b.n	800895a <_calloc_r+0x12>
 8008966:	462a      	mov	r2, r5
 8008968:	4621      	mov	r1, r4
 800896a:	f7fe fa42 	bl	8006df2 <memset>
 800896e:	e7f5      	b.n	800895c <_calloc_r+0x14>

08008970 <__ascii_mbtowc>:
 8008970:	b082      	sub	sp, #8
 8008972:	b901      	cbnz	r1, 8008976 <__ascii_mbtowc+0x6>
 8008974:	a901      	add	r1, sp, #4
 8008976:	b142      	cbz	r2, 800898a <__ascii_mbtowc+0x1a>
 8008978:	b14b      	cbz	r3, 800898e <__ascii_mbtowc+0x1e>
 800897a:	7813      	ldrb	r3, [r2, #0]
 800897c:	600b      	str	r3, [r1, #0]
 800897e:	7812      	ldrb	r2, [r2, #0]
 8008980:	1e10      	subs	r0, r2, #0
 8008982:	bf18      	it	ne
 8008984:	2001      	movne	r0, #1
 8008986:	b002      	add	sp, #8
 8008988:	4770      	bx	lr
 800898a:	4610      	mov	r0, r2
 800898c:	e7fb      	b.n	8008986 <__ascii_mbtowc+0x16>
 800898e:	f06f 0001 	mvn.w	r0, #1
 8008992:	e7f8      	b.n	8008986 <__ascii_mbtowc+0x16>

08008994 <_realloc_r>:
 8008994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008998:	4680      	mov	r8, r0
 800899a:	4615      	mov	r5, r2
 800899c:	460c      	mov	r4, r1
 800899e:	b921      	cbnz	r1, 80089aa <_realloc_r+0x16>
 80089a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089a4:	4611      	mov	r1, r2
 80089a6:	f7ff b967 	b.w	8007c78 <_malloc_r>
 80089aa:	b92a      	cbnz	r2, 80089b8 <_realloc_r+0x24>
 80089ac:	f7ff f8f0 	bl	8007b90 <_free_r>
 80089b0:	2400      	movs	r4, #0
 80089b2:	4620      	mov	r0, r4
 80089b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089b8:	f000 f841 	bl	8008a3e <_malloc_usable_size_r>
 80089bc:	4285      	cmp	r5, r0
 80089be:	4606      	mov	r6, r0
 80089c0:	d802      	bhi.n	80089c8 <_realloc_r+0x34>
 80089c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80089c6:	d8f4      	bhi.n	80089b2 <_realloc_r+0x1e>
 80089c8:	4629      	mov	r1, r5
 80089ca:	4640      	mov	r0, r8
 80089cc:	f7ff f954 	bl	8007c78 <_malloc_r>
 80089d0:	4607      	mov	r7, r0
 80089d2:	2800      	cmp	r0, #0
 80089d4:	d0ec      	beq.n	80089b0 <_realloc_r+0x1c>
 80089d6:	42b5      	cmp	r5, r6
 80089d8:	462a      	mov	r2, r5
 80089da:	4621      	mov	r1, r4
 80089dc:	bf28      	it	cs
 80089de:	4632      	movcs	r2, r6
 80089e0:	f7ff ff86 	bl	80088f0 <memcpy>
 80089e4:	4621      	mov	r1, r4
 80089e6:	4640      	mov	r0, r8
 80089e8:	f7ff f8d2 	bl	8007b90 <_free_r>
 80089ec:	463c      	mov	r4, r7
 80089ee:	e7e0      	b.n	80089b2 <_realloc_r+0x1e>

080089f0 <__ascii_wctomb>:
 80089f0:	4603      	mov	r3, r0
 80089f2:	4608      	mov	r0, r1
 80089f4:	b141      	cbz	r1, 8008a08 <__ascii_wctomb+0x18>
 80089f6:	2aff      	cmp	r2, #255	@ 0xff
 80089f8:	d904      	bls.n	8008a04 <__ascii_wctomb+0x14>
 80089fa:	228a      	movs	r2, #138	@ 0x8a
 80089fc:	601a      	str	r2, [r3, #0]
 80089fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008a02:	4770      	bx	lr
 8008a04:	700a      	strb	r2, [r1, #0]
 8008a06:	2001      	movs	r0, #1
 8008a08:	4770      	bx	lr
	...

08008a0c <fiprintf>:
 8008a0c:	b40e      	push	{r1, r2, r3}
 8008a0e:	b503      	push	{r0, r1, lr}
 8008a10:	4601      	mov	r1, r0
 8008a12:	ab03      	add	r3, sp, #12
 8008a14:	4805      	ldr	r0, [pc, #20]	@ (8008a2c <fiprintf+0x20>)
 8008a16:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a1a:	6800      	ldr	r0, [r0, #0]
 8008a1c:	9301      	str	r3, [sp, #4]
 8008a1e:	f000 f83f 	bl	8008aa0 <_vfiprintf_r>
 8008a22:	b002      	add	sp, #8
 8008a24:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a28:	b003      	add	sp, #12
 8008a2a:	4770      	bx	lr
 8008a2c:	20000418 	.word	0x20000418

08008a30 <abort>:
 8008a30:	b508      	push	{r3, lr}
 8008a32:	2006      	movs	r0, #6
 8008a34:	f000 fa08 	bl	8008e48 <raise>
 8008a38:	2001      	movs	r0, #1
 8008a3a:	f7f8 fe4d 	bl	80016d8 <_exit>

08008a3e <_malloc_usable_size_r>:
 8008a3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a42:	1f18      	subs	r0, r3, #4
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	bfbc      	itt	lt
 8008a48:	580b      	ldrlt	r3, [r1, r0]
 8008a4a:	18c0      	addlt	r0, r0, r3
 8008a4c:	4770      	bx	lr

08008a4e <__sfputc_r>:
 8008a4e:	6893      	ldr	r3, [r2, #8]
 8008a50:	3b01      	subs	r3, #1
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	b410      	push	{r4}
 8008a56:	6093      	str	r3, [r2, #8]
 8008a58:	da08      	bge.n	8008a6c <__sfputc_r+0x1e>
 8008a5a:	6994      	ldr	r4, [r2, #24]
 8008a5c:	42a3      	cmp	r3, r4
 8008a5e:	db01      	blt.n	8008a64 <__sfputc_r+0x16>
 8008a60:	290a      	cmp	r1, #10
 8008a62:	d103      	bne.n	8008a6c <__sfputc_r+0x1e>
 8008a64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a68:	f000 b932 	b.w	8008cd0 <__swbuf_r>
 8008a6c:	6813      	ldr	r3, [r2, #0]
 8008a6e:	1c58      	adds	r0, r3, #1
 8008a70:	6010      	str	r0, [r2, #0]
 8008a72:	7019      	strb	r1, [r3, #0]
 8008a74:	4608      	mov	r0, r1
 8008a76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <__sfputs_r>:
 8008a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7e:	4606      	mov	r6, r0
 8008a80:	460f      	mov	r7, r1
 8008a82:	4614      	mov	r4, r2
 8008a84:	18d5      	adds	r5, r2, r3
 8008a86:	42ac      	cmp	r4, r5
 8008a88:	d101      	bne.n	8008a8e <__sfputs_r+0x12>
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	e007      	b.n	8008a9e <__sfputs_r+0x22>
 8008a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a92:	463a      	mov	r2, r7
 8008a94:	4630      	mov	r0, r6
 8008a96:	f7ff ffda 	bl	8008a4e <__sfputc_r>
 8008a9a:	1c43      	adds	r3, r0, #1
 8008a9c:	d1f3      	bne.n	8008a86 <__sfputs_r+0xa>
 8008a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008aa0 <_vfiprintf_r>:
 8008aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa4:	460d      	mov	r5, r1
 8008aa6:	b09d      	sub	sp, #116	@ 0x74
 8008aa8:	4614      	mov	r4, r2
 8008aaa:	4698      	mov	r8, r3
 8008aac:	4606      	mov	r6, r0
 8008aae:	b118      	cbz	r0, 8008ab8 <_vfiprintf_r+0x18>
 8008ab0:	6a03      	ldr	r3, [r0, #32]
 8008ab2:	b90b      	cbnz	r3, 8008ab8 <_vfiprintf_r+0x18>
 8008ab4:	f7fe f8f0 	bl	8006c98 <__sinit>
 8008ab8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008aba:	07d9      	lsls	r1, r3, #31
 8008abc:	d405      	bmi.n	8008aca <_vfiprintf_r+0x2a>
 8008abe:	89ab      	ldrh	r3, [r5, #12]
 8008ac0:	059a      	lsls	r2, r3, #22
 8008ac2:	d402      	bmi.n	8008aca <_vfiprintf_r+0x2a>
 8008ac4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ac6:	f7fe fa12 	bl	8006eee <__retarget_lock_acquire_recursive>
 8008aca:	89ab      	ldrh	r3, [r5, #12]
 8008acc:	071b      	lsls	r3, r3, #28
 8008ace:	d501      	bpl.n	8008ad4 <_vfiprintf_r+0x34>
 8008ad0:	692b      	ldr	r3, [r5, #16]
 8008ad2:	b99b      	cbnz	r3, 8008afc <_vfiprintf_r+0x5c>
 8008ad4:	4629      	mov	r1, r5
 8008ad6:	4630      	mov	r0, r6
 8008ad8:	f000 f938 	bl	8008d4c <__swsetup_r>
 8008adc:	b170      	cbz	r0, 8008afc <_vfiprintf_r+0x5c>
 8008ade:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ae0:	07dc      	lsls	r4, r3, #31
 8008ae2:	d504      	bpl.n	8008aee <_vfiprintf_r+0x4e>
 8008ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae8:	b01d      	add	sp, #116	@ 0x74
 8008aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aee:	89ab      	ldrh	r3, [r5, #12]
 8008af0:	0598      	lsls	r0, r3, #22
 8008af2:	d4f7      	bmi.n	8008ae4 <_vfiprintf_r+0x44>
 8008af4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008af6:	f7fe f9fb 	bl	8006ef0 <__retarget_lock_release_recursive>
 8008afa:	e7f3      	b.n	8008ae4 <_vfiprintf_r+0x44>
 8008afc:	2300      	movs	r3, #0
 8008afe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b00:	2320      	movs	r3, #32
 8008b02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b06:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b0a:	2330      	movs	r3, #48	@ 0x30
 8008b0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008cbc <_vfiprintf_r+0x21c>
 8008b10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b14:	f04f 0901 	mov.w	r9, #1
 8008b18:	4623      	mov	r3, r4
 8008b1a:	469a      	mov	sl, r3
 8008b1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b20:	b10a      	cbz	r2, 8008b26 <_vfiprintf_r+0x86>
 8008b22:	2a25      	cmp	r2, #37	@ 0x25
 8008b24:	d1f9      	bne.n	8008b1a <_vfiprintf_r+0x7a>
 8008b26:	ebba 0b04 	subs.w	fp, sl, r4
 8008b2a:	d00b      	beq.n	8008b44 <_vfiprintf_r+0xa4>
 8008b2c:	465b      	mov	r3, fp
 8008b2e:	4622      	mov	r2, r4
 8008b30:	4629      	mov	r1, r5
 8008b32:	4630      	mov	r0, r6
 8008b34:	f7ff ffa2 	bl	8008a7c <__sfputs_r>
 8008b38:	3001      	adds	r0, #1
 8008b3a:	f000 80a7 	beq.w	8008c8c <_vfiprintf_r+0x1ec>
 8008b3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b40:	445a      	add	r2, fp
 8008b42:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b44:	f89a 3000 	ldrb.w	r3, [sl]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f000 809f 	beq.w	8008c8c <_vfiprintf_r+0x1ec>
 8008b4e:	2300      	movs	r3, #0
 8008b50:	f04f 32ff 	mov.w	r2, #4294967295
 8008b54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b58:	f10a 0a01 	add.w	sl, sl, #1
 8008b5c:	9304      	str	r3, [sp, #16]
 8008b5e:	9307      	str	r3, [sp, #28]
 8008b60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b64:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b66:	4654      	mov	r4, sl
 8008b68:	2205      	movs	r2, #5
 8008b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b6e:	4853      	ldr	r0, [pc, #332]	@ (8008cbc <_vfiprintf_r+0x21c>)
 8008b70:	f7f7 fb2e 	bl	80001d0 <memchr>
 8008b74:	9a04      	ldr	r2, [sp, #16]
 8008b76:	b9d8      	cbnz	r0, 8008bb0 <_vfiprintf_r+0x110>
 8008b78:	06d1      	lsls	r1, r2, #27
 8008b7a:	bf44      	itt	mi
 8008b7c:	2320      	movmi	r3, #32
 8008b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b82:	0713      	lsls	r3, r2, #28
 8008b84:	bf44      	itt	mi
 8008b86:	232b      	movmi	r3, #43	@ 0x2b
 8008b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b8c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b90:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b92:	d015      	beq.n	8008bc0 <_vfiprintf_r+0x120>
 8008b94:	9a07      	ldr	r2, [sp, #28]
 8008b96:	4654      	mov	r4, sl
 8008b98:	2000      	movs	r0, #0
 8008b9a:	f04f 0c0a 	mov.w	ip, #10
 8008b9e:	4621      	mov	r1, r4
 8008ba0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ba4:	3b30      	subs	r3, #48	@ 0x30
 8008ba6:	2b09      	cmp	r3, #9
 8008ba8:	d94b      	bls.n	8008c42 <_vfiprintf_r+0x1a2>
 8008baa:	b1b0      	cbz	r0, 8008bda <_vfiprintf_r+0x13a>
 8008bac:	9207      	str	r2, [sp, #28]
 8008bae:	e014      	b.n	8008bda <_vfiprintf_r+0x13a>
 8008bb0:	eba0 0308 	sub.w	r3, r0, r8
 8008bb4:	fa09 f303 	lsl.w	r3, r9, r3
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	9304      	str	r3, [sp, #16]
 8008bbc:	46a2      	mov	sl, r4
 8008bbe:	e7d2      	b.n	8008b66 <_vfiprintf_r+0xc6>
 8008bc0:	9b03      	ldr	r3, [sp, #12]
 8008bc2:	1d19      	adds	r1, r3, #4
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	9103      	str	r1, [sp, #12]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	bfbb      	ittet	lt
 8008bcc:	425b      	neglt	r3, r3
 8008bce:	f042 0202 	orrlt.w	r2, r2, #2
 8008bd2:	9307      	strge	r3, [sp, #28]
 8008bd4:	9307      	strlt	r3, [sp, #28]
 8008bd6:	bfb8      	it	lt
 8008bd8:	9204      	strlt	r2, [sp, #16]
 8008bda:	7823      	ldrb	r3, [r4, #0]
 8008bdc:	2b2e      	cmp	r3, #46	@ 0x2e
 8008bde:	d10a      	bne.n	8008bf6 <_vfiprintf_r+0x156>
 8008be0:	7863      	ldrb	r3, [r4, #1]
 8008be2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008be4:	d132      	bne.n	8008c4c <_vfiprintf_r+0x1ac>
 8008be6:	9b03      	ldr	r3, [sp, #12]
 8008be8:	1d1a      	adds	r2, r3, #4
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	9203      	str	r2, [sp, #12]
 8008bee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008bf2:	3402      	adds	r4, #2
 8008bf4:	9305      	str	r3, [sp, #20]
 8008bf6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008ccc <_vfiprintf_r+0x22c>
 8008bfa:	7821      	ldrb	r1, [r4, #0]
 8008bfc:	2203      	movs	r2, #3
 8008bfe:	4650      	mov	r0, sl
 8008c00:	f7f7 fae6 	bl	80001d0 <memchr>
 8008c04:	b138      	cbz	r0, 8008c16 <_vfiprintf_r+0x176>
 8008c06:	9b04      	ldr	r3, [sp, #16]
 8008c08:	eba0 000a 	sub.w	r0, r0, sl
 8008c0c:	2240      	movs	r2, #64	@ 0x40
 8008c0e:	4082      	lsls	r2, r0
 8008c10:	4313      	orrs	r3, r2
 8008c12:	3401      	adds	r4, #1
 8008c14:	9304      	str	r3, [sp, #16]
 8008c16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c1a:	4829      	ldr	r0, [pc, #164]	@ (8008cc0 <_vfiprintf_r+0x220>)
 8008c1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c20:	2206      	movs	r2, #6
 8008c22:	f7f7 fad5 	bl	80001d0 <memchr>
 8008c26:	2800      	cmp	r0, #0
 8008c28:	d03f      	beq.n	8008caa <_vfiprintf_r+0x20a>
 8008c2a:	4b26      	ldr	r3, [pc, #152]	@ (8008cc4 <_vfiprintf_r+0x224>)
 8008c2c:	bb1b      	cbnz	r3, 8008c76 <_vfiprintf_r+0x1d6>
 8008c2e:	9b03      	ldr	r3, [sp, #12]
 8008c30:	3307      	adds	r3, #7
 8008c32:	f023 0307 	bic.w	r3, r3, #7
 8008c36:	3308      	adds	r3, #8
 8008c38:	9303      	str	r3, [sp, #12]
 8008c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c3c:	443b      	add	r3, r7
 8008c3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c40:	e76a      	b.n	8008b18 <_vfiprintf_r+0x78>
 8008c42:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c46:	460c      	mov	r4, r1
 8008c48:	2001      	movs	r0, #1
 8008c4a:	e7a8      	b.n	8008b9e <_vfiprintf_r+0xfe>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	3401      	adds	r4, #1
 8008c50:	9305      	str	r3, [sp, #20]
 8008c52:	4619      	mov	r1, r3
 8008c54:	f04f 0c0a 	mov.w	ip, #10
 8008c58:	4620      	mov	r0, r4
 8008c5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c5e:	3a30      	subs	r2, #48	@ 0x30
 8008c60:	2a09      	cmp	r2, #9
 8008c62:	d903      	bls.n	8008c6c <_vfiprintf_r+0x1cc>
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d0c6      	beq.n	8008bf6 <_vfiprintf_r+0x156>
 8008c68:	9105      	str	r1, [sp, #20]
 8008c6a:	e7c4      	b.n	8008bf6 <_vfiprintf_r+0x156>
 8008c6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c70:	4604      	mov	r4, r0
 8008c72:	2301      	movs	r3, #1
 8008c74:	e7f0      	b.n	8008c58 <_vfiprintf_r+0x1b8>
 8008c76:	ab03      	add	r3, sp, #12
 8008c78:	9300      	str	r3, [sp, #0]
 8008c7a:	462a      	mov	r2, r5
 8008c7c:	4b12      	ldr	r3, [pc, #72]	@ (8008cc8 <_vfiprintf_r+0x228>)
 8008c7e:	a904      	add	r1, sp, #16
 8008c80:	4630      	mov	r0, r6
 8008c82:	f7fd fbc5 	bl	8006410 <_printf_float>
 8008c86:	4607      	mov	r7, r0
 8008c88:	1c78      	adds	r0, r7, #1
 8008c8a:	d1d6      	bne.n	8008c3a <_vfiprintf_r+0x19a>
 8008c8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c8e:	07d9      	lsls	r1, r3, #31
 8008c90:	d405      	bmi.n	8008c9e <_vfiprintf_r+0x1fe>
 8008c92:	89ab      	ldrh	r3, [r5, #12]
 8008c94:	059a      	lsls	r2, r3, #22
 8008c96:	d402      	bmi.n	8008c9e <_vfiprintf_r+0x1fe>
 8008c98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c9a:	f7fe f929 	bl	8006ef0 <__retarget_lock_release_recursive>
 8008c9e:	89ab      	ldrh	r3, [r5, #12]
 8008ca0:	065b      	lsls	r3, r3, #25
 8008ca2:	f53f af1f 	bmi.w	8008ae4 <_vfiprintf_r+0x44>
 8008ca6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ca8:	e71e      	b.n	8008ae8 <_vfiprintf_r+0x48>
 8008caa:	ab03      	add	r3, sp, #12
 8008cac:	9300      	str	r3, [sp, #0]
 8008cae:	462a      	mov	r2, r5
 8008cb0:	4b05      	ldr	r3, [pc, #20]	@ (8008cc8 <_vfiprintf_r+0x228>)
 8008cb2:	a904      	add	r1, sp, #16
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	f7fd fe43 	bl	8006940 <_printf_i>
 8008cba:	e7e4      	b.n	8008c86 <_vfiprintf_r+0x1e6>
 8008cbc:	08009d18 	.word	0x08009d18
 8008cc0:	08009d22 	.word	0x08009d22
 8008cc4:	08006411 	.word	0x08006411
 8008cc8:	08008a7d 	.word	0x08008a7d
 8008ccc:	08009d1e 	.word	0x08009d1e

08008cd0 <__swbuf_r>:
 8008cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd2:	460e      	mov	r6, r1
 8008cd4:	4614      	mov	r4, r2
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	b118      	cbz	r0, 8008ce2 <__swbuf_r+0x12>
 8008cda:	6a03      	ldr	r3, [r0, #32]
 8008cdc:	b90b      	cbnz	r3, 8008ce2 <__swbuf_r+0x12>
 8008cde:	f7fd ffdb 	bl	8006c98 <__sinit>
 8008ce2:	69a3      	ldr	r3, [r4, #24]
 8008ce4:	60a3      	str	r3, [r4, #8]
 8008ce6:	89a3      	ldrh	r3, [r4, #12]
 8008ce8:	071a      	lsls	r2, r3, #28
 8008cea:	d501      	bpl.n	8008cf0 <__swbuf_r+0x20>
 8008cec:	6923      	ldr	r3, [r4, #16]
 8008cee:	b943      	cbnz	r3, 8008d02 <__swbuf_r+0x32>
 8008cf0:	4621      	mov	r1, r4
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	f000 f82a 	bl	8008d4c <__swsetup_r>
 8008cf8:	b118      	cbz	r0, 8008d02 <__swbuf_r+0x32>
 8008cfa:	f04f 37ff 	mov.w	r7, #4294967295
 8008cfe:	4638      	mov	r0, r7
 8008d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d02:	6823      	ldr	r3, [r4, #0]
 8008d04:	6922      	ldr	r2, [r4, #16]
 8008d06:	1a98      	subs	r0, r3, r2
 8008d08:	6963      	ldr	r3, [r4, #20]
 8008d0a:	b2f6      	uxtb	r6, r6
 8008d0c:	4283      	cmp	r3, r0
 8008d0e:	4637      	mov	r7, r6
 8008d10:	dc05      	bgt.n	8008d1e <__swbuf_r+0x4e>
 8008d12:	4621      	mov	r1, r4
 8008d14:	4628      	mov	r0, r5
 8008d16:	f7ff fd99 	bl	800884c <_fflush_r>
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	d1ed      	bne.n	8008cfa <__swbuf_r+0x2a>
 8008d1e:	68a3      	ldr	r3, [r4, #8]
 8008d20:	3b01      	subs	r3, #1
 8008d22:	60a3      	str	r3, [r4, #8]
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	1c5a      	adds	r2, r3, #1
 8008d28:	6022      	str	r2, [r4, #0]
 8008d2a:	701e      	strb	r6, [r3, #0]
 8008d2c:	6962      	ldr	r2, [r4, #20]
 8008d2e:	1c43      	adds	r3, r0, #1
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d004      	beq.n	8008d3e <__swbuf_r+0x6e>
 8008d34:	89a3      	ldrh	r3, [r4, #12]
 8008d36:	07db      	lsls	r3, r3, #31
 8008d38:	d5e1      	bpl.n	8008cfe <__swbuf_r+0x2e>
 8008d3a:	2e0a      	cmp	r6, #10
 8008d3c:	d1df      	bne.n	8008cfe <__swbuf_r+0x2e>
 8008d3e:	4621      	mov	r1, r4
 8008d40:	4628      	mov	r0, r5
 8008d42:	f7ff fd83 	bl	800884c <_fflush_r>
 8008d46:	2800      	cmp	r0, #0
 8008d48:	d0d9      	beq.n	8008cfe <__swbuf_r+0x2e>
 8008d4a:	e7d6      	b.n	8008cfa <__swbuf_r+0x2a>

08008d4c <__swsetup_r>:
 8008d4c:	b538      	push	{r3, r4, r5, lr}
 8008d4e:	4b29      	ldr	r3, [pc, #164]	@ (8008df4 <__swsetup_r+0xa8>)
 8008d50:	4605      	mov	r5, r0
 8008d52:	6818      	ldr	r0, [r3, #0]
 8008d54:	460c      	mov	r4, r1
 8008d56:	b118      	cbz	r0, 8008d60 <__swsetup_r+0x14>
 8008d58:	6a03      	ldr	r3, [r0, #32]
 8008d5a:	b90b      	cbnz	r3, 8008d60 <__swsetup_r+0x14>
 8008d5c:	f7fd ff9c 	bl	8006c98 <__sinit>
 8008d60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d64:	0719      	lsls	r1, r3, #28
 8008d66:	d422      	bmi.n	8008dae <__swsetup_r+0x62>
 8008d68:	06da      	lsls	r2, r3, #27
 8008d6a:	d407      	bmi.n	8008d7c <__swsetup_r+0x30>
 8008d6c:	2209      	movs	r2, #9
 8008d6e:	602a      	str	r2, [r5, #0]
 8008d70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d74:	81a3      	strh	r3, [r4, #12]
 8008d76:	f04f 30ff 	mov.w	r0, #4294967295
 8008d7a:	e033      	b.n	8008de4 <__swsetup_r+0x98>
 8008d7c:	0758      	lsls	r0, r3, #29
 8008d7e:	d512      	bpl.n	8008da6 <__swsetup_r+0x5a>
 8008d80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d82:	b141      	cbz	r1, 8008d96 <__swsetup_r+0x4a>
 8008d84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d88:	4299      	cmp	r1, r3
 8008d8a:	d002      	beq.n	8008d92 <__swsetup_r+0x46>
 8008d8c:	4628      	mov	r0, r5
 8008d8e:	f7fe feff 	bl	8007b90 <_free_r>
 8008d92:	2300      	movs	r3, #0
 8008d94:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d96:	89a3      	ldrh	r3, [r4, #12]
 8008d98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008d9c:	81a3      	strh	r3, [r4, #12]
 8008d9e:	2300      	movs	r3, #0
 8008da0:	6063      	str	r3, [r4, #4]
 8008da2:	6923      	ldr	r3, [r4, #16]
 8008da4:	6023      	str	r3, [r4, #0]
 8008da6:	89a3      	ldrh	r3, [r4, #12]
 8008da8:	f043 0308 	orr.w	r3, r3, #8
 8008dac:	81a3      	strh	r3, [r4, #12]
 8008dae:	6923      	ldr	r3, [r4, #16]
 8008db0:	b94b      	cbnz	r3, 8008dc6 <__swsetup_r+0x7a>
 8008db2:	89a3      	ldrh	r3, [r4, #12]
 8008db4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008db8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dbc:	d003      	beq.n	8008dc6 <__swsetup_r+0x7a>
 8008dbe:	4621      	mov	r1, r4
 8008dc0:	4628      	mov	r0, r5
 8008dc2:	f000 f883 	bl	8008ecc <__smakebuf_r>
 8008dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dca:	f013 0201 	ands.w	r2, r3, #1
 8008dce:	d00a      	beq.n	8008de6 <__swsetup_r+0x9a>
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	60a2      	str	r2, [r4, #8]
 8008dd4:	6962      	ldr	r2, [r4, #20]
 8008dd6:	4252      	negs	r2, r2
 8008dd8:	61a2      	str	r2, [r4, #24]
 8008dda:	6922      	ldr	r2, [r4, #16]
 8008ddc:	b942      	cbnz	r2, 8008df0 <__swsetup_r+0xa4>
 8008dde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008de2:	d1c5      	bne.n	8008d70 <__swsetup_r+0x24>
 8008de4:	bd38      	pop	{r3, r4, r5, pc}
 8008de6:	0799      	lsls	r1, r3, #30
 8008de8:	bf58      	it	pl
 8008dea:	6962      	ldrpl	r2, [r4, #20]
 8008dec:	60a2      	str	r2, [r4, #8]
 8008dee:	e7f4      	b.n	8008dda <__swsetup_r+0x8e>
 8008df0:	2000      	movs	r0, #0
 8008df2:	e7f7      	b.n	8008de4 <__swsetup_r+0x98>
 8008df4:	20000418 	.word	0x20000418

08008df8 <_raise_r>:
 8008df8:	291f      	cmp	r1, #31
 8008dfa:	b538      	push	{r3, r4, r5, lr}
 8008dfc:	4605      	mov	r5, r0
 8008dfe:	460c      	mov	r4, r1
 8008e00:	d904      	bls.n	8008e0c <_raise_r+0x14>
 8008e02:	2316      	movs	r3, #22
 8008e04:	6003      	str	r3, [r0, #0]
 8008e06:	f04f 30ff 	mov.w	r0, #4294967295
 8008e0a:	bd38      	pop	{r3, r4, r5, pc}
 8008e0c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008e0e:	b112      	cbz	r2, 8008e16 <_raise_r+0x1e>
 8008e10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e14:	b94b      	cbnz	r3, 8008e2a <_raise_r+0x32>
 8008e16:	4628      	mov	r0, r5
 8008e18:	f000 f830 	bl	8008e7c <_getpid_r>
 8008e1c:	4622      	mov	r2, r4
 8008e1e:	4601      	mov	r1, r0
 8008e20:	4628      	mov	r0, r5
 8008e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e26:	f000 b817 	b.w	8008e58 <_kill_r>
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d00a      	beq.n	8008e44 <_raise_r+0x4c>
 8008e2e:	1c59      	adds	r1, r3, #1
 8008e30:	d103      	bne.n	8008e3a <_raise_r+0x42>
 8008e32:	2316      	movs	r3, #22
 8008e34:	6003      	str	r3, [r0, #0]
 8008e36:	2001      	movs	r0, #1
 8008e38:	e7e7      	b.n	8008e0a <_raise_r+0x12>
 8008e3a:	2100      	movs	r1, #0
 8008e3c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008e40:	4620      	mov	r0, r4
 8008e42:	4798      	blx	r3
 8008e44:	2000      	movs	r0, #0
 8008e46:	e7e0      	b.n	8008e0a <_raise_r+0x12>

08008e48 <raise>:
 8008e48:	4b02      	ldr	r3, [pc, #8]	@ (8008e54 <raise+0xc>)
 8008e4a:	4601      	mov	r1, r0
 8008e4c:	6818      	ldr	r0, [r3, #0]
 8008e4e:	f7ff bfd3 	b.w	8008df8 <_raise_r>
 8008e52:	bf00      	nop
 8008e54:	20000418 	.word	0x20000418

08008e58 <_kill_r>:
 8008e58:	b538      	push	{r3, r4, r5, lr}
 8008e5a:	4d07      	ldr	r5, [pc, #28]	@ (8008e78 <_kill_r+0x20>)
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	4604      	mov	r4, r0
 8008e60:	4608      	mov	r0, r1
 8008e62:	4611      	mov	r1, r2
 8008e64:	602b      	str	r3, [r5, #0]
 8008e66:	f7f8 fc27 	bl	80016b8 <_kill>
 8008e6a:	1c43      	adds	r3, r0, #1
 8008e6c:	d102      	bne.n	8008e74 <_kill_r+0x1c>
 8008e6e:	682b      	ldr	r3, [r5, #0]
 8008e70:	b103      	cbz	r3, 8008e74 <_kill_r+0x1c>
 8008e72:	6023      	str	r3, [r4, #0]
 8008e74:	bd38      	pop	{r3, r4, r5, pc}
 8008e76:	bf00      	nop
 8008e78:	200008e0 	.word	0x200008e0

08008e7c <_getpid_r>:
 8008e7c:	f7f8 bc14 	b.w	80016a8 <_getpid>

08008e80 <__swhatbuf_r>:
 8008e80:	b570      	push	{r4, r5, r6, lr}
 8008e82:	460c      	mov	r4, r1
 8008e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e88:	2900      	cmp	r1, #0
 8008e8a:	b096      	sub	sp, #88	@ 0x58
 8008e8c:	4615      	mov	r5, r2
 8008e8e:	461e      	mov	r6, r3
 8008e90:	da0d      	bge.n	8008eae <__swhatbuf_r+0x2e>
 8008e92:	89a3      	ldrh	r3, [r4, #12]
 8008e94:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e98:	f04f 0100 	mov.w	r1, #0
 8008e9c:	bf14      	ite	ne
 8008e9e:	2340      	movne	r3, #64	@ 0x40
 8008ea0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	6031      	str	r1, [r6, #0]
 8008ea8:	602b      	str	r3, [r5, #0]
 8008eaa:	b016      	add	sp, #88	@ 0x58
 8008eac:	bd70      	pop	{r4, r5, r6, pc}
 8008eae:	466a      	mov	r2, sp
 8008eb0:	f000 f848 	bl	8008f44 <_fstat_r>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	dbec      	blt.n	8008e92 <__swhatbuf_r+0x12>
 8008eb8:	9901      	ldr	r1, [sp, #4]
 8008eba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008ebe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008ec2:	4259      	negs	r1, r3
 8008ec4:	4159      	adcs	r1, r3
 8008ec6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008eca:	e7eb      	b.n	8008ea4 <__swhatbuf_r+0x24>

08008ecc <__smakebuf_r>:
 8008ecc:	898b      	ldrh	r3, [r1, #12]
 8008ece:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ed0:	079d      	lsls	r5, r3, #30
 8008ed2:	4606      	mov	r6, r0
 8008ed4:	460c      	mov	r4, r1
 8008ed6:	d507      	bpl.n	8008ee8 <__smakebuf_r+0x1c>
 8008ed8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008edc:	6023      	str	r3, [r4, #0]
 8008ede:	6123      	str	r3, [r4, #16]
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	6163      	str	r3, [r4, #20]
 8008ee4:	b003      	add	sp, #12
 8008ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ee8:	ab01      	add	r3, sp, #4
 8008eea:	466a      	mov	r2, sp
 8008eec:	f7ff ffc8 	bl	8008e80 <__swhatbuf_r>
 8008ef0:	9f00      	ldr	r7, [sp, #0]
 8008ef2:	4605      	mov	r5, r0
 8008ef4:	4639      	mov	r1, r7
 8008ef6:	4630      	mov	r0, r6
 8008ef8:	f7fe febe 	bl	8007c78 <_malloc_r>
 8008efc:	b948      	cbnz	r0, 8008f12 <__smakebuf_r+0x46>
 8008efe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f02:	059a      	lsls	r2, r3, #22
 8008f04:	d4ee      	bmi.n	8008ee4 <__smakebuf_r+0x18>
 8008f06:	f023 0303 	bic.w	r3, r3, #3
 8008f0a:	f043 0302 	orr.w	r3, r3, #2
 8008f0e:	81a3      	strh	r3, [r4, #12]
 8008f10:	e7e2      	b.n	8008ed8 <__smakebuf_r+0xc>
 8008f12:	89a3      	ldrh	r3, [r4, #12]
 8008f14:	6020      	str	r0, [r4, #0]
 8008f16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f1a:	81a3      	strh	r3, [r4, #12]
 8008f1c:	9b01      	ldr	r3, [sp, #4]
 8008f1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008f22:	b15b      	cbz	r3, 8008f3c <__smakebuf_r+0x70>
 8008f24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f28:	4630      	mov	r0, r6
 8008f2a:	f000 f81d 	bl	8008f68 <_isatty_r>
 8008f2e:	b128      	cbz	r0, 8008f3c <__smakebuf_r+0x70>
 8008f30:	89a3      	ldrh	r3, [r4, #12]
 8008f32:	f023 0303 	bic.w	r3, r3, #3
 8008f36:	f043 0301 	orr.w	r3, r3, #1
 8008f3a:	81a3      	strh	r3, [r4, #12]
 8008f3c:	89a3      	ldrh	r3, [r4, #12]
 8008f3e:	431d      	orrs	r5, r3
 8008f40:	81a5      	strh	r5, [r4, #12]
 8008f42:	e7cf      	b.n	8008ee4 <__smakebuf_r+0x18>

08008f44 <_fstat_r>:
 8008f44:	b538      	push	{r3, r4, r5, lr}
 8008f46:	4d07      	ldr	r5, [pc, #28]	@ (8008f64 <_fstat_r+0x20>)
 8008f48:	2300      	movs	r3, #0
 8008f4a:	4604      	mov	r4, r0
 8008f4c:	4608      	mov	r0, r1
 8008f4e:	4611      	mov	r1, r2
 8008f50:	602b      	str	r3, [r5, #0]
 8008f52:	f7f8 fc11 	bl	8001778 <_fstat>
 8008f56:	1c43      	adds	r3, r0, #1
 8008f58:	d102      	bne.n	8008f60 <_fstat_r+0x1c>
 8008f5a:	682b      	ldr	r3, [r5, #0]
 8008f5c:	b103      	cbz	r3, 8008f60 <_fstat_r+0x1c>
 8008f5e:	6023      	str	r3, [r4, #0]
 8008f60:	bd38      	pop	{r3, r4, r5, pc}
 8008f62:	bf00      	nop
 8008f64:	200008e0 	.word	0x200008e0

08008f68 <_isatty_r>:
 8008f68:	b538      	push	{r3, r4, r5, lr}
 8008f6a:	4d06      	ldr	r5, [pc, #24]	@ (8008f84 <_isatty_r+0x1c>)
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	4604      	mov	r4, r0
 8008f70:	4608      	mov	r0, r1
 8008f72:	602b      	str	r3, [r5, #0]
 8008f74:	f7f8 fc10 	bl	8001798 <_isatty>
 8008f78:	1c43      	adds	r3, r0, #1
 8008f7a:	d102      	bne.n	8008f82 <_isatty_r+0x1a>
 8008f7c:	682b      	ldr	r3, [r5, #0]
 8008f7e:	b103      	cbz	r3, 8008f82 <_isatty_r+0x1a>
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	bd38      	pop	{r3, r4, r5, pc}
 8008f84:	200008e0 	.word	0x200008e0

08008f88 <log10f>:
 8008f88:	b508      	push	{r3, lr}
 8008f8a:	ed2d 8b02 	vpush	{d8}
 8008f8e:	eeb0 8a40 	vmov.f32	s16, s0
 8008f92:	f000 f8b3 	bl	80090fc <__ieee754_log10f>
 8008f96:	eeb4 8a48 	vcmp.f32	s16, s16
 8008f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f9e:	d60f      	bvs.n	8008fc0 <log10f+0x38>
 8008fa0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa8:	d80a      	bhi.n	8008fc0 <log10f+0x38>
 8008faa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fb2:	d108      	bne.n	8008fc6 <log10f+0x3e>
 8008fb4:	f7fd ff70 	bl	8006e98 <__errno>
 8008fb8:	2322      	movs	r3, #34	@ 0x22
 8008fba:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8008fdc <log10f+0x54>
 8008fbe:	6003      	str	r3, [r0, #0]
 8008fc0:	ecbd 8b02 	vpop	{d8}
 8008fc4:	bd08      	pop	{r3, pc}
 8008fc6:	f7fd ff67 	bl	8006e98 <__errno>
 8008fca:	ecbd 8b02 	vpop	{d8}
 8008fce:	2321      	movs	r3, #33	@ 0x21
 8008fd0:	6003      	str	r3, [r0, #0]
 8008fd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008fd6:	4802      	ldr	r0, [pc, #8]	@ (8008fe0 <log10f+0x58>)
 8008fd8:	f000 b866 	b.w	80090a8 <nanf>
 8008fdc:	ff800000 	.word	0xff800000
 8008fe0:	08009d6e 	.word	0x08009d6e

08008fe4 <powf>:
 8008fe4:	b508      	push	{r3, lr}
 8008fe6:	ed2d 8b04 	vpush	{d8-d9}
 8008fea:	eeb0 8a60 	vmov.f32	s16, s1
 8008fee:	eeb0 9a40 	vmov.f32	s18, s0
 8008ff2:	f000 f8db 	bl	80091ac <__ieee754_powf>
 8008ff6:	eeb4 8a48 	vcmp.f32	s16, s16
 8008ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ffe:	eef0 8a40 	vmov.f32	s17, s0
 8009002:	d63e      	bvs.n	8009082 <powf+0x9e>
 8009004:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8009008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800900c:	d112      	bne.n	8009034 <powf+0x50>
 800900e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009016:	d039      	beq.n	800908c <powf+0xa8>
 8009018:	eeb0 0a48 	vmov.f32	s0, s16
 800901c:	f000 f839 	bl	8009092 <finitef>
 8009020:	b378      	cbz	r0, 8009082 <powf+0x9e>
 8009022:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800902a:	d52a      	bpl.n	8009082 <powf+0x9e>
 800902c:	f7fd ff34 	bl	8006e98 <__errno>
 8009030:	2322      	movs	r3, #34	@ 0x22
 8009032:	e014      	b.n	800905e <powf+0x7a>
 8009034:	f000 f82d 	bl	8009092 <finitef>
 8009038:	b998      	cbnz	r0, 8009062 <powf+0x7e>
 800903a:	eeb0 0a49 	vmov.f32	s0, s18
 800903e:	f000 f828 	bl	8009092 <finitef>
 8009042:	b170      	cbz	r0, 8009062 <powf+0x7e>
 8009044:	eeb0 0a48 	vmov.f32	s0, s16
 8009048:	f000 f823 	bl	8009092 <finitef>
 800904c:	b148      	cbz	r0, 8009062 <powf+0x7e>
 800904e:	eef4 8a68 	vcmp.f32	s17, s17
 8009052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009056:	d7e9      	bvc.n	800902c <powf+0x48>
 8009058:	f7fd ff1e 	bl	8006e98 <__errno>
 800905c:	2321      	movs	r3, #33	@ 0x21
 800905e:	6003      	str	r3, [r0, #0]
 8009060:	e00f      	b.n	8009082 <powf+0x9e>
 8009062:	eef5 8a40 	vcmp.f32	s17, #0.0
 8009066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800906a:	d10a      	bne.n	8009082 <powf+0x9e>
 800906c:	eeb0 0a49 	vmov.f32	s0, s18
 8009070:	f000 f80f 	bl	8009092 <finitef>
 8009074:	b128      	cbz	r0, 8009082 <powf+0x9e>
 8009076:	eeb0 0a48 	vmov.f32	s0, s16
 800907a:	f000 f80a 	bl	8009092 <finitef>
 800907e:	2800      	cmp	r0, #0
 8009080:	d1d4      	bne.n	800902c <powf+0x48>
 8009082:	eeb0 0a68 	vmov.f32	s0, s17
 8009086:	ecbd 8b04 	vpop	{d8-d9}
 800908a:	bd08      	pop	{r3, pc}
 800908c:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8009090:	e7f7      	b.n	8009082 <powf+0x9e>

08009092 <finitef>:
 8009092:	ee10 3a10 	vmov	r3, s0
 8009096:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800909a:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800909e:	bfac      	ite	ge
 80090a0:	2000      	movge	r0, #0
 80090a2:	2001      	movlt	r0, #1
 80090a4:	4770      	bx	lr
	...

080090a8 <nanf>:
 80090a8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80090b0 <nanf+0x8>
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	7fc00000 	.word	0x7fc00000

080090b4 <roundf>:
 80090b4:	ee10 0a10 	vmov	r0, s0
 80090b8:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80090bc:	3a7f      	subs	r2, #127	@ 0x7f
 80090be:	2a16      	cmp	r2, #22
 80090c0:	dc15      	bgt.n	80090ee <roundf+0x3a>
 80090c2:	2a00      	cmp	r2, #0
 80090c4:	da08      	bge.n	80090d8 <roundf+0x24>
 80090c6:	3201      	adds	r2, #1
 80090c8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80090cc:	d101      	bne.n	80090d2 <roundf+0x1e>
 80090ce:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 80090d2:	ee00 3a10 	vmov	s0, r3
 80090d6:	4770      	bx	lr
 80090d8:	4907      	ldr	r1, [pc, #28]	@ (80090f8 <roundf+0x44>)
 80090da:	4111      	asrs	r1, r2
 80090dc:	4201      	tst	r1, r0
 80090de:	d0fa      	beq.n	80090d6 <roundf+0x22>
 80090e0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80090e4:	4113      	asrs	r3, r2
 80090e6:	4403      	add	r3, r0
 80090e8:	ea23 0301 	bic.w	r3, r3, r1
 80090ec:	e7f1      	b.n	80090d2 <roundf+0x1e>
 80090ee:	2a80      	cmp	r2, #128	@ 0x80
 80090f0:	d1f1      	bne.n	80090d6 <roundf+0x22>
 80090f2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80090f6:	4770      	bx	lr
 80090f8:	007fffff 	.word	0x007fffff

080090fc <__ieee754_log10f>:
 80090fc:	b508      	push	{r3, lr}
 80090fe:	ee10 3a10 	vmov	r3, s0
 8009102:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009106:	ed2d 8b02 	vpush	{d8}
 800910a:	d108      	bne.n	800911e <__ieee754_log10f+0x22>
 800910c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8009194 <__ieee754_log10f+0x98>
 8009110:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8009198 <__ieee754_log10f+0x9c>
 8009114:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009118:	ecbd 8b02 	vpop	{d8}
 800911c:	bd08      	pop	{r3, pc}
 800911e:	2b00      	cmp	r3, #0
 8009120:	461a      	mov	r2, r3
 8009122:	da02      	bge.n	800912a <__ieee754_log10f+0x2e>
 8009124:	ee30 7a40 	vsub.f32	s14, s0, s0
 8009128:	e7f2      	b.n	8009110 <__ieee754_log10f+0x14>
 800912a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800912e:	db02      	blt.n	8009136 <__ieee754_log10f+0x3a>
 8009130:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009134:	e7f0      	b.n	8009118 <__ieee754_log10f+0x1c>
 8009136:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800913a:	bfbf      	itttt	lt
 800913c:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 800919c <__ieee754_log10f+0xa0>
 8009140:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8009144:	f06f 0118 	mvnlt.w	r1, #24
 8009148:	ee17 2a90 	vmovlt	r2, s15
 800914c:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8009150:	bfa8      	it	ge
 8009152:	2100      	movge	r1, #0
 8009154:	3b7f      	subs	r3, #127	@ 0x7f
 8009156:	440b      	add	r3, r1
 8009158:	0fd9      	lsrs	r1, r3, #31
 800915a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800915e:	ee07 3a90 	vmov	s15, r3
 8009162:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8009166:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 800916a:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800916e:	ee00 3a10 	vmov	s0, r3
 8009172:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8009176:	f000 fb81 	bl	800987c <__ieee754_logf>
 800917a:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80091a0 <__ieee754_log10f+0xa4>
 800917e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009182:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80091a4 <__ieee754_log10f+0xa8>
 8009186:	eea8 0a27 	vfma.f32	s0, s16, s15
 800918a:	eddf 7a07 	vldr	s15, [pc, #28]	@ 80091a8 <__ieee754_log10f+0xac>
 800918e:	eea8 0a27 	vfma.f32	s0, s16, s15
 8009192:	e7c1      	b.n	8009118 <__ieee754_log10f+0x1c>
 8009194:	cc000000 	.word	0xcc000000
 8009198:	00000000 	.word	0x00000000
 800919c:	4c000000 	.word	0x4c000000
 80091a0:	3ede5bd9 	.word	0x3ede5bd9
 80091a4:	355427db 	.word	0x355427db
 80091a8:	3e9a2080 	.word	0x3e9a2080

080091ac <__ieee754_powf>:
 80091ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091b0:	ee10 4a90 	vmov	r4, s1
 80091b4:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 80091b8:	ed2d 8b02 	vpush	{d8}
 80091bc:	ee10 6a10 	vmov	r6, s0
 80091c0:	eeb0 8a40 	vmov.f32	s16, s0
 80091c4:	eef0 8a60 	vmov.f32	s17, s1
 80091c8:	d10c      	bne.n	80091e4 <__ieee754_powf+0x38>
 80091ca:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 80091ce:	0076      	lsls	r6, r6, #1
 80091d0:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80091d4:	f240 829c 	bls.w	8009710 <__ieee754_powf+0x564>
 80091d8:	ee38 0a28 	vadd.f32	s0, s16, s17
 80091dc:	ecbd 8b02 	vpop	{d8}
 80091e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091e4:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80091e8:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80091ec:	d802      	bhi.n	80091f4 <__ieee754_powf+0x48>
 80091ee:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80091f2:	d908      	bls.n	8009206 <__ieee754_powf+0x5a>
 80091f4:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80091f8:	d1ee      	bne.n	80091d8 <__ieee754_powf+0x2c>
 80091fa:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80091fe:	0064      	lsls	r4, r4, #1
 8009200:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8009204:	e7e6      	b.n	80091d4 <__ieee754_powf+0x28>
 8009206:	2e00      	cmp	r6, #0
 8009208:	da1e      	bge.n	8009248 <__ieee754_powf+0x9c>
 800920a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800920e:	d22b      	bcs.n	8009268 <__ieee754_powf+0xbc>
 8009210:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8009214:	d332      	bcc.n	800927c <__ieee754_powf+0xd0>
 8009216:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800921a:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800921e:	fa49 f503 	asr.w	r5, r9, r3
 8009222:	fa05 f303 	lsl.w	r3, r5, r3
 8009226:	454b      	cmp	r3, r9
 8009228:	d126      	bne.n	8009278 <__ieee754_powf+0xcc>
 800922a:	f005 0501 	and.w	r5, r5, #1
 800922e:	f1c5 0502 	rsb	r5, r5, #2
 8009232:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8009236:	d122      	bne.n	800927e <__ieee754_powf+0xd2>
 8009238:	2c00      	cmp	r4, #0
 800923a:	f280 826f 	bge.w	800971c <__ieee754_powf+0x570>
 800923e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009242:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8009246:	e7c9      	b.n	80091dc <__ieee754_powf+0x30>
 8009248:	2500      	movs	r5, #0
 800924a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800924e:	d1f0      	bne.n	8009232 <__ieee754_powf+0x86>
 8009250:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8009254:	f000 825c 	beq.w	8009710 <__ieee754_powf+0x564>
 8009258:	d908      	bls.n	800926c <__ieee754_powf+0xc0>
 800925a:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 80095bc <__ieee754_powf+0x410>
 800925e:	2c00      	cmp	r4, #0
 8009260:	bfa8      	it	ge
 8009262:	eeb0 0a68 	vmovge.f32	s0, s17
 8009266:	e7b9      	b.n	80091dc <__ieee754_powf+0x30>
 8009268:	2502      	movs	r5, #2
 800926a:	e7ee      	b.n	800924a <__ieee754_powf+0x9e>
 800926c:	2c00      	cmp	r4, #0
 800926e:	f280 8252 	bge.w	8009716 <__ieee754_powf+0x56a>
 8009272:	eeb1 0a68 	vneg.f32	s0, s17
 8009276:	e7b1      	b.n	80091dc <__ieee754_powf+0x30>
 8009278:	2500      	movs	r5, #0
 800927a:	e7da      	b.n	8009232 <__ieee754_powf+0x86>
 800927c:	2500      	movs	r5, #0
 800927e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8009282:	d102      	bne.n	800928a <__ieee754_powf+0xde>
 8009284:	ee28 0a08 	vmul.f32	s0, s16, s16
 8009288:	e7a8      	b.n	80091dc <__ieee754_powf+0x30>
 800928a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800928e:	d109      	bne.n	80092a4 <__ieee754_powf+0xf8>
 8009290:	2e00      	cmp	r6, #0
 8009292:	db07      	blt.n	80092a4 <__ieee754_powf+0xf8>
 8009294:	eeb0 0a48 	vmov.f32	s0, s16
 8009298:	ecbd 8b02 	vpop	{d8}
 800929c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092a0:	f000 bae8 	b.w	8009874 <__ieee754_sqrtf>
 80092a4:	eeb0 0a48 	vmov.f32	s0, s16
 80092a8:	f000 fa50 	bl	800974c <fabsf>
 80092ac:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80092b0:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80092b4:	4647      	mov	r7, r8
 80092b6:	d002      	beq.n	80092be <__ieee754_powf+0x112>
 80092b8:	f1b8 0f00 	cmp.w	r8, #0
 80092bc:	d117      	bne.n	80092ee <__ieee754_powf+0x142>
 80092be:	2c00      	cmp	r4, #0
 80092c0:	bfbc      	itt	lt
 80092c2:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 80092c6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80092ca:	2e00      	cmp	r6, #0
 80092cc:	da86      	bge.n	80091dc <__ieee754_powf+0x30>
 80092ce:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80092d2:	ea58 0805 	orrs.w	r8, r8, r5
 80092d6:	d104      	bne.n	80092e2 <__ieee754_powf+0x136>
 80092d8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80092dc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80092e0:	e77c      	b.n	80091dc <__ieee754_powf+0x30>
 80092e2:	2d01      	cmp	r5, #1
 80092e4:	f47f af7a 	bne.w	80091dc <__ieee754_powf+0x30>
 80092e8:	eeb1 0a40 	vneg.f32	s0, s0
 80092ec:	e776      	b.n	80091dc <__ieee754_powf+0x30>
 80092ee:	0ff0      	lsrs	r0, r6, #31
 80092f0:	3801      	subs	r0, #1
 80092f2:	ea55 0300 	orrs.w	r3, r5, r0
 80092f6:	d104      	bne.n	8009302 <__ieee754_powf+0x156>
 80092f8:	ee38 8a48 	vsub.f32	s16, s16, s16
 80092fc:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8009300:	e76c      	b.n	80091dc <__ieee754_powf+0x30>
 8009302:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8009306:	d973      	bls.n	80093f0 <__ieee754_powf+0x244>
 8009308:	4bad      	ldr	r3, [pc, #692]	@ (80095c0 <__ieee754_powf+0x414>)
 800930a:	4598      	cmp	r8, r3
 800930c:	d808      	bhi.n	8009320 <__ieee754_powf+0x174>
 800930e:	2c00      	cmp	r4, #0
 8009310:	da0b      	bge.n	800932a <__ieee754_powf+0x17e>
 8009312:	2000      	movs	r0, #0
 8009314:	ecbd 8b02 	vpop	{d8}
 8009318:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800931c:	f000 baa4 	b.w	8009868 <__math_oflowf>
 8009320:	4ba8      	ldr	r3, [pc, #672]	@ (80095c4 <__ieee754_powf+0x418>)
 8009322:	4598      	cmp	r8, r3
 8009324:	d908      	bls.n	8009338 <__ieee754_powf+0x18c>
 8009326:	2c00      	cmp	r4, #0
 8009328:	dcf3      	bgt.n	8009312 <__ieee754_powf+0x166>
 800932a:	2000      	movs	r0, #0
 800932c:	ecbd 8b02 	vpop	{d8}
 8009330:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009334:	f000 ba92 	b.w	800985c <__math_uflowf>
 8009338:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800933c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009340:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 80095c8 <__ieee754_powf+0x41c>
 8009344:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8009348:	eee0 6a67 	vfms.f32	s13, s0, s15
 800934c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009350:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8009354:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009358:	ee27 7a27 	vmul.f32	s14, s14, s15
 800935c:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 80095cc <__ieee754_powf+0x420>
 8009360:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8009364:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 80095d0 <__ieee754_powf+0x424>
 8009368:	eee0 7a07 	vfma.f32	s15, s0, s14
 800936c:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 80095d4 <__ieee754_powf+0x428>
 8009370:	eef0 6a67 	vmov.f32	s13, s15
 8009374:	eee0 6a07 	vfma.f32	s13, s0, s14
 8009378:	ee16 3a90 	vmov	r3, s13
 800937c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009380:	f023 030f 	bic.w	r3, r3, #15
 8009384:	ee06 3a90 	vmov	s13, r3
 8009388:	eee0 6a47 	vfms.f32	s13, s0, s14
 800938c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009390:	3d01      	subs	r5, #1
 8009392:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8009396:	4305      	orrs	r5, r0
 8009398:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800939c:	f024 040f 	bic.w	r4, r4, #15
 80093a0:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80093a4:	bf18      	it	ne
 80093a6:	eeb0 8a47 	vmovne.f32	s16, s14
 80093aa:	ee07 4a10 	vmov	s14, r4
 80093ae:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80093b2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80093b6:	ee07 3a90 	vmov	s15, r3
 80093ba:	eee7 0a27 	vfma.f32	s1, s14, s15
 80093be:	ee07 4a10 	vmov	s14, r4
 80093c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80093c6:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80093ca:	ee17 1a10 	vmov	r1, s14
 80093ce:	2900      	cmp	r1, #0
 80093d0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80093d4:	f340 80dd 	ble.w	8009592 <__ieee754_powf+0x3e6>
 80093d8:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80093dc:	f240 80ca 	bls.w	8009574 <__ieee754_powf+0x3c8>
 80093e0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80093e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093e8:	bf4c      	ite	mi
 80093ea:	2001      	movmi	r0, #1
 80093ec:	2000      	movpl	r0, #0
 80093ee:	e791      	b.n	8009314 <__ieee754_powf+0x168>
 80093f0:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80093f4:	bf01      	itttt	eq
 80093f6:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80095d8 <__ieee754_powf+0x42c>
 80093fa:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80093fe:	f06f 0317 	mvneq.w	r3, #23
 8009402:	ee17 7a90 	vmoveq	r7, s15
 8009406:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800940a:	bf18      	it	ne
 800940c:	2300      	movne	r3, #0
 800940e:	3a7f      	subs	r2, #127	@ 0x7f
 8009410:	441a      	add	r2, r3
 8009412:	4b72      	ldr	r3, [pc, #456]	@ (80095dc <__ieee754_powf+0x430>)
 8009414:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8009418:	429f      	cmp	r7, r3
 800941a:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800941e:	dd06      	ble.n	800942e <__ieee754_powf+0x282>
 8009420:	4b6f      	ldr	r3, [pc, #444]	@ (80095e0 <__ieee754_powf+0x434>)
 8009422:	429f      	cmp	r7, r3
 8009424:	f340 80a4 	ble.w	8009570 <__ieee754_powf+0x3c4>
 8009428:	3201      	adds	r2, #1
 800942a:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800942e:	2600      	movs	r6, #0
 8009430:	4b6c      	ldr	r3, [pc, #432]	@ (80095e4 <__ieee754_powf+0x438>)
 8009432:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8009436:	ee07 1a10 	vmov	s14, r1
 800943a:	edd3 5a00 	vldr	s11, [r3]
 800943e:	4b6a      	ldr	r3, [pc, #424]	@ (80095e8 <__ieee754_powf+0x43c>)
 8009440:	ee75 7a87 	vadd.f32	s15, s11, s14
 8009444:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009448:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800944c:	1049      	asrs	r1, r1, #1
 800944e:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8009452:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8009456:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800945a:	ee37 6a65 	vsub.f32	s12, s14, s11
 800945e:	ee07 1a90 	vmov	s15, r1
 8009462:	ee26 5a24 	vmul.f32	s10, s12, s9
 8009466:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800946a:	ee15 7a10 	vmov	r7, s10
 800946e:	401f      	ands	r7, r3
 8009470:	ee06 7a90 	vmov	s13, r7
 8009474:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8009478:	ee37 7a65 	vsub.f32	s14, s14, s11
 800947c:	ee65 7a05 	vmul.f32	s15, s10, s10
 8009480:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8009484:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80095ec <__ieee754_powf+0x440>
 8009488:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80095f0 <__ieee754_powf+0x444>
 800948c:	eee7 5a87 	vfma.f32	s11, s15, s14
 8009490:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80095f4 <__ieee754_powf+0x448>
 8009494:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009498:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 80095c8 <__ieee754_powf+0x41c>
 800949c:	eee7 5a27 	vfma.f32	s11, s14, s15
 80094a0:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80095f8 <__ieee754_powf+0x44c>
 80094a4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80094a8:	eddf 5a54 	vldr	s11, [pc, #336]	@ 80095fc <__ieee754_powf+0x450>
 80094ac:	ee26 6a24 	vmul.f32	s12, s12, s9
 80094b0:	eee7 5a27 	vfma.f32	s11, s14, s15
 80094b4:	ee35 7a26 	vadd.f32	s14, s10, s13
 80094b8:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80094bc:	ee27 7a06 	vmul.f32	s14, s14, s12
 80094c0:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80094c4:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80094c8:	eef0 5a67 	vmov.f32	s11, s15
 80094cc:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80094d0:	ee75 5a87 	vadd.f32	s11, s11, s14
 80094d4:	ee15 1a90 	vmov	r1, s11
 80094d8:	4019      	ands	r1, r3
 80094da:	ee05 1a90 	vmov	s11, r1
 80094de:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80094e2:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80094e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80094ea:	ee67 7a85 	vmul.f32	s15, s15, s10
 80094ee:	eee6 7a25 	vfma.f32	s15, s12, s11
 80094f2:	eeb0 6a67 	vmov.f32	s12, s15
 80094f6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80094fa:	ee16 1a10 	vmov	r1, s12
 80094fe:	4019      	ands	r1, r3
 8009500:	ee06 1a10 	vmov	s12, r1
 8009504:	eeb0 7a46 	vmov.f32	s14, s12
 8009508:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800950c:	493c      	ldr	r1, [pc, #240]	@ (8009600 <__ieee754_powf+0x454>)
 800950e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8009512:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009516:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8009604 <__ieee754_powf+0x458>
 800951a:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8009608 <__ieee754_powf+0x45c>
 800951e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009522:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800960c <__ieee754_powf+0x460>
 8009526:	eee6 7a07 	vfma.f32	s15, s12, s14
 800952a:	ed91 7a00 	vldr	s14, [r1]
 800952e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009532:	ee07 2a10 	vmov	s14, r2
 8009536:	eef0 6a67 	vmov.f32	s13, s15
 800953a:	4a35      	ldr	r2, [pc, #212]	@ (8009610 <__ieee754_powf+0x464>)
 800953c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8009540:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8009544:	ed92 5a00 	vldr	s10, [r2]
 8009548:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800954c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009550:	ee76 6a87 	vadd.f32	s13, s13, s14
 8009554:	ee16 2a90 	vmov	r2, s13
 8009558:	4013      	ands	r3, r2
 800955a:	ee06 3a90 	vmov	s13, r3
 800955e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009562:	ee37 7a45 	vsub.f32	s14, s14, s10
 8009566:	eea6 7a65 	vfms.f32	s14, s12, s11
 800956a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800956e:	e70f      	b.n	8009390 <__ieee754_powf+0x1e4>
 8009570:	2601      	movs	r6, #1
 8009572:	e75d      	b.n	8009430 <__ieee754_powf+0x284>
 8009574:	d152      	bne.n	800961c <__ieee754_powf+0x470>
 8009576:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8009614 <__ieee754_powf+0x468>
 800957a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800957e:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8009582:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800958a:	f73f af29 	bgt.w	80093e0 <__ieee754_powf+0x234>
 800958e:	2386      	movs	r3, #134	@ 0x86
 8009590:	e048      	b.n	8009624 <__ieee754_powf+0x478>
 8009592:	4a21      	ldr	r2, [pc, #132]	@ (8009618 <__ieee754_powf+0x46c>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d907      	bls.n	80095a8 <__ieee754_powf+0x3fc>
 8009598:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800959c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095a0:	bf4c      	ite	mi
 80095a2:	2001      	movmi	r0, #1
 80095a4:	2000      	movpl	r0, #0
 80095a6:	e6c1      	b.n	800932c <__ieee754_powf+0x180>
 80095a8:	d138      	bne.n	800961c <__ieee754_powf+0x470>
 80095aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80095ae:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80095b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095b6:	dbea      	blt.n	800958e <__ieee754_powf+0x3e2>
 80095b8:	e7ee      	b.n	8009598 <__ieee754_powf+0x3ec>
 80095ba:	bf00      	nop
 80095bc:	00000000 	.word	0x00000000
 80095c0:	3f7ffff3 	.word	0x3f7ffff3
 80095c4:	3f800007 	.word	0x3f800007
 80095c8:	3eaaaaab 	.word	0x3eaaaaab
 80095cc:	3fb8aa3b 	.word	0x3fb8aa3b
 80095d0:	36eca570 	.word	0x36eca570
 80095d4:	3fb8aa00 	.word	0x3fb8aa00
 80095d8:	4b800000 	.word	0x4b800000
 80095dc:	001cc471 	.word	0x001cc471
 80095e0:	005db3d6 	.word	0x005db3d6
 80095e4:	08009e80 	.word	0x08009e80
 80095e8:	fffff000 	.word	0xfffff000
 80095ec:	3e6c3255 	.word	0x3e6c3255
 80095f0:	3e53f142 	.word	0x3e53f142
 80095f4:	3e8ba305 	.word	0x3e8ba305
 80095f8:	3edb6db7 	.word	0x3edb6db7
 80095fc:	3f19999a 	.word	0x3f19999a
 8009600:	08009e70 	.word	0x08009e70
 8009604:	3f76384f 	.word	0x3f76384f
 8009608:	3f763800 	.word	0x3f763800
 800960c:	369dc3a0 	.word	0x369dc3a0
 8009610:	08009e78 	.word	0x08009e78
 8009614:	3338aa3c 	.word	0x3338aa3c
 8009618:	43160000 	.word	0x43160000
 800961c:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8009620:	d971      	bls.n	8009706 <__ieee754_powf+0x55a>
 8009622:	15db      	asrs	r3, r3, #23
 8009624:	3b7e      	subs	r3, #126	@ 0x7e
 8009626:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800962a:	4118      	asrs	r0, r3
 800962c:	4408      	add	r0, r1
 800962e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009632:	4a3c      	ldr	r2, [pc, #240]	@ (8009724 <__ieee754_powf+0x578>)
 8009634:	3b7f      	subs	r3, #127	@ 0x7f
 8009636:	411a      	asrs	r2, r3
 8009638:	4002      	ands	r2, r0
 800963a:	ee07 2a10 	vmov	s14, r2
 800963e:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8009642:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8009646:	f1c3 0317 	rsb	r3, r3, #23
 800964a:	4118      	asrs	r0, r3
 800964c:	2900      	cmp	r1, #0
 800964e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009652:	bfb8      	it	lt
 8009654:	4240      	neglt	r0, r0
 8009656:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800965a:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8009728 <__ieee754_powf+0x57c>
 800965e:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800972c <__ieee754_powf+0x580>
 8009662:	ee17 3a10 	vmov	r3, s14
 8009666:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800966a:	f023 030f 	bic.w	r3, r3, #15
 800966e:	ee07 3a10 	vmov	s14, r3
 8009672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009676:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800967a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800967e:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8009730 <__ieee754_powf+0x584>
 8009682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009686:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800968a:	eef0 6a67 	vmov.f32	s13, s15
 800968e:	eee7 6a06 	vfma.f32	s13, s14, s12
 8009692:	eef0 5a66 	vmov.f32	s11, s13
 8009696:	eee7 5a46 	vfms.f32	s11, s14, s12
 800969a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800969e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80096a2:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8009734 <__ieee754_powf+0x588>
 80096a6:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8009738 <__ieee754_powf+0x58c>
 80096aa:	eea7 6a25 	vfma.f32	s12, s14, s11
 80096ae:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800973c <__ieee754_powf+0x590>
 80096b2:	eee6 5a07 	vfma.f32	s11, s12, s14
 80096b6:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8009740 <__ieee754_powf+0x594>
 80096ba:	eea5 6a87 	vfma.f32	s12, s11, s14
 80096be:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8009744 <__ieee754_powf+0x598>
 80096c2:	eee6 5a07 	vfma.f32	s11, s12, s14
 80096c6:	eeb0 6a66 	vmov.f32	s12, s13
 80096ca:	eea5 6ac7 	vfms.f32	s12, s11, s14
 80096ce:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80096d2:	ee66 5a86 	vmul.f32	s11, s13, s12
 80096d6:	ee36 6a47 	vsub.f32	s12, s12, s14
 80096da:	eee6 7aa7 	vfma.f32	s15, s13, s15
 80096de:	ee85 7a86 	vdiv.f32	s14, s11, s12
 80096e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80096ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 80096ee:	ee10 3a10 	vmov	r3, s0
 80096f2:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80096f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80096fa:	da06      	bge.n	800970a <__ieee754_powf+0x55e>
 80096fc:	f000 f82e 	bl	800975c <scalbnf>
 8009700:	ee20 0a08 	vmul.f32	s0, s0, s16
 8009704:	e56a      	b.n	80091dc <__ieee754_powf+0x30>
 8009706:	2000      	movs	r0, #0
 8009708:	e7a5      	b.n	8009656 <__ieee754_powf+0x4aa>
 800970a:	ee00 3a10 	vmov	s0, r3
 800970e:	e7f7      	b.n	8009700 <__ieee754_powf+0x554>
 8009710:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009714:	e562      	b.n	80091dc <__ieee754_powf+0x30>
 8009716:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8009748 <__ieee754_powf+0x59c>
 800971a:	e55f      	b.n	80091dc <__ieee754_powf+0x30>
 800971c:	eeb0 0a48 	vmov.f32	s0, s16
 8009720:	e55c      	b.n	80091dc <__ieee754_powf+0x30>
 8009722:	bf00      	nop
 8009724:	ff800000 	.word	0xff800000
 8009728:	3f317218 	.word	0x3f317218
 800972c:	3f317200 	.word	0x3f317200
 8009730:	35bfbe8c 	.word	0x35bfbe8c
 8009734:	b5ddea0e 	.word	0xb5ddea0e
 8009738:	3331bb4c 	.word	0x3331bb4c
 800973c:	388ab355 	.word	0x388ab355
 8009740:	bb360b61 	.word	0xbb360b61
 8009744:	3e2aaaab 	.word	0x3e2aaaab
 8009748:	00000000 	.word	0x00000000

0800974c <fabsf>:
 800974c:	ee10 3a10 	vmov	r3, s0
 8009750:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009754:	ee00 3a10 	vmov	s0, r3
 8009758:	4770      	bx	lr
	...

0800975c <scalbnf>:
 800975c:	ee10 3a10 	vmov	r3, s0
 8009760:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009764:	d02b      	beq.n	80097be <scalbnf+0x62>
 8009766:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800976a:	d302      	bcc.n	8009772 <scalbnf+0x16>
 800976c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009770:	4770      	bx	lr
 8009772:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8009776:	d123      	bne.n	80097c0 <scalbnf+0x64>
 8009778:	4b24      	ldr	r3, [pc, #144]	@ (800980c <scalbnf+0xb0>)
 800977a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8009810 <scalbnf+0xb4>
 800977e:	4298      	cmp	r0, r3
 8009780:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009784:	db17      	blt.n	80097b6 <scalbnf+0x5a>
 8009786:	ee10 3a10 	vmov	r3, s0
 800978a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800978e:	3a19      	subs	r2, #25
 8009790:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009794:	4288      	cmp	r0, r1
 8009796:	dd15      	ble.n	80097c4 <scalbnf+0x68>
 8009798:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8009814 <scalbnf+0xb8>
 800979c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8009818 <scalbnf+0xbc>
 80097a0:	ee10 3a10 	vmov	r3, s0
 80097a4:	eeb0 7a67 	vmov.f32	s14, s15
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	bfb8      	it	lt
 80097ac:	eef0 7a66 	vmovlt.f32	s15, s13
 80097b0:	ee27 0a87 	vmul.f32	s0, s15, s14
 80097b4:	4770      	bx	lr
 80097b6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800981c <scalbnf+0xc0>
 80097ba:	ee27 0a80 	vmul.f32	s0, s15, s0
 80097be:	4770      	bx	lr
 80097c0:	0dd2      	lsrs	r2, r2, #23
 80097c2:	e7e5      	b.n	8009790 <scalbnf+0x34>
 80097c4:	4410      	add	r0, r2
 80097c6:	28fe      	cmp	r0, #254	@ 0xfe
 80097c8:	dce6      	bgt.n	8009798 <scalbnf+0x3c>
 80097ca:	2800      	cmp	r0, #0
 80097cc:	dd06      	ble.n	80097dc <scalbnf+0x80>
 80097ce:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80097d2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80097d6:	ee00 3a10 	vmov	s0, r3
 80097da:	4770      	bx	lr
 80097dc:	f110 0f16 	cmn.w	r0, #22
 80097e0:	da09      	bge.n	80097f6 <scalbnf+0x9a>
 80097e2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800981c <scalbnf+0xc0>
 80097e6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8009820 <scalbnf+0xc4>
 80097ea:	ee10 3a10 	vmov	r3, s0
 80097ee:	eeb0 7a67 	vmov.f32	s14, s15
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	e7d9      	b.n	80097aa <scalbnf+0x4e>
 80097f6:	3019      	adds	r0, #25
 80097f8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80097fc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009800:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8009824 <scalbnf+0xc8>
 8009804:	ee07 3a90 	vmov	s15, r3
 8009808:	e7d7      	b.n	80097ba <scalbnf+0x5e>
 800980a:	bf00      	nop
 800980c:	ffff3cb0 	.word	0xffff3cb0
 8009810:	4c000000 	.word	0x4c000000
 8009814:	7149f2ca 	.word	0x7149f2ca
 8009818:	f149f2ca 	.word	0xf149f2ca
 800981c:	0da24260 	.word	0x0da24260
 8009820:	8da24260 	.word	0x8da24260
 8009824:	33000000 	.word	0x33000000

08009828 <with_errnof>:
 8009828:	b510      	push	{r4, lr}
 800982a:	ed2d 8b02 	vpush	{d8}
 800982e:	eeb0 8a40 	vmov.f32	s16, s0
 8009832:	4604      	mov	r4, r0
 8009834:	f7fd fb30 	bl	8006e98 <__errno>
 8009838:	eeb0 0a48 	vmov.f32	s0, s16
 800983c:	ecbd 8b02 	vpop	{d8}
 8009840:	6004      	str	r4, [r0, #0]
 8009842:	bd10      	pop	{r4, pc}

08009844 <xflowf>:
 8009844:	b130      	cbz	r0, 8009854 <xflowf+0x10>
 8009846:	eef1 7a40 	vneg.f32	s15, s0
 800984a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800984e:	2022      	movs	r0, #34	@ 0x22
 8009850:	f7ff bfea 	b.w	8009828 <with_errnof>
 8009854:	eef0 7a40 	vmov.f32	s15, s0
 8009858:	e7f7      	b.n	800984a <xflowf+0x6>
	...

0800985c <__math_uflowf>:
 800985c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009864 <__math_uflowf+0x8>
 8009860:	f7ff bff0 	b.w	8009844 <xflowf>
 8009864:	10000000 	.word	0x10000000

08009868 <__math_oflowf>:
 8009868:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009870 <__math_oflowf+0x8>
 800986c:	f7ff bfea 	b.w	8009844 <xflowf>
 8009870:	70000000 	.word	0x70000000

08009874 <__ieee754_sqrtf>:
 8009874:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009878:	4770      	bx	lr
	...

0800987c <__ieee754_logf>:
 800987c:	ee10 3a10 	vmov	r3, s0
 8009880:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009884:	d106      	bne.n	8009894 <__ieee754_logf+0x18>
 8009886:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8009a20 <__ieee754_logf+0x1a4>
 800988a:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8009a24 <__ieee754_logf+0x1a8>
 800988e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009892:	4770      	bx	lr
 8009894:	2b00      	cmp	r3, #0
 8009896:	461a      	mov	r2, r3
 8009898:	da02      	bge.n	80098a0 <__ieee754_logf+0x24>
 800989a:	ee30 7a40 	vsub.f32	s14, s0, s0
 800989e:	e7f4      	b.n	800988a <__ieee754_logf+0xe>
 80098a0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80098a4:	db02      	blt.n	80098ac <__ieee754_logf+0x30>
 80098a6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80098aa:	4770      	bx	lr
 80098ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80098b0:	bfb8      	it	lt
 80098b2:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 8009a28 <__ieee754_logf+0x1ac>
 80098b6:	485d      	ldr	r0, [pc, #372]	@ (8009a2c <__ieee754_logf+0x1b0>)
 80098b8:	bfbe      	ittt	lt
 80098ba:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80098be:	f06f 0118 	mvnlt.w	r1, #24
 80098c2:	ee17 2a90 	vmovlt	r2, s15
 80098c6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80098ca:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80098ce:	4410      	add	r0, r2
 80098d0:	bfa8      	it	ge
 80098d2:	2100      	movge	r1, #0
 80098d4:	3b7f      	subs	r3, #127	@ 0x7f
 80098d6:	440b      	add	r3, r1
 80098d8:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 80098dc:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 80098e0:	4311      	orrs	r1, r2
 80098e2:	ee00 1a10 	vmov	s0, r1
 80098e6:	4952      	ldr	r1, [pc, #328]	@ (8009a30 <__ieee754_logf+0x1b4>)
 80098e8:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 80098ec:	f102 000f 	add.w	r0, r2, #15
 80098f0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80098f4:	4001      	ands	r1, r0
 80098f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80098fa:	bb89      	cbnz	r1, 8009960 <__ieee754_logf+0xe4>
 80098fc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009904:	d10f      	bne.n	8009926 <__ieee754_logf+0xaa>
 8009906:	2b00      	cmp	r3, #0
 8009908:	f000 8087 	beq.w	8009a1a <__ieee754_logf+0x19e>
 800990c:	ee07 3a90 	vmov	s15, r3
 8009910:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8009a34 <__ieee754_logf+0x1b8>
 8009914:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8009a38 <__ieee754_logf+0x1bc>
 8009918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800991c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009920:	eea7 0a87 	vfma.f32	s0, s15, s14
 8009924:	4770      	bx	lr
 8009926:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8009a3c <__ieee754_logf+0x1c0>
 800992a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800992e:	eee0 7a66 	vfms.f32	s15, s0, s13
 8009932:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009936:	ee27 7a27 	vmul.f32	s14, s14, s15
 800993a:	b913      	cbnz	r3, 8009942 <__ieee754_logf+0xc6>
 800993c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009940:	4770      	bx	lr
 8009942:	ee07 3a90 	vmov	s15, r3
 8009946:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009a34 <__ieee754_logf+0x1b8>
 800994a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800994e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8009952:	ee37 0a40 	vsub.f32	s0, s14, s0
 8009956:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8009a38 <__ieee754_logf+0x1bc>
 800995a:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800995e:	4770      	bx	lr
 8009960:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8009964:	ee70 7a27 	vadd.f32	s15, s0, s15
 8009968:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8009a40 <__ieee754_logf+0x1c4>
 800996c:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8009a44 <__ieee754_logf+0x1c8>
 8009970:	4935      	ldr	r1, [pc, #212]	@ (8009a48 <__ieee754_logf+0x1cc>)
 8009972:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8009976:	4411      	add	r1, r2
 8009978:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 800997c:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 8009980:	430a      	orrs	r2, r1
 8009982:	2a00      	cmp	r2, #0
 8009984:	ee07 3a90 	vmov	s15, r3
 8009988:	ee26 5a06 	vmul.f32	s10, s12, s12
 800998c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009990:	ee25 7a05 	vmul.f32	s14, s10, s10
 8009994:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8009a4c <__ieee754_logf+0x1d0>
 8009998:	eee7 7a25 	vfma.f32	s15, s14, s11
 800999c:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8009a50 <__ieee754_logf+0x1d4>
 80099a0:	eee7 5a87 	vfma.f32	s11, s15, s14
 80099a4:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8009a54 <__ieee754_logf+0x1d8>
 80099a8:	eee7 7a24 	vfma.f32	s15, s14, s9
 80099ac:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 8009a58 <__ieee754_logf+0x1dc>
 80099b0:	eee7 4a87 	vfma.f32	s9, s15, s14
 80099b4:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8009a5c <__ieee754_logf+0x1e0>
 80099b8:	eee4 7a87 	vfma.f32	s15, s9, s14
 80099bc:	ee67 7a85 	vmul.f32	s15, s15, s10
 80099c0:	eee5 7a87 	vfma.f32	s15, s11, s14
 80099c4:	dd1a      	ble.n	80099fc <__ieee754_logf+0x180>
 80099c6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80099ca:	ee20 7a07 	vmul.f32	s14, s0, s14
 80099ce:	ee27 7a00 	vmul.f32	s14, s14, s0
 80099d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80099d6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80099da:	b913      	cbnz	r3, 80099e2 <__ieee754_logf+0x166>
 80099dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80099e0:	e7ac      	b.n	800993c <__ieee754_logf+0xc0>
 80099e2:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8009a34 <__ieee754_logf+0x1b8>
 80099e6:	eee6 7a86 	vfma.f32	s15, s13, s12
 80099ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80099ee:	ee37 0a40 	vsub.f32	s0, s14, s0
 80099f2:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8009a38 <__ieee754_logf+0x1bc>
 80099f6:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80099fa:	4770      	bx	lr
 80099fc:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009a00:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009a04:	b913      	cbnz	r3, 8009a0c <__ieee754_logf+0x190>
 8009a06:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009a0a:	4770      	bx	lr
 8009a0c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8009a34 <__ieee754_logf+0x1b8>
 8009a10:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8009a14:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009a18:	e7eb      	b.n	80099f2 <__ieee754_logf+0x176>
 8009a1a:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8009a24 <__ieee754_logf+0x1a8>
 8009a1e:	4770      	bx	lr
 8009a20:	cc000000 	.word	0xcc000000
 8009a24:	00000000 	.word	0x00000000
 8009a28:	4c000000 	.word	0x4c000000
 8009a2c:	004afb20 	.word	0x004afb20
 8009a30:	007ffff0 	.word	0x007ffff0
 8009a34:	3717f7d1 	.word	0x3717f7d1
 8009a38:	3f317180 	.word	0x3f317180
 8009a3c:	3eaaaaab 	.word	0x3eaaaaab
 8009a40:	3e1cd04f 	.word	0x3e1cd04f
 8009a44:	3e178897 	.word	0x3e178897
 8009a48:	ffcf5c30 	.word	0xffcf5c30
 8009a4c:	3e638e29 	.word	0x3e638e29
 8009a50:	3ecccccd 	.word	0x3ecccccd
 8009a54:	3e3a3325 	.word	0x3e3a3325
 8009a58:	3e924925 	.word	0x3e924925
 8009a5c:	3f2aaaab 	.word	0x3f2aaaab

08009a60 <_init>:
 8009a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a62:	bf00      	nop
 8009a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a66:	bc08      	pop	{r3}
 8009a68:	469e      	mov	lr, r3
 8009a6a:	4770      	bx	lr

08009a6c <_fini>:
 8009a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a6e:	bf00      	nop
 8009a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a72:	bc08      	pop	{r3}
 8009a74:	469e      	mov	lr, r3
 8009a76:	4770      	bx	lr
